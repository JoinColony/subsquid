{"contractName":"IColony","abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"agent","type":"address"},{"indexed":true,"internalType":"bytes32","name":"txHash","type":"bytes32"},{"indexed":false,"internalType":"string","name":"metadata","type":"string"}],"name":"Annotation","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"agent","type":"address"},{"indexed":false,"internalType":"address","name":"user","type":"address"},{"indexed":false,"internalType":"uint256","name":"skillId","type":"uint256"},{"indexed":false,"internalType":"int256","name":"amount","type":"int256"}],"name":"ArbitraryReputationUpdate","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"target","type":"address"},{"indexed":false,"internalType":"bytes","name":"data","type":"bytes"},{"indexed":false,"internalType":"bool","name":"success","type":"bool"}],"name":"ArbitraryTransaction","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"agent","type":"address"},{"indexed":false,"internalType":"address[]","name":"users","type":"address[]"},{"indexed":false,"internalType":"int256[]","name":"amounts","type":"int256[]"}],"name":"ColonyBootstrapped","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"agent","type":"address"},{"indexed":false,"internalType":"address","name":"token","type":"address"},{"indexed":false,"internalType":"uint256","name":"fee","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"payoutRemainder","type":"uint256"}],"name":"ColonyFundsClaimed","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"agent","type":"address"},{"indexed":true,"internalType":"uint256","name":"fromPot","type":"uint256"},{"indexed":true,"internalType":"uint256","name":"toPot","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"},{"indexed":false,"internalType":"address","name":"token","type":"address"}],"name":"ColonyFundsMovedBetweenFundingPots","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"agent","type":"address"},{"indexed":false,"internalType":"address","name":"colonyNetwork","type":"address"},{"indexed":false,"internalType":"address","name":"token","type":"address"}],"name":"ColonyInitialised","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"agent","type":"address"},{"indexed":false,"internalType":"string","name":"metadata","type":"string"}],"name":"ColonyMetadata","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"agent","type":"address"},{"indexed":false,"internalType":"string","name":"metadata","type":"string"}],"name":"ColonyMetadataDelta","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"agent","type":"address"},{"indexed":false,"internalType":"uint256","name":"rewardInverse","type":"uint256"}],"name":"ColonyRewardInverseSet","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"agent","type":"address"},{"indexed":true,"internalType":"address","name":"user","type":"address"},{"indexed":true,"internalType":"uint256","name":"domainId","type":"uint256"},{"indexed":true,"internalType":"uint8","name":"role","type":"uint8"},{"indexed":false,"internalType":"bool","name":"setTo","type":"bool"}],"name":"ColonyRoleSet","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"agent","type":"address"},{"indexed":false,"internalType":"uint256","name":"oldVersion","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"newVersion","type":"uint256"}],"name":"ColonyUpgraded","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"agent","type":"address"},{"indexed":false,"internalType":"uint256","name":"domainId","type":"uint256"}],"name":"DomainAdded","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"agent","type":"address"},{"indexed":true,"internalType":"uint256","name":"domainId","type":"uint256"},{"indexed":false,"internalType":"bool","name":"deprecated","type":"bool"}],"name":"DomainDeprecated","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"agent","type":"address"},{"indexed":true,"internalType":"uint256","name":"domainId","type":"uint256"},{"indexed":false,"internalType":"string","name":"metadata","type":"string"}],"name":"DomainMetadata","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"agent","type":"address"},{"indexed":false,"internalType":"uint256","name":"expenditureId","type":"uint256"}],"name":"ExpenditureAdded","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"agent","type":"address"},{"indexed":true,"internalType":"uint256","name":"expenditureId","type":"uint256"}],"name":"ExpenditureCancelled","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"agent","type":"address"},{"indexed":true,"internalType":"uint256","name":"expenditureId","type":"uint256"},{"indexed":true,"internalType":"uint256","name":"slot","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"claimDelay","type":"uint256"}],"name":"ExpenditureClaimDelaySet","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"agent","type":"address"},{"indexed":true,"internalType":"uint256","name":"expenditureId","type":"uint256"}],"name":"ExpenditureFinalized","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"agent","type":"address"},{"indexed":false,"internalType":"uint256","name":"globalClaimDelay","type":"uint256"}],"name":"ExpenditureGlobalClaimDelaySet","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"agent","type":"address"},{"indexed":true,"internalType":"uint256","name":"expenditureId","type":"uint256"}],"name":"ExpenditureLocked","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"agent","type":"address"},{"indexed":true,"internalType":"uint256","name":"expenditureId","type":"uint256"},{"indexed":false,"internalType":"string","name":"metadata","type":"string"}],"name":"ExpenditureMetadataSet","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"agent","type":"address"},{"indexed":true,"internalType":"uint256","name":"expenditureId","type":"uint256"},{"indexed":true,"internalType":"uint256","name":"slot","type":"uint256"},{"indexed":false,"internalType":"int256","name":"payoutModifier","type":"int256"}],"name":"ExpenditurePayoutModifierSet","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"agent","type":"address"},{"indexed":true,"internalType":"uint256","name":"expenditureId","type":"uint256"},{"indexed":true,"internalType":"uint256","name":"slot","type":"uint256"},{"indexed":true,"internalType":"address","name":"token","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"ExpenditurePayoutSet","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"agent","type":"address"},{"indexed":true,"internalType":"uint256","name":"expenditureId","type":"uint256"},{"indexed":true,"internalType":"uint256","name":"slot","type":"uint256"},{"indexed":true,"internalType":"address","name":"recipient","type":"address"}],"name":"ExpenditureRecipientSet","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"agent","type":"address"},{"indexed":true,"internalType":"uint256","name":"expenditureId","type":"uint256"},{"indexed":true,"internalType":"uint256","name":"slot","type":"uint256"},{"indexed":true,"internalType":"uint256","name":"skillId","type":"uint256"}],"name":"ExpenditureSkillSet","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"agent","type":"address"},{"indexed":true,"internalType":"uint256","name":"expenditureId","type":"uint256"},{"indexed":true,"internalType":"uint256","name":"storageSlot","type":"uint256"},{"indexed":false,"internalType":"bool[]","name":"mask","type":"bool[]"},{"indexed":false,"internalType":"bytes32[]","name":"keys","type":"bytes32[]"},{"indexed":false,"internalType":"bytes32","name":"value","type":"bytes32"}],"name":"ExpenditureStateChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"agent","type":"address"},{"indexed":true,"internalType":"uint256","name":"expenditureId","type":"uint256"},{"indexed":true,"internalType":"address","name":"owner","type":"address"}],"name":"ExpenditureTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"fundingPotId","type":"uint256"}],"name":"FundingPotAdded","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"agent","type":"address"},{"indexed":false,"internalType":"uint256","name":"localSkillId","type":"uint256"}],"name":"LocalSkillAdded","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"agent","type":"address"},{"indexed":false,"internalType":"uint256","name":"localSkillId","type":"uint256"},{"indexed":false,"internalType":"bool","name":"deprecated","type":"bool"}],"name":"LocalSkillDeprecated","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"userAddress","type":"address"},{"indexed":false,"internalType":"address payable","name":"relayerAddress","type":"address"},{"indexed":false,"internalType":"bytes","name":"payload","type":"bytes"}],"name":"MetaTransactionExecuted","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"agent","type":"address"},{"indexed":false,"internalType":"uint256","name":"paymentId","type":"uint256"}],"name":"PaymentAdded","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"agent","type":"address"},{"indexed":true,"internalType":"uint256","name":"paymentId","type":"uint256"}],"name":"PaymentFinalized","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"agent","type":"address"},{"indexed":true,"internalType":"uint256","name":"paymentId","type":"uint256"},{"indexed":false,"internalType":"address","name":"token","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"PaymentPayoutSet","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"agent","type":"address"},{"indexed":true,"internalType":"uint256","name":"paymentId","type":"uint256"},{"indexed":false,"internalType":"address","name":"recipient","type":"address"}],"name":"PaymentRecipientSet","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"agent","type":"address"},{"indexed":true,"internalType":"uint256","name":"paymentId","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"skillId","type":"uint256"}],"name":"PaymentSkillSet","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"agent","type":"address"},{"indexed":true,"internalType":"uint256","name":"fundingPotId","type":"uint256"},{"indexed":false,"internalType":"address","name":"token","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"PayoutClaimed","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"user","type":"address"}],"name":"RecoveryModeEntered","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"user","type":"address"}],"name":"RecoveryModeExitApproved","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"user","type":"address"}],"name":"RecoveryModeExited","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"user","type":"address"},{"indexed":false,"internalType":"bool","name":"setTo","type":"bool"}],"name":"RecoveryRoleSet","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"user","type":"address"},{"indexed":false,"internalType":"uint256","name":"slot","type":"uint256"},{"indexed":false,"internalType":"bytes32","name":"fromValue","type":"bytes32"},{"indexed":false,"internalType":"bytes32","name":"toValue","type":"bytes32"}],"name":"RecoveryStorageSlotSet","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"rewardPayoutId","type":"uint256"},{"indexed":false,"internalType":"address","name":"user","type":"address"},{"indexed":false,"internalType":"uint256","name":"fee","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"rewardRemainder","type":"uint256"}],"name":"RewardPayoutClaimed","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"agent","type":"address"},{"indexed":false,"internalType":"uint256","name":"rewardPayoutId","type":"uint256"}],"name":"RewardPayoutCycleEnded","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"agent","type":"address"},{"indexed":false,"internalType":"uint256","name":"rewardPayoutId","type":"uint256"}],"name":"RewardPayoutCycleStarted","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"agent","type":"address"},{"indexed":false,"internalType":"uint256","name":"taskId","type":"uint256"}],"name":"TaskAdded","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"taskId","type":"uint256"},{"indexed":false,"internalType":"bytes32","name":"specificationHash","type":"bytes32"}],"name":"TaskBriefSet","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"taskId","type":"uint256"}],"name":"TaskCanceled","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address[]","name":"reviewerAddresses","type":"address[]"}],"name":"TaskChangedViaSignatures","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"agent","type":"address"},{"indexed":true,"internalType":"uint256","name":"taskId","type":"uint256"}],"name":"TaskCompleted","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"agent","type":"address"},{"indexed":true,"internalType":"uint256","name":"taskId","type":"uint256"},{"indexed":false,"internalType":"bytes32","name":"deliverableHash","type":"bytes32"}],"name":"TaskDeliverableSubmitted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"taskId","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"dueDate","type":"uint256"}],"name":"TaskDueDateSet","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"agent","type":"address"},{"indexed":true,"internalType":"uint256","name":"taskId","type":"uint256"}],"name":"TaskFinalized","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"taskId","type":"uint256"},{"indexed":false,"internalType":"enum ColonyDataTypes.TaskRole","name":"role","type":"uint8"},{"indexed":false,"internalType":"address","name":"token","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"TaskPayoutSet","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"taskId","type":"uint256"},{"indexed":false,"internalType":"enum ColonyDataTypes.TaskRole","name":"role","type":"uint8"},{"indexed":true,"internalType":"address","name":"user","type":"address"}],"name":"TaskRoleUserSet","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"taskId","type":"uint256"},{"indexed":true,"internalType":"uint256","name":"skillId","type":"uint256"}],"name":"TaskSkillSet","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"agent","type":"address"},{"indexed":true,"internalType":"uint256","name":"taskId","type":"uint256"},{"indexed":false,"internalType":"enum ColonyDataTypes.TaskRole","name":"role","type":"uint8"},{"indexed":false,"internalType":"uint8","name":"rating","type":"uint8"}],"name":"TaskWorkRatingRevealed","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"agent","type":"address"}],"name":"TokenUnlocked","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"agent","type":"address"},{"indexed":false,"internalType":"address","name":"token","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"TokensBurned","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"agent","type":"address"},{"indexed":false,"internalType":"address","name":"who","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"TokensMinted","type":"event"},{"inputs":[],"name":"approveExitRecovery","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_slot","type":"uint256"}],"name":"checkNotAdditionalProtectedVariable","outputs":[],"stateMutability":"view","type":"function"},{"inputs":[],"name":"enterRecoveryMode","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"userAddress","type":"address"},{"internalType":"bytes","name":"payload","type":"bytes"},{"internalType":"bytes32","name":"sigR","type":"bytes32"},{"internalType":"bytes32","name":"sigS","type":"bytes32"},{"internalType":"uint8","name":"sigV","type":"uint8"}],"name":"executeMetaTransaction","outputs":[{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"payable","type":"function"},{"inputs":[],"name":"exitRecoveryMode","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"userAddress","type":"address"}],"name":"getMetatransactionNonce","outputs":[{"internalType":"uint256","name":"nonce","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"isInRecoveryMode","outputs":[{"internalType":"bool","name":"inRecoveryMode","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes[]","name":"data","type":"bytes[]"}],"name":"multicall","outputs":[{"internalType":"bytes[]","name":"results","type":"bytes[]"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"numRecoveryRoles","outputs":[{"internalType":"uint64","name":"numRoles","type":"uint64"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_user","type":"address"}],"name":"removeRecoveryRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_user","type":"address"}],"name":"setRecoveryRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_slot","type":"uint256"},{"internalType":"bytes32","name":"_value","type":"bytes32"}],"name":"setStorageSlotRecovery","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"authority","outputs":[{"internalType":"address","name":"colonyAuthority","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"colonyOwner","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"version","outputs":[{"internalType":"uint256","name":"colonyVersion","type":"uint256"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"uint256","name":"_newVersion","type":"uint256"}],"name":"upgrade","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"finishUpgrade","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"getColonyNetwork","outputs":[{"internalType":"address","name":"colonyNetwork","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getToken","outputs":[{"internalType":"address","name":"tokenAddress","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_to","type":"address"},{"internalType":"bytes","name":"_action","type":"bytes"}],"name":"makeArbitraryTransaction","outputs":[{"internalType":"bool","name":"success","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address[]","name":"_targets","type":"address[]"},{"internalType":"bytes[]","name":"_actions","type":"bytes[]"},{"internalType":"bool","name":"_strict","type":"bool"}],"name":"makeArbitraryTransactions","outputs":[{"internalType":"bool","name":"success","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_target","type":"address"},{"internalType":"bytes","name":"_action","type":"bytes"}],"name":"makeSingleArbitraryTransaction","outputs":[{"internalType":"bool","name":"success","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"_txHash","type":"bytes32"},{"internalType":"string","name":"_metadata","type":"string"}],"name":"annotateTransaction","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_user","type":"address"},{"internalType":"bool","name":"_setTo","type":"bool"}],"name":"setRootRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_permissionDomainId","type":"uint256"},{"internalType":"uint256","name":"_childSkillIndex","type":"uint256"},{"internalType":"address","name":"_user","type":"address"},{"internalType":"uint256","name":"_domainId","type":"uint256"},{"internalType":"bool","name":"_setTo","type":"bool"}],"name":"setArbitrationRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_permissionDomainId","type":"uint256"},{"internalType":"uint256","name":"_childSkillIndex","type":"uint256"},{"internalType":"address","name":"_user","type":"address"},{"internalType":"uint256","name":"_domainId","type":"uint256"},{"internalType":"bool","name":"_setTo","type":"bool"}],"name":"setArchitectureRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_permissionDomainId","type":"uint256"},{"internalType":"uint256","name":"_childSkillIndex","type":"uint256"},{"internalType":"address","name":"_user","type":"address"},{"internalType":"uint256","name":"_domainId","type":"uint256"},{"internalType":"bool","name":"_setTo","type":"bool"}],"name":"setFundingRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_permissionDomainId","type":"uint256"},{"internalType":"uint256","name":"_childSkillIndex","type":"uint256"},{"internalType":"address","name":"_user","type":"address"},{"internalType":"uint256","name":"_domainId","type":"uint256"},{"internalType":"bool","name":"_setTo","type":"bool"}],"name":"setAdministrationRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_permissionDomainId","type":"uint256"},{"internalType":"uint256","name":"_childSkillIndex","type":"uint256"},{"internalType":"address","name":"_user","type":"address"},{"internalType":"uint256","name":"_domainId","type":"uint256"},{"internalType":"bytes32","name":"_roles","type":"bytes32"}],"name":"setUserRoles","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_user","type":"address"},{"internalType":"uint256","name":"_domainId","type":"uint256"},{"internalType":"enum ColonyDataTypes.ColonyRole","name":"_role","type":"uint8"}],"name":"hasUserRole","outputs":[{"internalType":"bool","name":"hasRole","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_user","type":"address"},{"internalType":"uint256","name":"_domainId","type":"uint256"},{"internalType":"enum ColonyDataTypes.ColonyRole","name":"_role","type":"uint8"},{"internalType":"uint256","name":"_childSkillIndex","type":"uint256"},{"internalType":"uint256","name":"_childDomainId","type":"uint256"}],"name":"hasInheritedUserRole","outputs":[{"internalType":"bool","name":"hasRole","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_user","type":"address"},{"internalType":"uint256","name":"_domainId","type":"uint256"},{"internalType":"uint256","name":"_childSkillIndex","type":"uint256"},{"internalType":"uint256","name":"_childDomainId","type":"uint256"}],"name":"userCanSetRoles","outputs":[{"internalType":"bool","name":"canSet","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_user","type":"address"},{"internalType":"uint256","name":"_domain","type":"uint256"}],"name":"getUserRoles","outputs":[{"internalType":"bytes32","name":"roles","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes4","name":"_sig","type":"bytes4"}],"name":"getCapabilityRoles","outputs":[{"internalType":"bytes32","name":"roles","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_domainId","type":"uint256"},{"internalType":"address","name":"_user","type":"address"},{"internalType":"int256","name":"_amount","type":"int256"}],"name":"emitDomainReputationReward","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_skillId","type":"uint256"},{"internalType":"address","name":"_user","type":"address"},{"internalType":"int256","name":"_amount","type":"int256"}],"name":"emitSkillReputationReward","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_permissionDomainId","type":"uint256"},{"internalType":"uint256","name":"_childSkillIndex","type":"uint256"},{"internalType":"uint256","name":"_domainId","type":"uint256"},{"internalType":"address","name":"_user","type":"address"},{"internalType":"int256","name":"_amount","type":"int256"}],"name":"emitDomainReputationPenalty","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_skillId","type":"uint256"},{"internalType":"address","name":"_user","type":"address"},{"internalType":"int256","name":"_amount","type":"int256"}],"name":"emitSkillReputationPenalty","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_colonyNetworkAddress","type":"address"},{"internalType":"address","name":"_token","type":"address"}],"name":"initialiseColony","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"string","name":"_metadata","type":"string"}],"name":"editColony","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"string","name":"_metadataDelta","type":"string"}],"name":"editColonyByDelta","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address[]","name":"_users","type":"address[]"},{"internalType":"int256[]","name":"_amount","type":"int256[]"}],"name":"bootstrapColony","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_wad","type":"uint256"}],"name":"mintTokens","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_guy","type":"address"},{"internalType":"uint256","name":"_wad","type":"uint256"}],"name":"mintTokensFor","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"lockToken","outputs":[{"internalType":"uint256","name":"timesLocked","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"user","type":"address"},{"internalType":"uint256","name":"lockId","type":"uint256"}],"name":"unlockTokenForUser","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"string","name":"colonyName","type":"string"},{"internalType":"string","name":"orbitdb","type":"string"}],"name":"registerColonyLabel","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"string","name":"orbitdb","type":"string"}],"name":"updateColonyOrbitDB","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"extensionId","type":"bytes32"},{"internalType":"uint256","name":"version","type":"uint256"}],"name":"installExtension","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"extensionId","type":"bytes32"},{"internalType":"uint256","name":"newVersion","type":"uint256"}],"name":"upgradeExtension","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"extensionId","type":"bytes32"},{"internalType":"bool","name":"deprecated","type":"bool"}],"name":"deprecateExtension","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"extensionId","type":"bytes32"}],"name":"uninstallExtension","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"initialiseRootLocalSkill","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"addLocalSkill","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"localSkillId","type":"uint256"},{"internalType":"bool","name":"deprecated","type":"bool"}],"name":"deprecateLocalSkill","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"getRootLocalSkill","outputs":[{"internalType":"uint256","name":"rootLocalSkill","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_permissionDomainId","type":"uint256"},{"internalType":"uint256","name":"_childSkillIndex","type":"uint256"},{"internalType":"uint256","name":"_parentDomainId","type":"uint256"}],"name":"addDomain","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_permissionDomainId","type":"uint256"},{"internalType":"uint256","name":"_childSkillIndex","type":"uint256"},{"internalType":"uint256","name":"_parentDomainId","type":"uint256"},{"internalType":"string","name":"_metadata","type":"string"}],"name":"addDomain","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_permissionDomainId","type":"uint256"},{"internalType":"uint256","name":"_childSkillIndex","type":"uint256"},{"internalType":"uint256","name":"_domainId","type":"uint256"},{"internalType":"string","name":"_metadata","type":"string"}],"name":"editDomain","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_permissionDomainId","type":"uint256"},{"internalType":"uint256","name":"_childSkillIndex","type":"uint256"},{"internalType":"uint256","name":"_domainId","type":"uint256"},{"internalType":"bool","name":"_deprecated","type":"bool"}],"name":"deprecateDomain","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_id","type":"uint256"}],"name":"getDomain","outputs":[{"components":[{"internalType":"uint256","name":"skillId","type":"uint256"},{"internalType":"uint256","name":"fundingPotId","type":"uint256"}],"internalType":"struct ColonyDataTypes.Domain","name":"domain","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getDomainCount","outputs":[{"internalType":"uint256","name":"count","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes","name":"key","type":"bytes"},{"internalType":"bytes","name":"value","type":"bytes"},{"internalType":"uint256","name":"branchMask","type":"uint256"},{"internalType":"bytes32[]","name":"siblings","type":"bytes32[]"}],"name":"verifyReputationProof","outputs":[{"internalType":"bool","name":"isValid","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_globalClaimDelay","type":"uint256"}],"name":"setDefaultGlobalClaimDelay","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_permissionDomainId","type":"uint256"},{"internalType":"uint256","name":"_childSkillIndex","type":"uint256"},{"internalType":"uint256","name":"_domainId","type":"uint256"}],"name":"makeExpenditure","outputs":[{"internalType":"uint256","name":"expenditureId","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_id","type":"uint256"},{"internalType":"address","name":"_newOwner","type":"address"}],"name":"transferExpenditure","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_permissionDomainId","type":"uint256"},{"internalType":"uint256","name":"_childSkillIndex","type":"uint256"},{"internalType":"uint256","name":"_id","type":"uint256"},{"internalType":"address","name":"_newOwner","type":"address"}],"name":"transferExpenditureViaArbitration","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_id","type":"uint256"}],"name":"cancelExpenditure","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_id","type":"uint256"}],"name":"lockExpenditure","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_id","type":"uint256"}],"name":"finalizeExpenditure","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_permissionDomainId","type":"uint256"},{"internalType":"uint256","name":"_childSkillIndex","type":"uint256"},{"internalType":"uint256","name":"_id","type":"uint256"},{"internalType":"string","name":"_metadata","type":"string"}],"name":"setExpenditureMetadata","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_id","type":"uint256"},{"internalType":"string","name":"_metadata","type":"string"}],"name":"setExpenditureMetadata","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_id","type":"uint256"},{"internalType":"uint256","name":"_slot","type":"uint256"},{"internalType":"address payable","name":"_recipient","type":"address"}],"name":"setExpenditureRecipient","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_id","type":"uint256"},{"internalType":"uint256[]","name":"_slots","type":"uint256[]"},{"internalType":"address payable[]","name":"_recipients","type":"address[]"}],"name":"setExpenditureRecipients","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_id","type":"uint256"},{"internalType":"uint256[]","name":"_slots","type":"uint256[]"},{"internalType":"address","name":"_token","type":"address"},{"internalType":"uint256[]","name":"_amounts","type":"uint256[]"}],"name":"setExpenditurePayouts","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_id","type":"uint256"},{"internalType":"uint256","name":"_slot","type":"uint256"},{"internalType":"address","name":"_token","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"setExpenditurePayout","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_permissionDomainId","type":"uint256"},{"internalType":"uint256","name":"_childSkillIndex","type":"uint256"},{"internalType":"uint256","name":"_id","type":"uint256"},{"internalType":"uint256","name":"_slot","type":"uint256"},{"internalType":"address","name":"_token","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"setExpenditurePayout","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_id","type":"uint256"},{"internalType":"uint256","name":"_slot","type":"uint256"},{"internalType":"uint256","name":"_skillId","type":"uint256"}],"name":"setExpenditureSkill","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_id","type":"uint256"},{"internalType":"uint256[]","name":"_slots","type":"uint256[]"},{"internalType":"uint256[]","name":"_skillIds","type":"uint256[]"}],"name":"setExpenditureSkills","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_id","type":"uint256"},{"internalType":"uint256","name":"_slot","type":"uint256"},{"internalType":"uint256","name":"_claimDelay","type":"uint256"}],"name":"setExpenditureClaimDelay","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_id","type":"uint256"},{"internalType":"uint256[]","name":"_slots","type":"uint256[]"},{"internalType":"uint256[]","name":"_claimDelays","type":"uint256[]"}],"name":"setExpenditureClaimDelays","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_id","type":"uint256"},{"internalType":"uint256[]","name":"_slots","type":"uint256[]"},{"internalType":"int256[]","name":"_payoutModifiers","type":"int256[]"}],"name":"setExpenditurePayoutModifiers","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_permissionDomainId","type":"uint256"},{"internalType":"uint256","name":"_childSkillIndex","type":"uint256"},{"internalType":"uint256","name":"_id","type":"uint256"},{"internalType":"uint256","name":"_storageSlot","type":"uint256"},{"internalType":"bool[]","name":"_mask","type":"bool[]"},{"internalType":"bytes32[]","name":"_keys","type":"bytes32[]"},{"internalType":"bytes32","name":"_value","type":"bytes32"}],"name":"setExpenditureState","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_id","type":"uint256"},{"internalType":"uint256","name":"_slot","type":"uint256"},{"internalType":"address","name":"_token","type":"address"}],"name":"claimExpenditurePayout","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"getExpenditureCount","outputs":[{"internalType":"uint256","name":"count","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_id","type":"uint256"}],"name":"getExpenditure","outputs":[{"components":[{"internalType":"enum ColonyDataTypes.ExpenditureStatus","name":"status","type":"uint8"},{"internalType":"address","name":"owner","type":"address"},{"internalType":"uint256","name":"fundingPotId","type":"uint256"},{"internalType":"uint256","name":"domainId","type":"uint256"},{"internalType":"uint256","name":"finalizedTimestamp","type":"uint256"},{"internalType":"uint256","name":"globalClaimDelay","type":"uint256"}],"internalType":"struct ColonyDataTypes.Expenditure","name":"expenditure","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_id","type":"uint256"},{"internalType":"uint256","name":"_slot","type":"uint256"}],"name":"getExpenditureSlot","outputs":[{"components":[{"internalType":"address payable","name":"recipient","type":"address"},{"internalType":"uint256","name":"claimDelay","type":"uint256"},{"internalType":"int256","name":"payoutModifier","type":"int256"},{"internalType":"uint256[]","name":"skills","type":"uint256[]"}],"internalType":"struct ColonyDataTypes.ExpenditureSlot","name":"expenditureSlot","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_id","type":"uint256"},{"internalType":"uint256","name":"_slot","type":"uint256"},{"internalType":"address","name":"_token","type":"address"}],"name":"getExpenditureSlotPayout","outputs":[{"internalType":"uint256","name":"amount","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_permissionDomainId","type":"uint256"},{"internalType":"uint256","name":"_childSkillIndex","type":"uint256"},{"internalType":"address payable","name":"_recipient","type":"address"},{"internalType":"address","name":"_token","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"},{"internalType":"uint256","name":"_domainId","type":"uint256"},{"internalType":"uint256","name":"_skillId","type":"uint256"}],"name":"addPayment","outputs":[{"internalType":"uint256","name":"paymentId","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_permissionDomainId","type":"uint256"},{"internalType":"uint256","name":"_childSkillIndex","type":"uint256"},{"internalType":"uint256","name":"_id","type":"uint256"}],"name":"finalizePayment","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_permissionDomainId","type":"uint256"},{"internalType":"uint256","name":"_childSkillIndex","type":"uint256"},{"internalType":"uint256","name":"_id","type":"uint256"},{"internalType":"address payable","name":"_recipient","type":"address"}],"name":"setPaymentRecipient","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_permissionDomainId","type":"uint256"},{"internalType":"uint256","name":"_childSkillIndex","type":"uint256"},{"internalType":"uint256","name":"_id","type":"uint256"},{"internalType":"uint256","name":"_skillId","type":"uint256"}],"name":"setPaymentSkill","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_permissionDomainId","type":"uint256"},{"internalType":"uint256","name":"_childSkillIndex","type":"uint256"},{"internalType":"uint256","name":"_id","type":"uint256"},{"internalType":"address","name":"_token","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"setPaymentPayout","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_id","type":"uint256"}],"name":"getPayment","outputs":[{"components":[{"internalType":"address payable","name":"recipient","type":"address"},{"internalType":"bool","name":"finalized","type":"bool"},{"internalType":"uint256","name":"fundingPotId","type":"uint256"},{"internalType":"uint256","name":"domainId","type":"uint256"},{"internalType":"uint256[]","name":"skills","type":"uint256[]"}],"internalType":"struct ColonyDataTypes.Payment","name":"payment","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_id","type":"uint256"},{"internalType":"address","name":"_token","type":"address"}],"name":"claimPayment","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"getPaymentCount","outputs":[{"internalType":"uint256","name":"count","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_permissionDomainId","type":"uint256"},{"internalType":"uint256","name":"_childSkillIndex","type":"uint256"},{"internalType":"bytes32","name":"_specificationHash","type":"bytes32"},{"internalType":"uint256","name":"_domainId","type":"uint256"},{"internalType":"uint256","name":"_skillId","type":"uint256"},{"internalType":"uint256","name":"_dueDate","type":"uint256"}],"name":"makeTask","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"getTaskCount","outputs":[{"internalType":"uint256","name":"count","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_id","type":"uint256"}],"name":"getTaskChangeNonce","outputs":[{"internalType":"uint256","name":"nonce","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint8[]","name":"_sigV","type":"uint8[]"},{"internalType":"bytes32[]","name":"_sigR","type":"bytes32[]"},{"internalType":"bytes32[]","name":"_sigS","type":"bytes32[]"},{"internalType":"uint8[]","name":"_mode","type":"uint8[]"},{"internalType":"uint256","name":"_value","type":"uint256"},{"internalType":"bytes","name":"_data","type":"bytes"}],"name":"executeTaskChange","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint8[]","name":"_sigV","type":"uint8[]"},{"internalType":"bytes32[]","name":"_sigR","type":"bytes32[]"},{"internalType":"bytes32[]","name":"_sigS","type":"bytes32[]"},{"internalType":"uint8[]","name":"_mode","type":"uint8[]"},{"internalType":"uint256","name":"_value","type":"uint256"},{"internalType":"bytes","name":"_data","type":"bytes"}],"name":"executeTaskRoleAssignment","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_id","type":"uint256"},{"internalType":"uint8","name":"_role","type":"uint8"},{"internalType":"bytes32","name":"_ratingSecret","type":"bytes32"}],"name":"submitTaskWorkRating","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_id","type":"uint256"},{"internalType":"uint8","name":"_role","type":"uint8"},{"internalType":"uint8","name":"_rating","type":"uint8"},{"internalType":"bytes32","name":"_salt","type":"bytes32"}],"name":"revealTaskWorkRating","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"_salt","type":"bytes32"},{"internalType":"uint256","name":"_value","type":"uint256"}],"name":"generateSecret","outputs":[{"internalType":"bytes32","name":"secret","type":"bytes32"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"uint256","name":"_id","type":"uint256"}],"name":"getTaskWorkRatingSecretsInfo","outputs":[{"internalType":"uint256","name":"nSecrets","type":"uint256"},{"internalType":"uint256","name":"lastSubmittedAt","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_id","type":"uint256"},{"internalType":"uint8","name":"_role","type":"uint8"}],"name":"getTaskWorkRatingSecret","outputs":[{"internalType":"bytes32","name":"secret","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_id","type":"uint256"},{"internalType":"address payable","name":"_user","type":"address"},{"internalType":"uint256","name":"_permissionDomainId","type":"uint256"},{"internalType":"uint256","name":"_childSkillIndex","type":"uint256"}],"name":"setTaskManagerRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_id","type":"uint256"},{"internalType":"address payable","name":"_user","type":"address"}],"name":"setTaskEvaluatorRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_id","type":"uint256"},{"internalType":"address payable","name":"_user","type":"address"}],"name":"setTaskWorkerRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_id","type":"uint256"}],"name":"removeTaskEvaluatorRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_id","type":"uint256"}],"name":"removeTaskWorkerRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_id","type":"uint256"},{"internalType":"uint256","name":"_skillId","type":"uint256"}],"name":"setTaskSkill","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_id","type":"uint256"},{"internalType":"bytes32","name":"_specificationHash","type":"bytes32"}],"name":"setTaskBrief","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_id","type":"uint256"},{"internalType":"uint256","name":"_dueDate","type":"uint256"}],"name":"setTaskDueDate","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_id","type":"uint256"},{"internalType":"bytes32","name":"_deliverableHash","type":"bytes32"}],"name":"submitTaskDeliverable","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_id","type":"uint256"},{"internalType":"bytes32","name":"_deliverableHash","type":"bytes32"},{"internalType":"bytes32","name":"_ratingSecret","type":"bytes32"}],"name":"submitTaskDeliverableAndRating","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_id","type":"uint256"}],"name":"finalizeTask","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_id","type":"uint256"}],"name":"cancelTask","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_id","type":"uint256"}],"name":"completeTask","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_id","type":"uint256"}],"name":"getTask","outputs":[{"internalType":"bytes32","name":"specificationHash","type":"bytes32"},{"internalType":"bytes32","name":"deliverableHash","type":"bytes32"},{"internalType":"enum ColonyDataTypes.TaskStatus","name":"status","type":"uint8"},{"internalType":"uint256","name":"dueDate","type":"uint256"},{"internalType":"uint256","name":"fundingPotId","type":"uint256"},{"internalType":"uint256","name":"completionTimestamp","type":"uint256"},{"internalType":"uint256","name":"domainId","type":"uint256"},{"internalType":"uint256[]","name":"skillIds","type":"uint256[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_id","type":"uint256"},{"internalType":"uint8","name":"_role","type":"uint8"}],"name":"getTaskRole","outputs":[{"components":[{"internalType":"address payable","name":"user","type":"address"},{"internalType":"bool","name":"rateFail","type":"bool"},{"internalType":"enum ColonyDataTypes.TaskRatings","name":"rating","type":"uint8"}],"internalType":"struct ColonyDataTypes.Role","name":"role","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_rewardInverse","type":"uint256"}],"name":"setRewardInverse","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"getRewardInverse","outputs":[{"internalType":"uint256","name":"rewardInverse","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_id","type":"uint256"},{"internalType":"uint8","name":"_role","type":"uint8"},{"internalType":"address","name":"_token","type":"address"}],"name":"getTaskPayout","outputs":[{"internalType":"uint256","name":"amount","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_id","type":"uint256"},{"internalType":"address","name":"_token","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"setTaskManagerPayout","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_id","type":"uint256"},{"internalType":"address","name":"_token","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"setTaskEvaluatorPayout","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_id","type":"uint256"},{"internalType":"address","name":"_token","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"setTaskWorkerPayout","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_id","type":"uint256"},{"internalType":"address","name":"_token","type":"address"},{"internalType":"uint256","name":"_managerAmount","type":"uint256"},{"internalType":"uint256","name":"_evaluatorAmount","type":"uint256"},{"internalType":"uint256","name":"_workerAmount","type":"uint256"}],"name":"setAllTaskPayouts","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_id","type":"uint256"},{"internalType":"uint8","name":"_role","type":"uint8"},{"internalType":"address","name":"_token","type":"address"}],"name":"claimTaskPayout","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_token","type":"address"},{"internalType":"bytes","name":"key","type":"bytes"},{"internalType":"bytes","name":"value","type":"bytes"},{"internalType":"uint256","name":"branchMask","type":"uint256"},{"internalType":"bytes32[]","name":"siblings","type":"bytes32[]"}],"name":"startNextRewardPayout","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_payoutId","type":"uint256"},{"internalType":"uint256[7]","name":"_squareRoots","type":"uint256[7]"},{"internalType":"bytes","name":"key","type":"bytes"},{"internalType":"bytes","name":"value","type":"bytes"},{"internalType":"uint256","name":"branchMask","type":"uint256"},{"internalType":"bytes32[]","name":"siblings","type":"bytes32[]"}],"name":"claimRewardPayout","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_payoutId","type":"uint256"}],"name":"getRewardPayoutInfo","outputs":[{"components":[{"internalType":"bytes32","name":"reputationState","type":"bytes32"},{"internalType":"uint256","name":"colonyWideReputation","type":"uint256"},{"internalType":"uint256","name":"totalTokens","type":"uint256"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"address","name":"tokenAddress","type":"address"},{"internalType":"uint256","name":"blockTimestamp","type":"uint256"},{"internalType":"uint256","name":"amountRemaining","type":"uint256"},{"internalType":"bool","name":"finalized","type":"bool"}],"internalType":"struct ColonyDataTypes.RewardPayoutCycle","name":"rewardPayoutCycle","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_payoutId","type":"uint256"}],"name":"finalizeRewardPayout","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_id","type":"uint256"}],"name":"getFundingPot","outputs":[{"internalType":"enum ColonyDataTypes.FundingPotAssociatedType","name":"associatedType","type":"uint8"},{"internalType":"uint256","name":"associatedTypeId","type":"uint256"},{"internalType":"uint256","name":"payoutsWeCannotMake","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getFundingPotCount","outputs":[{"internalType":"uint256","name":"count","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_potId","type":"uint256"},{"internalType":"address","name":"_token","type":"address"}],"name":"getFundingPotBalance","outputs":[{"internalType":"uint256","name":"balance","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_potId","type":"uint256"},{"internalType":"address","name":"_token","type":"address"}],"name":"getFundingPotPayout","outputs":[{"internalType":"uint256","name":"payout","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_permissionDomainId","type":"uint256"},{"internalType":"uint256","name":"_childSkillIndex","type":"uint256"},{"internalType":"uint256","name":"_domainId","type":"uint256"},{"internalType":"uint256","name":"_fromChildSkillIndex","type":"uint256"},{"internalType":"uint256","name":"_toChildSkillIndex","type":"uint256"},{"internalType":"uint256","name":"_fromPot","type":"uint256"},{"internalType":"uint256","name":"_toPot","type":"uint256"},{"internalType":"uint256","name":"_amount","type":"uint256"},{"internalType":"address","name":"_token","type":"address"}],"name":"moveFundsBetweenPots","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_permissionDomainId","type":"uint256"},{"internalType":"uint256","name":"_fromChildSkillIndex","type":"uint256"},{"internalType":"uint256","name":"_toChildSkillIndex","type":"uint256"},{"internalType":"uint256","name":"_fromPot","type":"uint256"},{"internalType":"uint256","name":"_toPot","type":"uint256"},{"internalType":"uint256","name":"_amount","type":"uint256"},{"internalType":"address","name":"_token","type":"address"}],"name":"moveFundsBetweenPots","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_token","type":"address"}],"name":"claimColonyFunds","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_token","type":"address"}],"name":"getNonRewardPotsTotal","outputs":[{"internalType":"uint256","name":"amount","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_approvee","type":"address"},{"internalType":"uint256","name":"_domainId","type":"uint256"},{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"approveStake","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_user","type":"address"},{"internalType":"uint256","name":"_domainId","type":"uint256"},{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"obligateStake","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_user","type":"address"},{"internalType":"uint256","name":"_domainId","type":"uint256"},{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"deobligateStake","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_permissionDomainId","type":"uint256"},{"internalType":"uint256","name":"_childSkillIndex","type":"uint256"},{"internalType":"address","name":"_obligator","type":"address"},{"internalType":"address","name":"_user","type":"address"},{"internalType":"uint256","name":"_domainId","type":"uint256"},{"internalType":"uint256","name":"_amount","type":"uint256"},{"internalType":"address","name":"_recipient","type":"address"}],"name":"transferStake","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_user","type":"address"},{"internalType":"address","name":"_obligator","type":"address"},{"internalType":"uint256","name":"_domainId","type":"uint256"}],"name":"getApproval","outputs":[{"internalType":"uint256","name":"approval","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_user","type":"address"},{"internalType":"address","name":"_obligator","type":"address"},{"internalType":"uint256","name":"_domainId","type":"uint256"}],"name":"getObligation","outputs":[{"internalType":"uint256","name":"obligation","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_fundingPotId","type":"uint256"}],"name":"getDomainFromFundingPot","outputs":[{"internalType":"uint256","name":"domainId","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"token","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"burnTokens","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"unlockToken","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"token","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"updateApprovalAmount","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"token","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"getTokenApproval","outputs":[{"internalType":"uint256","name":"amount","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"token","type":"address"}],"name":"getTotalTokenApproval","outputs":[{"internalType":"uint256","name":"amount","type":"uint256"}],"stateMutability":"view","type":"function"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"domainId","type":"uint256"}],"name":"DomainAdded","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"name":"oldVersion","type":"uint256"},{"indexed":false,"name":"newVersion","type":"uint256"}],"name":"ColonyUpgraded","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"user","type":"address"},{"indexed":true,"name":"domainId","type":"uint256"},{"indexed":true,"name":"role","type":"uint8"},{"indexed":false,"name":"setTo","type":"bool"}],"name":"ColonyRoleSet","type":"event"},{"anonymous":false,"inputs":[],"name":"TokenUnlocked","type":"event"}],"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"agent\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"txHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"}],\"name\":\"Annotation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"agent\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"skillId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"amount\",\"type\":\"int256\"}],\"name\":\"ArbitraryReputationUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"name\":\"ArbitraryTransaction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"agent\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"users\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"int256[]\",\"name\":\"amounts\",\"type\":\"int256[]\"}],\"name\":\"ColonyBootstrapped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"agent\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"payoutRemainder\",\"type\":\"uint256\"}],\"name\":\"ColonyFundsClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"agent\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"fromPot\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"toPot\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"ColonyFundsMovedBetweenFundingPots\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"agent\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"colonyNetwork\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"ColonyInitialised\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"agent\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"}],\"name\":\"ColonyMetadata\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"agent\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"}],\"name\":\"ColonyMetadataDelta\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"agent\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardInverse\",\"type\":\"uint256\"}],\"name\":\"ColonyRewardInverseSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"agent\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"domainId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"role\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"setTo\",\"type\":\"bool\"}],\"name\":\"ColonyRoleSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"agent\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldVersion\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newVersion\",\"type\":\"uint256\"}],\"name\":\"ColonyUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"agent\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"domainId\",\"type\":\"uint256\"}],\"name\":\"DomainAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"agent\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"domainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"deprecated\",\"type\":\"bool\"}],\"name\":\"DomainDeprecated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"agent\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"domainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"}],\"name\":\"DomainMetadata\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"agent\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"expenditureId\",\"type\":\"uint256\"}],\"name\":\"ExpenditureAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"agent\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"expenditureId\",\"type\":\"uint256\"}],\"name\":\"ExpenditureCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"agent\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"expenditureId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"slot\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"claimDelay\",\"type\":\"uint256\"}],\"name\":\"ExpenditureClaimDelaySet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"agent\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"expenditureId\",\"type\":\"uint256\"}],\"name\":\"ExpenditureFinalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"agent\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"globalClaimDelay\",\"type\":\"uint256\"}],\"name\":\"ExpenditureGlobalClaimDelaySet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"agent\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"expenditureId\",\"type\":\"uint256\"}],\"name\":\"ExpenditureLocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"agent\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"expenditureId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"}],\"name\":\"ExpenditureMetadataSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"agent\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"expenditureId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"slot\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"payoutModifier\",\"type\":\"int256\"}],\"name\":\"ExpenditurePayoutModifierSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"agent\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"expenditureId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"slot\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ExpenditurePayoutSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"agent\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"expenditureId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"slot\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"ExpenditureRecipientSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"agent\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"expenditureId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"slot\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"skillId\",\"type\":\"uint256\"}],\"name\":\"ExpenditureSkillSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"agent\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"expenditureId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"storageSlot\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool[]\",\"name\":\"mask\",\"type\":\"bool[]\"},{\"indexed\":false,\"internalType\":\"bytes32[]\",\"name\":\"keys\",\"type\":\"bytes32[]\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"value\",\"type\":\"bytes32\"}],\"name\":\"ExpenditureStateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"agent\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"expenditureId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ExpenditureTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fundingPotId\",\"type\":\"uint256\"}],\"name\":\"FundingPotAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"agent\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"localSkillId\",\"type\":\"uint256\"}],\"name\":\"LocalSkillAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"agent\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"localSkillId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"deprecated\",\"type\":\"bool\"}],\"name\":\"LocalSkillDeprecated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address payable\",\"name\":\"relayerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"}],\"name\":\"MetaTransactionExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"agent\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"paymentId\",\"type\":\"uint256\"}],\"name\":\"PaymentAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"agent\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"paymentId\",\"type\":\"uint256\"}],\"name\":\"PaymentFinalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"agent\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"paymentId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PaymentPayoutSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"agent\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"paymentId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"PaymentRecipientSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"agent\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"paymentId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"skillId\",\"type\":\"uint256\"}],\"name\":\"PaymentSkillSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"agent\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"fundingPotId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PayoutClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"RecoveryModeEntered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"RecoveryModeExitApproved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"RecoveryModeExited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"setTo\",\"type\":\"bool\"}],\"name\":\"RecoveryRoleSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"slot\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"fromValue\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"toValue\",\"type\":\"bytes32\"}],\"name\":\"RecoveryStorageSlotSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardPayoutId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardRemainder\",\"type\":\"uint256\"}],\"name\":\"RewardPayoutClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"agent\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardPayoutId\",\"type\":\"uint256\"}],\"name\":\"RewardPayoutCycleEnded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"agent\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardPayoutId\",\"type\":\"uint256\"}],\"name\":\"RewardPayoutCycleStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"agent\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"taskId\",\"type\":\"uint256\"}],\"name\":\"TaskAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"taskId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"specificationHash\",\"type\":\"bytes32\"}],\"name\":\"TaskBriefSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"taskId\",\"type\":\"uint256\"}],\"name\":\"TaskCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"reviewerAddresses\",\"type\":\"address[]\"}],\"name\":\"TaskChangedViaSignatures\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"agent\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"taskId\",\"type\":\"uint256\"}],\"name\":\"TaskCompleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"agent\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"taskId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"deliverableHash\",\"type\":\"bytes32\"}],\"name\":\"TaskDeliverableSubmitted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"taskId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dueDate\",\"type\":\"uint256\"}],\"name\":\"TaskDueDateSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"agent\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"taskId\",\"type\":\"uint256\"}],\"name\":\"TaskFinalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"taskId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum ColonyDataTypes.TaskRole\",\"name\":\"role\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TaskPayoutSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"taskId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum ColonyDataTypes.TaskRole\",\"name\":\"role\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"TaskRoleUserSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"taskId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"skillId\",\"type\":\"uint256\"}],\"name\":\"TaskSkillSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"agent\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"taskId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum ColonyDataTypes.TaskRole\",\"name\":\"role\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"rating\",\"type\":\"uint8\"}],\"name\":\"TaskWorkRatingRevealed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"agent\",\"type\":\"address\"}],\"name\":\"TokenUnlocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"agent\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensBurned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"agent\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensMinted\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_permissionDomainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_childSkillIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_parentDomainId\",\"type\":\"uint256\"}],\"name\":\"addDomain\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_permissionDomainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_childSkillIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_parentDomainId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_metadata\",\"type\":\"string\"}],\"name\":\"addDomain\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addLocalSkill\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_permissionDomainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_childSkillIndex\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_domainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_skillId\",\"type\":\"uint256\"}],\"name\":\"addPayment\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"paymentId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_txHash\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"_metadata\",\"type\":\"string\"}],\"name\":\"annotateTransaction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"approveExitRecovery\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_approvee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_domainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approveStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"authority\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"colonyAuthority\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_users\",\"type\":\"address[]\"},{\"internalType\":\"int256[]\",\"name\":\"_amount\",\"type\":\"int256[]\"}],\"name\":\"bootstrapColony\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"cancelExpenditure\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"cancelTask\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_slot\",\"type\":\"uint256\"}],\"name\":\"checkNotAdditionalProtectedVariable\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"claimColonyFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_slot\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"claimExpenditurePayout\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"claimPayment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_payoutId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[7]\",\"name\":\"_squareRoots\",\"type\":\"uint256[7]\"},{\"internalType\":\"bytes\",\"name\":\"key\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"value\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"branchMask\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"siblings\",\"type\":\"bytes32[]\"}],\"name\":\"claimRewardPayout\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_role\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"claimTaskPayout\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"completeTask\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_domainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deobligateStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_permissionDomainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_childSkillIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_domainId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_deprecated\",\"type\":\"bool\"}],\"name\":\"deprecateDomain\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"extensionId\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"deprecated\",\"type\":\"bool\"}],\"name\":\"deprecateExtension\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"localSkillId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"deprecated\",\"type\":\"bool\"}],\"name\":\"deprecateLocalSkill\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_metadata\",\"type\":\"string\"}],\"name\":\"editColony\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_metadataDelta\",\"type\":\"string\"}],\"name\":\"editColonyByDelta\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_permissionDomainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_childSkillIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_domainId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_metadata\",\"type\":\"string\"}],\"name\":\"editDomain\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_permissionDomainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_childSkillIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_domainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"_amount\",\"type\":\"int256\"}],\"name\":\"emitDomainReputationPenalty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_domainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"_amount\",\"type\":\"int256\"}],\"name\":\"emitDomainReputationReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_skillId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"_amount\",\"type\":\"int256\"}],\"name\":\"emitSkillReputationPenalty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_skillId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"_amount\",\"type\":\"int256\"}],\"name\":\"emitSkillReputationReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enterRecoveryMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"sigR\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"sigS\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"sigV\",\"type\":\"uint8\"}],\"name\":\"executeMetaTransaction\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8[]\",\"name\":\"_sigV\",\"type\":\"uint8[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"_sigR\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"_sigS\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint8[]\",\"name\":\"_mode\",\"type\":\"uint8[]\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"executeTaskChange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8[]\",\"name\":\"_sigV\",\"type\":\"uint8[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"_sigR\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"_sigS\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint8[]\",\"name\":\"_mode\",\"type\":\"uint8[]\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"executeTaskRoleAssignment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exitRecoveryMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"finalizeExpenditure\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_permissionDomainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_childSkillIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"finalizePayment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_payoutId\",\"type\":\"uint256\"}],\"name\":\"finalizeRewardPayout\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"finalizeTask\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finishUpgrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_salt\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"generateSecret\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"secret\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_obligator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_domainId\",\"type\":\"uint256\"}],\"name\":\"getApproval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"approval\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"_sig\",\"type\":\"bytes4\"}],\"name\":\"getCapabilityRoles\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"roles\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getColonyNetwork\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"colonyNetwork\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getDomain\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"skillId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fundingPotId\",\"type\":\"uint256\"}],\"internalType\":\"struct ColonyDataTypes.Domain\",\"name\":\"domain\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDomainCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fundingPotId\",\"type\":\"uint256\"}],\"name\":\"getDomainFromFundingPot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"domainId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getExpenditure\",\"outputs\":[{\"components\":[{\"internalType\":\"enum ColonyDataTypes.ExpenditureStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fundingPotId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"domainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"finalizedTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"globalClaimDelay\",\"type\":\"uint256\"}],\"internalType\":\"struct ColonyDataTypes.Expenditure\",\"name\":\"expenditure\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getExpenditureCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_slot\",\"type\":\"uint256\"}],\"name\":\"getExpenditureSlot\",\"outputs\":[{\"components\":[{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"claimDelay\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"payoutModifier\",\"type\":\"int256\"},{\"internalType\":\"uint256[]\",\"name\":\"skills\",\"type\":\"uint256[]\"}],\"internalType\":\"struct ColonyDataTypes.ExpenditureSlot\",\"name\":\"expenditureSlot\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_slot\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getExpenditureSlotPayout\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getFundingPot\",\"outputs\":[{\"internalType\":\"enum ColonyDataTypes.FundingPotAssociatedType\",\"name\":\"associatedType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"associatedTypeId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payoutsWeCannotMake\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_potId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getFundingPotBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFundingPotCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_potId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getFundingPotPayout\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"payout\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getMetatransactionNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getNonRewardPotsTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_obligator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_domainId\",\"type\":\"uint256\"}],\"name\":\"getObligation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"obligation\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getPayment\",\"outputs\":[{\"components\":[{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"finalized\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"fundingPotId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"domainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"skills\",\"type\":\"uint256[]\"}],\"internalType\":\"struct ColonyDataTypes.Payment\",\"name\":\"payment\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPaymentCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRewardInverse\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rewardInverse\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_payoutId\",\"type\":\"uint256\"}],\"name\":\"getRewardPayoutInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"reputationState\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"colonyWideReputation\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"blockTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountRemaining\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"finalized\",\"type\":\"bool\"}],\"internalType\":\"struct ColonyDataTypes.RewardPayoutCycle\",\"name\":\"rewardPayoutCycle\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRootLocalSkill\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rootLocalSkill\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getTask\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"specificationHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"deliverableHash\",\"type\":\"bytes32\"},{\"internalType\":\"enum ColonyDataTypes.TaskStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"dueDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fundingPotId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"completionTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"domainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"skillIds\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getTaskChangeNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTaskCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_role\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getTaskPayout\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_role\",\"type\":\"uint8\"}],\"name\":\"getTaskRole\",\"outputs\":[{\"components\":[{\"internalType\":\"address payable\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"rateFail\",\"type\":\"bool\"},{\"internalType\":\"enum ColonyDataTypes.TaskRatings\",\"name\":\"rating\",\"type\":\"uint8\"}],\"internalType\":\"struct ColonyDataTypes.Role\",\"name\":\"role\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_role\",\"type\":\"uint8\"}],\"name\":\"getTaskWorkRatingSecret\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"secret\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getTaskWorkRatingSecretsInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"nSecrets\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastSubmittedAt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"getTokenApproval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getTotalTokenApproval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_domain\",\"type\":\"uint256\"}],\"name\":\"getUserRoles\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"roles\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_domainId\",\"type\":\"uint256\"},{\"internalType\":\"enum ColonyDataTypes.ColonyRole\",\"name\":\"_role\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_childSkillIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_childDomainId\",\"type\":\"uint256\"}],\"name\":\"hasInheritedUserRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"hasRole\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_domainId\",\"type\":\"uint256\"},{\"internalType\":\"enum ColonyDataTypes.ColonyRole\",\"name\":\"_role\",\"type\":\"uint8\"}],\"name\":\"hasUserRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"hasRole\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_colonyNetworkAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"initialiseColony\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialiseRootLocalSkill\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"extensionId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"}],\"name\":\"installExtension\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isInRecoveryMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"inRecoveryMode\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"lockExpenditure\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"timesLocked\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_action\",\"type\":\"bytes\"}],\"name\":\"makeArbitraryTransaction\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_targets\",\"type\":\"address[]\"},{\"internalType\":\"bytes[]\",\"name\":\"_actions\",\"type\":\"bytes[]\"},{\"internalType\":\"bool\",\"name\":\"_strict\",\"type\":\"bool\"}],\"name\":\"makeArbitraryTransactions\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_permissionDomainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_childSkillIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_domainId\",\"type\":\"uint256\"}],\"name\":\"makeExpenditure\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"expenditureId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_action\",\"type\":\"bytes\"}],\"name\":\"makeSingleArbitraryTransaction\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_permissionDomainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_childSkillIndex\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_specificationHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_domainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_skillId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_dueDate\",\"type\":\"uint256\"}],\"name\":\"makeTask\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_wad\",\"type\":\"uint256\"}],\"name\":\"mintTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_guy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_wad\",\"type\":\"uint256\"}],\"name\":\"mintTokensFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_permissionDomainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_childSkillIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_domainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_fromChildSkillIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_toChildSkillIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_fromPot\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_toPot\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"moveFundsBetweenPots\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_permissionDomainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_fromChildSkillIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_toChildSkillIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_fromPot\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_toPot\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"moveFundsBetweenPots\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"multicall\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"results\",\"type\":\"bytes[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numRecoveryRoles\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"numRoles\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_domainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"obligateStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"colonyOwner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"colonyName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"orbitdb\",\"type\":\"string\"}],\"name\":\"registerColonyLabel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"removeRecoveryRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"removeTaskEvaluatorRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"removeTaskWorkerRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_role\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_rating\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"_salt\",\"type\":\"bytes32\"}],\"name\":\"revealTaskWorkRating\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_permissionDomainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_childSkillIndex\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_domainId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_setTo\",\"type\":\"bool\"}],\"name\":\"setAdministrationRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_managerAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_evaluatorAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_workerAmount\",\"type\":\"uint256\"}],\"name\":\"setAllTaskPayouts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_permissionDomainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_childSkillIndex\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_domainId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_setTo\",\"type\":\"bool\"}],\"name\":\"setArbitrationRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_permissionDomainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_childSkillIndex\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_domainId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_setTo\",\"type\":\"bool\"}],\"name\":\"setArchitectureRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_globalClaimDelay\",\"type\":\"uint256\"}],\"name\":\"setDefaultGlobalClaimDelay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_slot\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_claimDelay\",\"type\":\"uint256\"}],\"name\":\"setExpenditureClaimDelay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_slots\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_claimDelays\",\"type\":\"uint256[]\"}],\"name\":\"setExpenditureClaimDelays\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_permissionDomainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_childSkillIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_metadata\",\"type\":\"string\"}],\"name\":\"setExpenditureMetadata\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_metadata\",\"type\":\"string\"}],\"name\":\"setExpenditureMetadata\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_slot\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setExpenditurePayout\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_permissionDomainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_childSkillIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_slot\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setExpenditurePayout\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_slots\",\"type\":\"uint256[]\"},{\"internalType\":\"int256[]\",\"name\":\"_payoutModifiers\",\"type\":\"int256[]\"}],\"name\":\"setExpenditurePayoutModifiers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_slots\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"setExpenditurePayouts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_slot\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"setExpenditureRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_slots\",\"type\":\"uint256[]\"},{\"internalType\":\"address payable[]\",\"name\":\"_recipients\",\"type\":\"address[]\"}],\"name\":\"setExpenditureRecipients\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_slot\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_skillId\",\"type\":\"uint256\"}],\"name\":\"setExpenditureSkill\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_slots\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_skillIds\",\"type\":\"uint256[]\"}],\"name\":\"setExpenditureSkills\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_permissionDomainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_childSkillIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_storageSlot\",\"type\":\"uint256\"},{\"internalType\":\"bool[]\",\"name\":\"_mask\",\"type\":\"bool[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"_keys\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32\",\"name\":\"_value\",\"type\":\"bytes32\"}],\"name\":\"setExpenditureState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_recipientSlots\",\"type\":\"uint256[]\"},{\"internalType\":\"address payable[]\",\"name\":\"_recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_skillIdSlots\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_skillIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_claimDelaySlots\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_claimDelays\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_payoutModifierSlots\",\"type\":\"uint256[]\"},{\"internalType\":\"int256[]\",\"name\":\"_payoutModifiers\",\"type\":\"int256[]\"},{\"internalType\":\"address[]\",\"name\":\"_payoutTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[][]\",\"name\":\"_payoutSlots\",\"type\":\"uint256[][]\"},{\"internalType\":\"uint256[][]\",\"name\":\"_payoutValues\",\"type\":\"uint256[][]\"}],\"name\":\"setExpenditureValues\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_permissionDomainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_childSkillIndex\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_domainId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_setTo\",\"type\":\"bool\"}],\"name\":\"setFundingRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_permissionDomainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_childSkillIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setPaymentPayout\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_permissionDomainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_childSkillIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"setPaymentRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_permissionDomainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_childSkillIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_skillId\",\"type\":\"uint256\"}],\"name\":\"setPaymentSkill\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"setRecoveryRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rewardInverse\",\"type\":\"uint256\"}],\"name\":\"setRewardInverse\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_setTo\",\"type\":\"bool\"}],\"name\":\"setRootRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_slot\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_value\",\"type\":\"bytes32\"}],\"name\":\"setStorageSlotRecovery\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_specificationHash\",\"type\":\"bytes32\"}],\"name\":\"setTaskBrief\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_dueDate\",\"type\":\"uint256\"}],\"name\":\"setTaskDueDate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setTaskEvaluatorPayout\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"setTaskEvaluatorRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setTaskManagerPayout\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_permissionDomainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_childSkillIndex\",\"type\":\"uint256\"}],\"name\":\"setTaskManagerRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_skillId\",\"type\":\"uint256\"}],\"name\":\"setTaskSkill\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setTaskWorkerPayout\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"setTaskWorkerRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_permissionDomainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_childSkillIndex\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_domainId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_roles\",\"type\":\"bytes32\"}],\"name\":\"setUserRoles\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"key\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"value\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"branchMask\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"siblings\",\"type\":\"bytes32[]\"}],\"name\":\"startNextRewardPayout\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_deliverableHash\",\"type\":\"bytes32\"}],\"name\":\"submitTaskDeliverable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_deliverableHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_ratingSecret\",\"type\":\"bytes32\"}],\"name\":\"submitTaskDeliverableAndRating\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_role\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"_ratingSecret\",\"type\":\"bytes32\"}],\"name\":\"submitTaskWorkRating\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferExpenditure\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_permissionDomainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_childSkillIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferExpenditureViaArbitration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_permissionDomainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_childSkillIndex\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_obligator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_domainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"transferStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"extensionId\",\"type\":\"bytes32\"}],\"name\":\"uninstallExtension\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlockToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lockId\",\"type\":\"uint256\"}],\"name\":\"unlockTokenForUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"updateApprovalAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"orbitdb\",\"type\":\"string\"}],\"name\":\"updateColonyOrbitDB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newVersion\",\"type\":\"uint256\"}],\"name\":\"upgrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"extensionId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"newVersion\",\"type\":\"uint256\"}],\"name\":\"upgradeExtension\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_domainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_childSkillIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_childDomainId\",\"type\":\"uint256\"}],\"name\":\"userCanSetRoles\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"canSet\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"key\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"value\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"branchMask\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"siblings\",\"type\":\"bytes32[]\"}],\"name\":\"verifyReputationProof\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isValid\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"colonyVersion\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Annotation(address,bytes32,string)\":{\"params\":{\"agent\":\"Agent emitting the annotation\",\"metadata\":\"IPFS hash of the metadata\",\"txHash\":\"Hash of transaction being annotated (0x0 for current tx)\"}},\"ArbitraryReputationUpdate(address,address,uint256,int256)\":{\"params\":{\"agent\":\"The address that is responsible for triggering this event\",\"amount\":\"The (maximum) amount the address is having its reputation changed by\",\"skillId\":\"The id of the skill the user is having their reputation changed in\",\"user\":\"The address that is having its reputation changed\"}},\"ColonyBootstrapped(address,address[],int256[])\":{\"params\":{\"agent\":\"The address that is responsible for triggering this event\",\"amounts\":\"Amounts of reputation/tokens for every address\",\"users\":\"Array of address bootstraped with reputation\"}},\"ColonyFundsClaimed(address,address,uint256,uint256)\":{\"params\":{\"agent\":\"The address that is responsible for triggering this event\",\"fee\":\"The fee deducted for rewards\",\"payoutRemainder\":\"The remaining funds moved to the top-level domain pot\",\"token\":\"The token address\"}},\"ColonyFundsMovedBetweenFundingPots(address,uint256,uint256,uint256,address)\":{\"params\":{\"agent\":\"The address that is responsible for triggering this event\",\"amount\":\"The amount that was transferred\",\"fromPot\":\"The source funding pot\",\"toPot\":\"The targer funding pot\",\"token\":\"The token address being transferred\"}},\"ColonyInitialised(address,address,address)\":{\"params\":{\"agent\":\"The address that is responsible for triggering this event\",\"colonyNetwork\":\"The Colony Network address\",\"token\":\"The Colony Token address\"}},\"ColonyMetadata(address,string)\":{\"params\":{\"agent\":\"The address that is responsible for triggering this event\",\"metadata\":\"IPFS hash of the metadata\"}},\"ColonyMetadataDelta(address,string)\":{\"params\":{\"agent\":\"The address that is responsible for triggering this event\",\"metadata\":\"IPFS hash of the delta\"}},\"ColonyRewardInverseSet(address,uint256)\":{\"params\":{\"agent\":\"The address that is responsible for triggering this event\",\"rewardInverse\":\"The reward inverse value\"}},\"ColonyRoleSet(address,address,uint256,uint8,bool)\":{\"params\":{\"agent\":\"The address that is responsible for triggering this event\",\"domainId\":\"The domainId of the role\",\"role\":\"The role being granted/revoked\",\"setTo\":\"A boolean representing the action -- granted (`true`) or revoked (`false`)\",\"user\":\"The address of the user being affected\"}},\"ColonyUpgraded(address,uint256,uint256)\":{\"params\":{\"agent\":\"The address that is responsible for triggering this event\",\"newVersion\":\"The new colony version upgraded to\",\"oldVersion\":\"The previous colony version\"}},\"DomainAdded(address,uint256)\":{\"params\":{\"agent\":\"The address that is responsible for triggering this event\",\"domainId\":\"Id of the newly-created Domain\"}},\"DomainDeprecated(address,uint256,bool)\":{\"params\":{\"agent\":\"The address that is responsible for triggering this event\",\"deprecated\":\"Whether or not the domain is deprecated\",\"domainId\":\"Id of the domain\"}},\"DomainMetadata(address,uint256,string)\":{\"params\":{\"agent\":\"The address that is responsible for triggering this event\",\"domainId\":\"Id of the newly-created Domain\",\"metadata\":\"IPFS hash of the metadata\"}},\"ExpenditureAdded(address,uint256)\":{\"params\":{\"agent\":\"The address that is responsible for triggering this event\",\"expenditureId\":\"The newly added expenditure id\"}},\"ExpenditureCancelled(address,uint256)\":{\"params\":{\"agent\":\"The address that is responsible for triggering this event\",\"expenditureId\":\"Id of the cancelled expenditure\"}},\"ExpenditureClaimDelaySet(address,uint256,uint256,uint256)\":{\"params\":{\"agent\":\"The address that is responsible for triggering this event\",\"claimDelay\":\"Additional amount of time to hold the funds\",\"expenditureId\":\"Id of the expenditure\",\"slot\":\"Expenditure slot being changed\"}},\"ExpenditureFinalized(address,uint256)\":{\"params\":{\"agent\":\"The address that is responsible for triggering this event\",\"expenditureId\":\"Id of the finalized expenditure\"}},\"ExpenditureGlobalClaimDelaySet(address,uint256)\":{\"params\":{\"agent\":\"The address that is responsible for triggering this event\",\"globalClaimDelay\":\"The new default global claim delay\"}},\"ExpenditureLocked(address,uint256)\":{\"params\":{\"agent\":\"The address that is responsible for triggering this event\",\"expenditureId\":\"Id of the locked expenditure\"}},\"ExpenditureMetadataSet(address,uint256,string)\":{\"params\":{\"agent\":\"The address that is responsible for triggering this event\",\"expenditureId\":\"Id of the expenditure\",\"metadata\":\"IPFS hash of the metadata\"}},\"ExpenditurePayoutModifierSet(address,uint256,uint256,int256)\":{\"params\":{\"agent\":\"The address that is responsible for triggering this event\",\"expenditureId\":\"Id of the expenditure\",\"payoutModifier\":\"The payout modifier for the slot\",\"slot\":\"Expenditure slot being changed\"}},\"ExpenditurePayoutSet(address,uint256,uint256,address,uint256)\":{\"params\":{\"agent\":\"The address that is responsible for triggering this event\",\"amount\":\"Amount of the payout funding\",\"expenditureId\":\"Id of the expenditure\",\"slot\":\"Expenditure slot of the payout being changed\",\"token\":\"Token of the payout funding\"}},\"ExpenditureRecipientSet(address,uint256,uint256,address)\":{\"params\":{\"agent\":\"The address that is responsible for triggering this event\",\"expenditureId\":\"Id of the expenditure\",\"recipient\":\"Address of the recipient\",\"slot\":\"Expenditure slot of the recipient\"}},\"ExpenditureSkillSet(address,uint256,uint256,uint256)\":{\"params\":{\"agent\":\"The address that is responsible for triggering this event\",\"expenditureId\":\"Id of the expenditure\",\"skillId\":\"Id of the set skill\",\"slot\":\"Slot receiving the skill\"}},\"ExpenditureStateChanged(address,uint256,uint256,bool[],bytes32[],bytes32)\":{\"params\":{\"agent\":\"The address that is responsible for triggering this event\",\"expenditureId\":\"Id of the expenditure\",\"keys\":\"Values used to construct final slot via mapping or array operations\",\"mask\":\"Mask indicating whether we are making mapping or array operations\",\"storageSlot\":\"Initial storage slot being set (expenditures or expenditureSlots)\",\"value\":\"Value being set in the slot\"}},\"ExpenditureTransferred(address,uint256,address)\":{\"params\":{\"agent\":\"The address that is responsible for triggering this event\",\"expenditureId\":\"The expenditure id\",\"owner\":\"The new owner of the expenditure\"}},\"FundingPotAdded(uint256)\":{\"params\":{\"fundingPotId\":\"Id of the newly-created FundingPot\"}},\"LocalSkillAdded(address,uint256)\":{\"params\":{\"agent\":\"The address that is responsible for triggering this event\",\"localSkillId\":\"Id of the newly-created local skill\"}},\"LocalSkillDeprecated(address,uint256,bool)\":{\"params\":{\"agent\":\"The address that is responsible for triggering this event\",\"deprecated\":\"Deprecation status of the local skill\",\"localSkillId\":\"Id of the newly-created local skill\"}},\"PaymentAdded(address,uint256)\":{\"params\":{\"agent\":\"The address that is responsible for triggering this event\",\"paymentId\":\"The newly added payment id\"}},\"PaymentFinalized(address,uint256)\":{\"params\":{\"agent\":\"The address that is responsible for triggering this event\",\"paymentId\":\"Id of the payment\"}},\"PaymentPayoutSet(address,uint256,address,uint256)\":{\"params\":{\"agent\":\"The address that is responsible for triggering this event\",\"amount\":\"Amount of token to be paid out\",\"paymentId\":\"Id of the payment\",\"token\":\"Token of the payout\"}},\"PaymentRecipientSet(address,uint256,address)\":{\"params\":{\"agent\":\"The address that is responsible for triggering this event\",\"paymentId\":\"Id of the payment\",\"recipient\":\"Address to receive the payout\"}},\"PaymentSkillSet(address,uint256,uint256)\":{\"params\":{\"agent\":\"The address that is responsible for triggering this event\",\"paymentId\":\"Id of the payment\",\"skillId\":\"Token of the payout\"}},\"PayoutClaimed(address,uint256,address,uint256)\":{\"params\":{\"agent\":\"The address that is responsible for triggering this event\",\"amount\":\"Amount of the payout claimed, after network fee was deducted\",\"fundingPotId\":\"Id of the funding pot where payout comes from\",\"token\":\"Token of the payout claim\"}},\"RecoveryModeEntered(address)\":{\"params\":{\"user\":\"The address that triggered recovery mode\"}},\"RecoveryModeExitApproved(address)\":{\"params\":{\"user\":\"The address signalling they are happy with the state\"}},\"RecoveryModeExited(address)\":{\"params\":{\"user\":\"The address that left recovery mode\"}},\"RecoveryRoleSet(address,bool)\":{\"params\":{\"setTo\":\"The boolean indicating whether the role is being granted or revoked\",\"user\":\"The address being modified\"}},\"RecoveryStorageSlotSet(address,uint256,bytes32,bytes32)\":{\"params\":{\"fromValue\":\"The value the storage slot had before this transaction\",\"slot\":\"The storage slot being modified\",\"toValue\":\"The value the storage slot has after this transaction\",\"user\":\"The address that set the storage slot\"}},\"RewardPayoutClaimed(uint256,address,uint256,uint256)\":{\"params\":{\"fee\":\"The fee deducted from payout\",\"rewardPayoutId\":\"The reward payout cycle id\",\"rewardRemainder\":\"The remaining reward amount paid out to user\",\"user\":\"The user address who received the reward payout\"}},\"RewardPayoutCycleEnded(address,uint256)\":{\"params\":{\"agent\":\"The address that is responsible for triggering this event\",\"rewardPayoutId\":\"The reward payout cycle id\"}},\"RewardPayoutCycleStarted(address,uint256)\":{\"params\":{\"agent\":\"The address that is responsible for triggering this event\",\"rewardPayoutId\":\"The reward payout cycle id\"}},\"TaskAdded(address,uint256)\":{\"params\":{\"agent\":\"The address that is responsible for triggering this event\",\"taskId\":\"The newly added task id\"}},\"TaskBriefSet(uint256,bytes32)\":{\"params\":{\"specificationHash\":\"New specification hash of the task\",\"taskId\":\"Id of the task\"}},\"TaskCanceled(uint256)\":{\"params\":{\"taskId\":\"Id of the canceled task\"}},\"TaskChangedViaSignatures(address[])\":{\"params\":{\"reviewerAddresses\":\"Array of addresses that signed off this change.\"}},\"TaskCompleted(address,uint256)\":{\"params\":{\"agent\":\"The address that is responsible for triggering this event\",\"taskId\":\"The id of the task being completed\"}},\"TaskDeliverableSubmitted(address,uint256,bytes32)\":{\"params\":{\"agent\":\"The address that is responsible for triggering this event\",\"deliverableHash\":\"Hash of the work performed\",\"taskId\":\"Id of the task\"}},\"TaskDueDateSet(uint256,uint256)\":{\"params\":{\"dueDate\":\"New due date of the task\",\"taskId\":\"Id of the task\"}},\"TaskFinalized(address,uint256)\":{\"params\":{\"agent\":\"The address that is responsible for triggering this event\",\"taskId\":\"Id of the finalized task\"}},\"TaskPayoutSet(uint256,uint8,address,uint256)\":{\"params\":{\"amount\":\"Amount of the payout funding\",\"role\":\"Task role whose payout is being changed\",\"taskId\":\"Id of the task\",\"token\":\"Token of the payout funding\"}},\"TaskRoleUserSet(uint256,uint8,address)\":{\"params\":{\"role\":\"Role of the user\",\"taskId\":\"Id of the task\",\"user\":\"User that fulfills the designated role\"}},\"TaskSkillSet(uint256,uint256)\":{\"params\":{\"skillId\":\"New skill id of the task\",\"taskId\":\"Id of the task\"}},\"TaskWorkRatingRevealed(address,uint256,uint8,uint8)\":{\"params\":{\"agent\":\"The address that is responsible for triggering this event\",\"rating\":\"Rating the role received\",\"role\":\"Role that got rated\",\"taskId\":\"Id of the task\"}},\"TokenUnlocked(address)\":{\"params\":{\"agent\":\"The address that is responsible for triggering this event\"}},\"TokensBurned(address,address,uint256)\":{\"params\":{\"agent\":\"The address that is responsible for triggering this event\",\"token\":\"the amount of the token being burned\"}},\"TokensMinted(address,address,uint256)\":{\"params\":{\"agent\":\"The address that is responsible for triggering this event\",\"amount\":\"The amount of tokens being awarded\",\"who\":\"The address being awarded the tokens\"}}},\"kind\":\"dev\",\"methods\":{\"addDomain(uint256,uint256,uint256)\":{\"details\":\"Adding new domains is currently retricted to one level only, i.e. `_parentDomainId` has to be the root domain id: `1`.\",\"params\":{\"_childSkillIndex\":\"The index that the `_domainId` is relative to `_permissionDomainId`\",\"_parentDomainId\":\"Id of the domain under which the new one will be added\",\"_permissionDomainId\":\"The domainId in which I have the permission to take this action\"}},\"addDomain(uint256,uint256,uint256,string)\":{\"details\":\"Adding new domains is currently retricted to one level only, i.e. `_parentDomainId` has to be the root domain id: `1`.We expect this function to only be used by the dapp\",\"params\":{\"_childSkillIndex\":\"The index that the `_domainId` is relative to `_permissionDomainId`\",\"_metadata\":\"Metadata relating to the domain. Expected to be the IPFS hash of a JSON blob, but not enforced by the contracts.\",\"_parentDomainId\":\"Id of the domain under which the new one will be added\",\"_permissionDomainId\":\"The domainId in which I have the permission to take this action\"}},\"addPayment(uint256,uint256,address,address,uint256,uint256,uint256)\":{\"params\":{\"_amount\":\"Payout amount\",\"_childSkillIndex\":\"The index that the `_domainId` is relative to `_permissionDomainId`, (only used if `_permissionDomainId` is different to `_domainId`)\",\"_domainId\":\"The domain where the payment belongs\",\"_permissionDomainId\":\"The domainId in which I have the permission to take this action\",\"_recipient\":\"Address of the payment recipient\",\"_skillId\":\"The skill associated with the payment\",\"_token\":\"Address of the token, `0x0` value indicates Ether\"},\"returns\":{\"paymentId\":\"Identifier of the newly created payment\"}},\"annotateTransaction(bytes32,string)\":{\"params\":{\"_metadata\":\"String of metadata for tx\",\"_txHash\":\"Hash of transaction being annotated (0x0 for current tx)\"}},\"approveStake(address,uint256,uint256)\":{\"params\":{\"_amount\":\"Amount of internal token up to which we are willing to be obligated.\",\"_approvee\":\"Address of the account we are willing to let obligate us.\",\"_domainId\":\"Domain in which we are willing to be obligated.\"}},\"authority()\":{\"returns\":{\"colonyAuthority\":\"The `ColonyAuthority` contract address\"}},\"bootstrapColony(address[],int256[])\":{\"details\":\"Only allowed to be called when `taskCount` is `0` by authorized addresses.\",\"params\":{\"_amount\":\"Amount of reputation/tokens for every address\",\"_users\":\"Array of address to bootstrap with reputation\"}},\"burnTokens(address,uint256)\":{\"params\":{\"amount\":\"The amount of tokens to burn\",\"token\":\"The address of the token to burn\"}},\"cancelExpenditure(uint256)\":{\"params\":{\"_id\":\"Expenditure identifier\"}},\"cancelTask(uint256)\":{\"details\":\"Set the `task.status` property to `1`.\",\"params\":{\"_id\":\"Id of the task\"}},\"checkNotAdditionalProtectedVariable(uint256)\":{\"details\":\"No return value, but should throw if protected.This is external, but is only expected to be called from ContractRecovery; no need toexpose this to any users.\",\"params\":{\"_slot\":\"The storage slot number to check.\"}},\"claimColonyFunds(address)\":{\"params\":{\"_token\":\"Address of the token, `0x0` value indicates Ether\"}},\"claimExpenditurePayout(uint256,uint256,address)\":{\"params\":{\"_id\":\"Expenditure identifier\",\"_slot\":\"Number of the slot\",\"_token\":\"Address of the token, `0x0` value indicates Ether\"}},\"claimPayment(uint256,address)\":{\"params\":{\"_id\":\"Payment identifier\",\"_token\":\"Address of the token, `0x0` value indicates Ether\"}},\"claimRewardPayout(uint256,uint256[7],bytes,bytes,uint256,bytes32[])\":{\"params\":{\"_payoutId\":\"Id of the reward payout\",\"_squareRoots\":\"Square roots of values used in equation: `_squareRoots[0]` - square root of user reputation, `_squareRoots[1]` - square root of user tokens (deposited in TokenLocking), `_squareRoots[2]` - square root of total reputation, `_squareRoots[3]` - square root of total tokens, `_squareRoots[4]` - square root of numerator (user reputation * user tokens), `_squareRoots[5]` - square root of denominator (total reputation * total tokens), `_squareRoots[6]` - square root of payout amount.\",\"branchMask\":\"The branchmask of the proof\",\"key\":\"Some Reputation hash tree key\",\"siblings\":\"The siblings of the proof\",\"value\":\"Reputation value\"}},\"claimTaskPayout(uint256,uint8,address)\":{\"params\":{\"_id\":\"Id of the task\",\"_role\":\"Id of the role, as defined in TaskRole enum\",\"_token\":\"Address of the token, `0x0` value indicates Ether\"}},\"completeTask(uint256)\":{\"params\":{\"_id\":\"Id of the task\"}},\"deobligateStake(address,uint256,uint256)\":{\"params\":{\"_amount\":\"Amount of internal token we are deobligating.\",\"_domainId\":\"Domain in which we are deobligating the user.\",\"_user\":\"Address of the account we are deobligating.\"}},\"deprecateDomain(uint256,uint256,uint256,bool)\":{\"params\":{\"_childSkillIndex\":\"The index that the `_domainId` is relative to `_permissionDomainId`\",\"_deprecated\":\"Whether or not the domain is deprecated\",\"_domainId\":\"Id of the domain being deprecated\",\"_permissionDomainId\":\"The domainId in which I have the permission to take this action\"}},\"deprecateExtension(bytes32,bool)\":{\"params\":{\"deprecated\":\"Whether to deprecate the extension or not\",\"extensionId\":\"keccak256 hash of the extension name, used as an indentifier\"}},\"deprecateLocalSkill(uint256,bool)\":{\"params\":{\"deprecated\":\"Deprecation status to set for the skill\",\"localSkillId\":\"Id for the local skill\"}},\"editColony(string)\":{\"params\":{\"_metadata\":\"IPFS hash of the metadata\"}},\"editColonyByDelta(string)\":{\"params\":{\"_metadataDelta\":\"IPFS hash of the metadata delta\"}},\"editDomain(uint256,uint256,uint256,string)\":{\"params\":{\"_childSkillIndex\":\"The index that the `_domainId` is relative to `_permissionDomainId`\",\"_domainId\":\"Id of the domain being edited\",\"_metadata\":\"Metadata relating to the domain. Expected to be the IPFS hash of a JSON blob, but not enforced by the contracts.\",\"_permissionDomainId\":\"The domainId in which I have the permission to take this action\"}},\"emitDomainReputationPenalty(uint256,uint256,uint256,address,int256)\":{\"params\":{\"_amount\":\"The (negative) amount of reputation to lose\",\"_childSkillIndex\":\"The index that the `_domainId` is relative to `_permissionDomainId`\",\"_domainId\":\"The domain where the user will lose reputation\",\"_permissionDomainId\":\"The domainId in which I hold the Arbitration role\",\"_user\":\"The user who will lose reputation\"}},\"emitDomainReputationReward(uint256,address,int256)\":{\"params\":{\"_amount\":\"The (positive) amount of reputation to gain\",\"_domainId\":\"The domain where the user will gain reputation\",\"_user\":\"The user who will gain reputation\"}},\"emitSkillReputationPenalty(uint256,address,int256)\":{\"params\":{\"_amount\":\"The (negative) amount of reputation to lose\",\"_skillId\":\"The skill where the user will lose reputation\",\"_user\":\"The user who will lose reputation\"}},\"emitSkillReputationReward(uint256,address,int256)\":{\"params\":{\"_amount\":\"The (positive) amount of reputation to gain\",\"_skillId\":\"The skill where the user will gain reputation\",\"_user\":\"The user who will gain reputation\"}},\"executeMetaTransaction(address,bytes,bytes32,bytes32,uint8)\":{\"params\":{\"payload\":\"The transaction data that will be executed if signature valid\",\"sigR\":\"The 'r' part of the signature\",\"sigS\":\"The 's' part of the signature\",\"sigV\":\"The 'v' part of the signature\",\"userAddress\":\"The address of the user that signed the metatransaction\"}},\"executeTaskChange(uint8[],bytes32[],bytes32[],uint8[],uint256,bytes)\":{\"details\":\"The Colony functions which require approval and the task roles to review these are set in `IColony.initialiseColony` at colony creation. Upon successful execution the `taskChangeNonces` entry for the task is incremented.\",\"params\":{\"_data\":\"The transaction data\",\"_mode\":\"How the signature was generated - 0 for Geth-style (usual), 1 for Trezor-style (only Trezor does this)\",\"_sigR\":\"r output of the ECDSA signature of the transaction\",\"_sigS\":\"s output of the ECDSA signature of the transaction\",\"_sigV\":\"recovery id\",\"_value\":\"The transaction value, i.e. number of wei to be sent when the transaction is executed Currently we only accept 0 value transactions but this is kept as a future option\"}},\"executeTaskRoleAssignment(uint8[],bytes32[],bytes32[],uint8[],uint256,bytes)\":{\"params\":{\"_data\":\"The transaction data\",\"_mode\":\"How the signature was generated - 0 for Geth-style (usual), 1 for Trezor-style (only Trezor does this)\",\"_sigR\":\"r output of the ECDSA signature of the transaction\",\"_sigS\":\"s output of the ECDSA signature of the transaction\",\"_sigV\":\"recovery id\",\"_value\":\"The transaction value, i.e. number of wei to be sent when the transaction is executed Currently we only accept 0 value transactions but this is kept as a future option\"}},\"finalizeExpenditure(uint256)\":{\"params\":{\"_id\":\"Expenditure identifier\"}},\"finalizePayment(uint256,uint256,uint256)\":{\"params\":{\"_childSkillIndex\":\"The index that the `_domainId` is relative to `_permissionDomainId`\",\"_id\":\"Payment identifier\",\"_permissionDomainId\":\"The domainId in which I have the permission to take this action\"}},\"finalizeRewardPayout(uint256)\":{\"params\":{\"_payoutId\":\"Id of the reward payout\"}},\"finalizeTask(uint256)\":{\"details\":\"Set the `task.finalized` property to true\",\"params\":{\"_id\":\"Id of the task\"}},\"finishUpgrade()\":{\"details\":\"Can only be called by the colony itself, and only expected to be called as part of the `upgrade()` call. Required to be external so it can be an external call.\"},\"generateSecret(bytes32,uint256)\":{\"params\":{\"_salt\":\"Salt value\",\"_value\":\"Value to hide\"},\"returns\":{\"secret\":\"`keccak256` hash of joint _salt and _value\"}},\"getApproval(address,address,uint256)\":{\"params\":{\"_domainId\":\"Domain in which we are willing to be obligated.\",\"_obligator\":\"Address of the account we are willing to let obligate us.\",\"_user\":\"User allowing their tokens to be obligated.\"},\"returns\":{\"approval\":\"The amount the user has approved\"}},\"getCapabilityRoles(bytes4)\":{\"params\":{\"_sig\":\"The function signature\"},\"returns\":{\"roles\":\"bytes32 representation of the authorized roles\"}},\"getColonyNetwork()\":{\"details\":\"The colonyNetworkAddress we read here is set once, during `initialiseColony`.\",\"returns\":{\"colonyNetwork\":\"The address of Colony Network instance\"}},\"getDomain(uint256)\":{\"params\":{\"_id\":\"Id of the domain which details to get\"},\"returns\":{\"domain\":\"The domain\"}},\"getDomainCount()\":{\"returns\":{\"count\":\"The domain count. Min 1 as the root domain is created at the same time as the colony\"}},\"getDomainFromFundingPot(uint256)\":{\"params\":{\"_fundingPotId\":\"Id of the funding pot\"},\"returns\":{\"domainId\":\"Id of the corresponding domain\"}},\"getExpenditure(uint256)\":{\"params\":{\"_id\":\"Expenditure identifier\"},\"returns\":{\"expenditure\":\"The expenditure\"}},\"getExpenditureCount()\":{\"returns\":{\"count\":\"The expenditure count\"}},\"getExpenditureSlot(uint256,uint256)\":{\"params\":{\"_id\":\"Expenditure identifier\",\"_slot\":\"Expenditure slot\"},\"returns\":{\"expenditureSlot\":\"The expenditure slot\"}},\"getExpenditureSlotPayout(uint256,uint256,address)\":{\"params\":{\"_id\":\"Expenditure identifier\",\"_slot\":\"Expenditure slot\",\"_token\":\"Token address\"},\"returns\":{\"amount\":\"Amount of the payout for that slot/token.\"}},\"getFundingPot(uint256)\":{\"details\":\"For the reward funding pot (e.g. id: 0) this returns (0, 0, 0).\",\"params\":{\"_id\":\"Id of the pot which details to get\"},\"returns\":{\"associatedType\":\"The FundingPotAssociatedType value of the current funding pot, e.g. Domain, Task, Payout\",\"associatedTypeId\":\"Id of the associated type, e.g. if associatedType = FundingPotAssociatedType.Domain, this refers to the domainId\",\"payoutsWeCannotMake\":\"Number of payouts that cannot be completed with the current funding\"}},\"getFundingPotBalance(uint256,address)\":{\"params\":{\"_potId\":\"Id of the funding pot\",\"_token\":\"Address of the token, `0x0` value indicates Ether\"},\"returns\":{\"balance\":\"Funding pot supply balance\"}},\"getFundingPotCount()\":{\"returns\":{\"count\":\"The funding pots count\"}},\"getFundingPotPayout(uint256,address)\":{\"params\":{\"_potId\":\"Id of the funding pot\",\"_token\":\"Address of the token, `0x0` value indicates Ether\"},\"returns\":{\"payout\":\"Funding pot payout amount\"}},\"getMetatransactionNonce(address)\":{\"params\":{\"userAddress\":\"The address of the user that will sign the metatransaction\"}},\"getNonRewardPotsTotal(address)\":{\"params\":{\"_token\":\"Address of the token, `0x0` value indicates Ether\"},\"returns\":{\"amount\":\"Total amount of tokens in funding pots other than the rewards pot (id 0)\"}},\"getObligation(address,address,uint256)\":{\"params\":{\"_domainId\":\"Domain in which we are obligated.\",\"_obligator\":\"Address of the account who obligated us.\",\"_user\":\"User whose tokens are obligated.\"},\"returns\":{\"obligation\":\"The amount that is currently obligated\"}},\"getPayment(uint256)\":{\"params\":{\"_id\":\"Payment identifier\"},\"returns\":{\"payment\":\"The Payment data structure\"}},\"getPaymentCount()\":{\"returns\":{\"count\":\"The payment count\"}},\"getRewardInverse()\":{\"returns\":{\"rewardInverse\":\"The inverse of the reward\"}},\"getRewardPayoutInfo(uint256)\":{\"params\":{\"_payoutId\":\"Id of the reward payout\"},\"returns\":{\"rewardPayoutCycle\":\"RewardPayoutCycle, containing propertes:  `reputationState` Reputation root hash at the time of creation,  `colonyWideReputation` Colony wide reputation in `reputationState`,  `totalTokens` Total colony tokens at the time of creation,  `amount` Total amount of tokens taken aside for reward payout,  `tokenAddress` Token address,  `blockTimestamp` Block number at the time of creation.\"}},\"getRootLocalSkill()\":{\"returns\":{\"rootLocalSkill\":\"The root local skill id\"}},\"getTask(uint256)\":{\"params\":{\"_id\":\"Id of the task\"},\"returns\":{\"completionTimestamp\":\"Task completion timestamp\",\"deliverableHash\":\"Task deliverable hash\",\"domainId\":\"Task domain id, default is root colony domain with id 1\",\"dueDate\":\"Due date\",\"fundingPotId\":\"Id of funding pot for task\",\"skillIds\":\"Array of global skill ids assigned to task\",\"specificationHash\":\"Task brief hash\",\"status\":\"TaskStatus property. 0 - Active. 1 - Cancelled. 2 - Finalized\"}},\"getTaskChangeNonce(uint256)\":{\"params\":{\"_id\":\"Id of the task\"},\"returns\":{\"nonce\":\"The current task change nonce value\"}},\"getTaskCount()\":{\"returns\":{\"count\":\"The task count\"}},\"getTaskPayout(uint256,uint8,address)\":{\"params\":{\"_id\":\"Id of the task\",\"_role\":\"Id of the role, as defined in TaskRole enum\",\"_token\":\"Address of the token, `0x0` value indicates Ether\"},\"returns\":{\"amount\":\"Payout amount\"}},\"getTaskRole(uint256,uint8)\":{\"params\":{\"_id\":\"Id of the task\",\"_role\":\"Id of the role, as defined in TaskRole enum\"},\"returns\":{\"role\":\"The Role\"}},\"getTaskWorkRatingSecret(uint256,uint8)\":{\"params\":{\"_id\":\"Id of the task\",\"_role\":\"Id of the role, as defined in TaskRole enum\"},\"returns\":{\"secret\":\"Rating secret `bytes32` value\"}},\"getTaskWorkRatingSecretsInfo(uint256)\":{\"params\":{\"_id\":\"Id of the task\"},\"returns\":{\"lastSubmittedAt\":\"Timestamp of the last submitted rating secret\",\"nSecrets\":\"Number of secrets\"}},\"getToken()\":{\"returns\":{\"tokenAddress\":\"Address of the token contract\"}},\"getTokenApproval(address,address)\":{\"params\":{\"spender\":\"The account we have approved\",\"token\":\"The address of the token which was approved\"},\"returns\":{\"amount\":\"The token approval amount\"}},\"getTotalTokenApproval(address)\":{\"params\":{\"token\":\"The address of the token which was approved\"},\"returns\":{\"amount\":\"The total token approval amount\"}},\"getUserRoles(address,uint256)\":{\"params\":{\"_domain\":\"The domain we want to get roles in\",\"_user\":\"The user whose roles we want to get\"},\"returns\":{\"roles\":\"bytes32 representation of the held roles\"}},\"hasInheritedUserRole(address,uint256,uint8,uint256,uint256)\":{\"params\":{\"_childDomainId\":\"The domain where we want to use the role\",\"_childSkillIndex\":\"The index that the `_childDomainId` is relative to `_domainId`\",\"_domainId\":\"Domain in which the caller has the role\",\"_role\":\"The role we want to check for\",\"_user\":\"The user whose role we want to check\"},\"returns\":{\"hasRole\":\"Boolean indicating whether the given user has the given role in domain\"}},\"hasUserRole(address,uint256,uint8)\":{\"params\":{\"_domainId\":\"The domain where we want to check for the role\",\"_role\":\"The role we want to check for\",\"_user\":\"The user whose role we want to check\"},\"returns\":{\"hasRole\":\"Boolean indicating whether the given user has the given role in domain\"}},\"initialiseColony(address,address)\":{\"details\":\"Sets the reward inverse to the uint max 2**256 - 1.\",\"params\":{\"_colonyNetworkAddress\":\"Address of the colony network\",\"_token\":\"Address of the colony ERC20 Token\"}},\"installExtension(bytes32,uint256)\":{\"params\":{\"extensionId\":\"keccak256 hash of the extension name, used as an indentifier\",\"version\":\"The new extension version to install\"}},\"isInRecoveryMode()\":{\"returns\":{\"inRecoveryMode\":\"Return true if recovery mode is active, false otherwise\"}},\"lockExpenditure(uint256)\":{\"params\":{\"_id\":\"Expenditure identifier\"}},\"lockToken()\":{\"returns\":{\"timesLocked\":\"The amount of times the token was locked\"}},\"makeArbitraryTransaction(address,bytes)\":{\"params\":{\"_action\":\"Bytes array encoding the function call and arguments\",\"_to\":\"Contract to receive the function call (cannot be this contract, network or token locking)\"},\"returns\":{\"success\":\"Boolean indicating whether the transaction succeeded\"}},\"makeArbitraryTransactions(address[],bytes[],bool)\":{\"params\":{\"_actions\":\"Array of Bytes arrays encoding the function calls and arguments\",\"_strict\":\"Boolean indicating whether if one transaction fails, the whole call to this function should fail.\",\"_targets\":\"Array of addressed to be targeted\"},\"returns\":{\"success\":\"Boolean indicating whether the transactions succeeded\"}},\"makeExpenditure(uint256,uint256,uint256)\":{\"params\":{\"_childSkillIndex\":\"The index that the `_domainId` is relative to `_permissionDomainId`, (only used if `_permissionDomainId` is different to `_domainId`)\",\"_domainId\":\"The domain where the expenditure belongs\",\"_permissionDomainId\":\"The domainId in which I have the permission to take this action\"},\"returns\":{\"expenditureId\":\"Identifier of the newly created expenditure\"}},\"makeSingleArbitraryTransaction(address,bytes)\":{\"details\":\"Only callable by the colony itself. If you wish to use this functionality, you should use the makeAbitraryTransactions function\",\"params\":{\"_action\":\"Bytes array encoding the function call and arguments\",\"_target\":\"Contract to receive the function call\"},\"returns\":{\"success\":\"Boolean indicating whether the transactions succeeded\"}},\"makeTask(uint256,uint256,bytes32,uint256,uint256,uint256)\":{\"params\":{\"_childSkillIndex\":\"The index that the `_domainId` is relative to `_permissionDomainId`\",\"_domainId\":\"The domain where the task belongs\",\"_dueDate\":\"The due date of the task, can set to `0` for no-op\",\"_permissionDomainId\":\"The domainId in which I have the permission to take this action\",\"_skillId\":\"The skill associated with the task, can set to `0` for no-op\",\"_specificationHash\":\"Database identifier where the task specification is stored\"}},\"mintTokens(uint256)\":{\"params\":{\"_wad\":\"Amount to mint\"}},\"mintTokensFor(address,uint256)\":{\"params\":{\"_guy\":\"Recipient of new tokens\",\"_wad\":\"Amount to mint\"}},\"moveFundsBetweenPots(uint256,uint256,uint256,uint256,uint256,uint256,address)\":{\"params\":{\"_amount\":\"Amount of funds\",\"_fromChildSkillIndex\":\"The child index in `_permissionDomainId` where we can find the domain for `_fromPotId`\",\"_fromPot\":\"Funding pot id providing the funds\",\"_permissionDomainId\":\"The domainId in which I have the permission to take this action\",\"_toChildSkillIndex\":\"The child index in `_permissionDomainId` where we can find the domain for `_toPotId`\",\"_toPot\":\"Funding pot id receiving the funds\",\"_token\":\"Address of the token, `0x0` value indicates Ether\"}},\"moveFundsBetweenPots(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address)\":{\"params\":{\"_amount\":\"Amount of funds\",\"_childSkillIndex\":\"The child index in _permissionDomainId where I will be taking this action\",\"_domainId\":\"The domain where I am taking this action, pointed to by _permissionDomainId and _childSkillIndex\",\"_fromChildSkillIndex\":\"In the array of child skills for the skill associated with the domain pointed to by _permissionDomainId + _childSkillIndex,         the index of the skill associated with the domain that contains _fromPot\",\"_fromPot\":\"Funding pot id providing the funds\",\"_permissionDomainId\":\"The domainId in which I have the permission to take this action\",\"_toChildSkillIndex\":\"The same, but for the _toPot which the funds are being moved to\",\"_toPot\":\"Funding pot id receiving the funds\",\"_token\":\"Address of the token, `0x0` value indicates Ether\"}},\"multicall(bytes[])\":{\"details\":\"The `msg.value` should not be trusted for any method callable from multicall.\",\"params\":{\"data\":\"The encoded function data for each of the calls to make to this contract\"},\"returns\":{\"results\":\"The results from each of the calls passed in via data\"}},\"numRecoveryRoles()\":{\"returns\":{\"numRoles\":\"Number of users with the recovery role.\"}},\"obligateStake(address,uint256,uint256)\":{\"params\":{\"_amount\":\"Amount of internal token we are obligating.\",\"_domainId\":\"Domain in which we are obligating the user.\",\"_user\":\"Address of the account we are obligating.\"}},\"owner()\":{\"details\":\"Used for testing.\",\"returns\":{\"colonyOwner\":\"Address of the colony owner\"}},\"registerColonyLabel(string,string)\":{\"params\":{\"colonyName\":\"The label to register.\",\"orbitdb\":\"The path of the orbitDB database associated with the colony name\"}},\"removeRecoveryRole(address)\":{\"params\":{\"_user\":\"User we want to remove recovery role from\"}},\"removeTaskEvaluatorRole(uint256)\":{\"params\":{\"_id\":\"Id of the task\"}},\"removeTaskWorkerRole(uint256)\":{\"params\":{\"_id\":\"Id of the task\"}},\"revealTaskWorkRating(uint256,uint8,uint8,bytes32)\":{\"details\":\"Compares the `keccak256(_salt, _rating)` output with the previously submitted rating secret and if they match, sets the task role properties `rated` to `true` and `rating` to `_rating`.\",\"params\":{\"_id\":\"Id of the task\",\"_rating\":\"0-50 rating score (in increments of 10, .e.g 0, 10, 20, 30, 40 or 50)\",\"_role\":\"Id of the role, as defined in TaskRole enum\",\"_salt\":\"Salt value used to generate the rating secret\"}},\"setAdministrationRole(uint256,uint256,address,uint256,bool)\":{\"params\":{\"_childSkillIndex\":\"The index that the `_domainId` is relative to `_permissionDomainId`\",\"_domainId\":\"Domain in which we are giving user the role\",\"_permissionDomainId\":\"Domain in which the caller has root/architecture role\",\"_setTo\":\"The state of the role permission (true assign the permission, false revokes it)\",\"_user\":\"User we want to give an admin role to\"}},\"setAllTaskPayouts(uint256,address,uint256,uint256,uint256)\":{\"details\":\"Can only call if evaluator and worker are unassigned or manager, otherwise need signature.\",\"params\":{\"_evaluatorAmount\":\"Payout amount for evaluator\",\"_id\":\"Id of the task\",\"_managerAmount\":\"Payout amount for manager\",\"_token\":\"Address of the token, `0x0` value indicates Ether\",\"_workerAmount\":\"Payout amount for worker\"}},\"setArbitrationRole(uint256,uint256,address,uint256,bool)\":{\"params\":{\"_childSkillIndex\":\"The index that the `_domainId` is relative to `_permissionDomainId`\",\"_domainId\":\"Domain in which we are giving user the role\",\"_permissionDomainId\":\"Domain in which the caller has root role\",\"_setTo\":\"The state of the role permission (true assign the permission, false revokes it)\",\"_user\":\"User we want to give an arbitration role to\"}},\"setArchitectureRole(uint256,uint256,address,uint256,bool)\":{\"params\":{\"_childSkillIndex\":\"The index that the `_domainId` is relative to `_permissionDomainId`\",\"_domainId\":\"Domain in which we are giving user the role\",\"_permissionDomainId\":\"Domain in which the caller has root/architecture role\",\"_setTo\":\"The state of the role permission (true assign the permission, false revokes it)\",\"_user\":\"User we want to give an architecture role to\"}},\"setDefaultGlobalClaimDelay(uint256)\":{\"params\":{\"_globalClaimDelay\":\"The new default global claim delay\"}},\"setExpenditureClaimDelay(uint256,uint256,uint256)\":{\"params\":{\"_claimDelay\":\"Duration of time (in seconds) to delay\",\"_id\":\"Expenditure identifier\",\"_slot\":\"Number of the slot\"}},\"setExpenditureClaimDelays(uint256,uint256[],uint256[])\":{\"params\":{\"_claimDelays\":\"Durations of time (in seconds) to delay\",\"_id\":\"Expenditure identifier\",\"_slots\":\"Array of slots to set claim delays\"}},\"setExpenditureMetadata(uint256,string)\":{\"details\":\"Can only be called while expenditure is in draft state.\",\"params\":{\"_id\":\"Id of the expenditure\",\"_metadata\":\"IPFS hash of the metadata\"}},\"setExpenditureMetadata(uint256,uint256,uint256,string)\":{\"params\":{\"_childSkillIndex\":\"The index that the `_domainId` is relative to `_permissionDomainId`,\",\"_id\":\"Id of the expenditure\",\"_metadata\":\"IPFS hash of the metadata\",\"_permissionDomainId\":\"The domainId in which I have the permission to take this action\"}},\"setExpenditurePayout(uint256,uint256,address,uint256)\":{\"details\":\"Can only be called while expenditure is in draft state.\",\"params\":{\"_amount\":\"Payout amount\",\"_id\":\"Id of the expenditure\",\"_slot\":\"Number of the slot\",\"_token\":\"Address of the token, `0x0` value indicates Ether\"}},\"setExpenditurePayout(uint256,uint256,uint256,uint256,address,uint256)\":{\"params\":{\"_amount\":\"Payout amount\",\"_childSkillIndex\":\"The index that the `_domainId` is relative to `_permissionDomainId`\",\"_id\":\"Id of the expenditure\",\"_permissionDomainId\":\"The domainId in which I have the permission to take this action\",\"_slot\":\"The slot to set the payout\",\"_token\":\"Address of the token, `0x0` value indicates Ether\"}},\"setExpenditurePayoutModifiers(uint256,uint256[],int256[])\":{\"params\":{\"_id\":\"Expenditure identifier\",\"_payoutModifiers\":\"Values (between +/- WAD) to modify the payout & reputation bonus\",\"_slots\":\"Array of slots to set payout modifiers\"}},\"setExpenditurePayouts(uint256,uint256[],address,uint256[])\":{\"details\":\"Can only be called while expenditure is in draft state.\",\"params\":{\"_amounts\":\"Payout amounts\",\"_id\":\"Id of the expenditure\",\"_slots\":\"Array of slots to set payouts\",\"_token\":\"Address of the token, `0x0` value indicates Ether\"}},\"setExpenditureRecipient(uint256,uint256,address)\":{\"details\":\"Can only be called while expenditure is in draft state.\",\"params\":{\"_id\":\"Id of the expenditure\",\"_recipient\":\"Address of the recipient\",\"_slot\":\"Slot for the recipient address\"}},\"setExpenditureRecipients(uint256,uint256[],address[])\":{\"details\":\"Can only be called while expenditure is in draft state.\",\"params\":{\"_id\":\"Id of the expenditure\",\"_recipients\":\"Addresses of the recipients\",\"_slots\":\"Array of slots to set recipients\"}},\"setExpenditureSkill(uint256,uint256,uint256)\":{\"params\":{\"_id\":\"Expenditure identifier\",\"_skillId\":\"Id of the new skill to set\",\"_slot\":\"Number of the slot\"}},\"setExpenditureSkills(uint256,uint256[],uint256[])\":{\"params\":{\"_id\":\"Expenditure identifier\",\"_skillIds\":\"Ids of the new skills to set\",\"_slots\":\"Array of slots to set skills\"}},\"setExpenditureState(uint256,uint256,uint256,uint256,bool[],bytes32[],bytes32)\":{\"params\":{\"_childSkillIndex\":\"The index that the `_domainId` is relative to `_permissionDomainId`, (only used if `_permissionDomainId` is different to `_domainId`)\",\"_id\":\"Expenditure identifier\",\"_keys\":\"Array of additional keys (for mappings & arrays)\",\"_mask\":\"Array of booleans indicated whether a key is a mapping (F) or an array index (T).\",\"_permissionDomainId\":\"The domainId in which I have the permission to take this action\",\"_storageSlot\":\"Number of the top-level storage slot (25, 26, or 27)\",\"_value\":\"Value to set at location\"}},\"setExpenditureValues(uint256,uint256[],address[],uint256[],uint256[],uint256[],uint256[],uint256[],int256[],address[],uint256[][],uint256[][])\":{\"params\":{\"_claimDelaySlots\":\"Array of slots to set claim delays\",\"_claimDelays\":\"Durations of time (in seconds) to delay\",\"_id\":\"Expenditure identifier\",\"_payoutModifierSlots\":\"Array of slots to set payout modifiers\",\"_payoutModifiers\":\"Values (between +/- WAD) to modify the payout & reputation bonus\",\"_payoutSlots\":\"2-dimensional array of slots to set payouts\",\"_payoutTokens\":\"Addresses of the tokens, `0x0` value indicates Ether\",\"_payoutValues\":\"2-dimensional array of the payout amounts\",\"_recipientSlots\":\"Array of slots to set recipients\",\"_recipients\":\"Addresses of the recipients\",\"_skillIdSlots\":\"Array of slots to set skills\",\"_skillIds\":\"Ids of the new skills to set\"}},\"setFundingRole(uint256,uint256,address,uint256,bool)\":{\"params\":{\"_childSkillIndex\":\"The index that the `_domainId` is relative to `_permissionDomainId`\",\"_domainId\":\"Domain in which we are giving user the role\",\"_permissionDomainId\":\"Domain in which the caller has root/architecture role\",\"_setTo\":\"The state of the role permission (true assign the permission, false revokes it)\",\"_user\":\"User we want to give an funding role to\"}},\"setPaymentPayout(uint256,uint256,uint256,address,uint256)\":{\"params\":{\"_amount\":\"Payout amount\",\"_childSkillIndex\":\"The index that the `_domainId` is relative to `_permissionDomainId`\",\"_id\":\"Payment identifier\",\"_permissionDomainId\":\"The domainId in which I have the permission to take this action\",\"_token\":\"Address of the token, `0x0` value indicates Ether\"}},\"setPaymentRecipient(uint256,uint256,uint256,address)\":{\"params\":{\"_childSkillIndex\":\"The index that the `_domainId` is relative to `_permissionDomainId`\",\"_id\":\"Payment identifier\",\"_permissionDomainId\":\"The domainId in which I have the permission to take this action\",\"_recipient\":\"Address of the payment recipient\"}},\"setPaymentSkill(uint256,uint256,uint256,uint256)\":{\"params\":{\"_childSkillIndex\":\"The index that the `_domainId` is relative to `_permissionDomainId`\",\"_id\":\"Payment identifier\",\"_permissionDomainId\":\"The domainId in which I have the permission to take this action\",\"_skillId\":\"Id of the new skill to set\"}},\"setRecoveryRole(address)\":{\"params\":{\"_user\":\"User we want to give a recovery role to\"}},\"setRewardInverse(uint256)\":{\"params\":{\"_rewardInverse\":\"The inverse of the reward\"}},\"setRootRole(address,bool)\":{\"params\":{\"_setTo\":\"The state of the role permission (true assign the permission, false revokes it)\",\"_user\":\"User we want to give an root role to\"}},\"setStorageSlotRecovery(uint256,bytes32)\":{\"details\":\"certain critical variables are protected from editing in this function\",\"params\":{\"_slot\":\"Uint address of storage slot to be updated\",\"_value\":\"word of data to be set\"}},\"setTaskBrief(uint256,bytes32)\":{\"params\":{\"_id\":\"Id of the task\",\"_specificationHash\":\"Unique hash of the task brief in ddb\"}},\"setTaskDueDate(uint256,uint256)\":{\"params\":{\"_dueDate\":\"Due date as seconds since unix epoch\",\"_id\":\"Id of the task\"}},\"setTaskEvaluatorPayout(uint256,address,uint256)\":{\"params\":{\"_amount\":\"Payout amount\",\"_id\":\"Id of the task\",\"_token\":\"Address of the token, `0x0` value indicates Ether\"}},\"setTaskEvaluatorRole(uint256,address)\":{\"details\":\"This function can only be called through `executeTaskRoleAssignment`.\",\"params\":{\"_id\":\"Id of the task\",\"_user\":\"Address of the user we want to give a evaluator role to\"}},\"setTaskManagerPayout(uint256,address,uint256)\":{\"params\":{\"_amount\":\"Payout amount\",\"_id\":\"Id of the task\",\"_token\":\"Address of the token, `0x0` value indicates Ether\"}},\"setTaskManagerRole(uint256,address,uint256,uint256)\":{\"details\":\"This function can only be called through `executeTaskRoleAssignment`.\",\"params\":{\"_childSkillIndex\":\"The index that the `_domainId` is relative to `_permissionDomainId`\",\"_id\":\"Id of the task\",\"_permissionDomainId\":\"The domain ID in which _user has the Administration permission\",\"_user\":\"Address of the user we want to give a manager role to\"}},\"setTaskSkill(uint256,uint256)\":{\"details\":\"Currently we only allow one skill per task although we have provisioned for an array of skills in `Task` struct. Allowed before a task is finalized.\",\"params\":{\"_id\":\"Id of the task\",\"_skillId\":\"Id of the skill which has to be a global skill\"}},\"setTaskWorkerPayout(uint256,address,uint256)\":{\"params\":{\"_amount\":\"Payout amount\",\"_id\":\"Id of the task\",\"_token\":\"Address of the token, `0x0` value indicates Ether\"}},\"setTaskWorkerRole(uint256,address)\":{\"details\":\"This function can only be called through `executeTaskRoleAssignment`.\",\"params\":{\"_id\":\"Id of the task\",\"_user\":\"Address of the user we want to give a worker role to\"}},\"setUserRoles(uint256,uint256,address,uint256,bytes32)\":{\"params\":{\"_childSkillIndex\":\"The index that the `_domainId` is relative to `_permissionDomainId`\",\"_domainId\":\"Domain in which we are giving user the role\",\"_permissionDomainId\":\"Domain in which the caller has root/architecture role\",\"_roles\":\"Byte array representing the desired role setting (1 for on, 0 for off)\",\"_user\":\"User we want to give a role to\"}},\"startNextRewardPayout(address,bytes,bytes,uint256,bytes32[])\":{\"params\":{\"_token\":\"Address of the token used for reward payout\",\"branchMask\":\"The branchmask of the proof\",\"key\":\"Some Reputation hash tree key\",\"siblings\":\"The siblings of the proof\",\"value\":\"Reputation value\"}},\"submitTaskDeliverable(uint256,bytes32)\":{\"details\":\"Set the `task.deliverableHash` and `task.completionTimestamp` properties.\",\"params\":{\"_deliverableHash\":\"Unique hash of the task deliverable content in ddb\",\"_id\":\"Id of the task\"}},\"submitTaskDeliverableAndRating(uint256,bytes32,bytes32)\":{\"details\":\"Internally call `submitTaskDeliverable` and `submitTaskWorkRating` in sequence.\",\"params\":{\"_deliverableHash\":\"Unique hash of the task deliverable content in ddb\",\"_id\":\"Id of the task\",\"_ratingSecret\":\"Rating secret for manager\"}},\"submitTaskWorkRating(uint256,uint8,bytes32)\":{\"params\":{\"_id\":\"Id of the task\",\"_ratingSecret\":\"`keccak256` hash of a salt and 0-50 rating score (in increments of 10, .e.g 0, 10, 20, 30, 40 or 50). Can be generated via `IColony.generateSecret` helper function.\",\"_role\":\"Id of the role, as defined in TaskRole enum\"}},\"transferExpenditure(uint256,address)\":{\"params\":{\"_id\":\"Expenditure identifier\",\"_newOwner\":\"New owner of expenditure\"}},\"transferExpenditureViaArbitration(uint256,uint256,uint256,address)\":{\"details\":\"This is now deprecated and will be removed in a future version\",\"params\":{\"_childSkillIndex\":\"The index that the `_domainId` is relative to `_permissionDomainId`, (only used if `_permissionDomainId` is different to `_domainId`)\",\"_id\":\"Expenditure identifier\",\"_newOwner\":\"New owner of expenditure\",\"_permissionDomainId\":\"The domainId in which I have the permission to take this action\"}},\"transferStake(uint256,uint256,address,address,uint256,uint256,address)\":{\"params\":{\"_amount\":\"Amount of internal token we are transferring.\",\"_childSkillIndex\":\"The child index in `_permissionDomainId` where we can find `_domainId`.\",\"_domainId\":\"Domain in which we are transferring the tokens.\",\"_obligator\":\"Address of the account who set the obligation.\",\"_permissionDomainId\":\"The domainId in which I have the permission to take this action.\",\"_recipient\":\"Recipient of the transferred tokens.\",\"_user\":\"Address of the account we are transferring.\"}},\"uninstallExtension(bytes32)\":{\"details\":\"This is a permanent action -- re-installing the extension will deploy a new contractIt is recommended to deprecate an extension before uninstalling to allow active objects to be resolved\",\"params\":{\"extensionId\":\"keccak256 hash of the extension name, used as an indentifier\"}},\"unlockTokenForUser(address,uint256)\":{\"params\":{\"lockId\":\"The specific lock to unlock\",\"user\":\"The user to unlock\"}},\"updateApprovalAmount(address,address)\":{\"params\":{\"spender\":\"The account we have approved\",\"token\":\"The address of the token which was approved\"}},\"updateColonyOrbitDB(string)\":{\"params\":{\"orbitdb\":\"The path of the orbitDB database to be associated with the colony\"}},\"upgrade(uint256)\":{\"details\":\"Downgrades are not allowed, i.e. `_newVersion` should be higher than the currect colony version.\",\"params\":{\"_newVersion\":\"The target version for the upgrade\"}},\"upgradeExtension(bytes32,uint256)\":{\"params\":{\"extensionId\":\"keccak256 hash of the extension name, used as an indentifier\",\"newVersion\":\"The version to upgrade to (must be one larger than the current version)\"}},\"userCanSetRoles(address,uint256,uint256,uint256)\":{\"params\":{\"_childDomainId\":\"The domain where we want to edit roles\",\"_childSkillIndex\":\"The index that the `_childDomainId` is relative to `_domainId`\",\"_domainId\":\"Domain in which the caller has the role (currently Root or Architecture)\",\"_user\":\"The user whose permissions we want to check\"},\"returns\":{\"canSet\":\"Boolean indicating whether the given user is allowed to edit roles in the target domain.\"}},\"verifyReputationProof(bytes,bytes,uint256,bytes32[])\":{\"details\":\"For more detail about branchMask and siblings, examine the PatriciaTree implementation. While external, likely only to be used by the Colony contracts, as it checks that the user is proving their own reputation in the current colony. The `verifyProof` function can be used to verify any proof, though this function is not currently exposed on the Colony's EtherRouter.\",\"params\":{\"branchMask\":\"The branchmask of the proof\",\"key\":\"The key of the element the proof is for.\",\"siblings\":\"The siblings of the proof\",\"value\":\"The value of the element that the proof is for.\"},\"returns\":{\"isValid\":\"True if the proof is valid, false otherwise.\"}},\"version()\":{\"returns\":{\"colonyVersion\":\"Version number\"}}},\"version\":1},\"userdoc\":{\"events\":{\"Annotation(address,bytes32,string)\":{\"notice\":\"Emit a metadata string for a transaction\"},\"ArbitraryReputationUpdate(address,address,uint256,int256)\":{\"notice\":\"Event logged when a manual reputation reward/penalty is made\"},\"ColonyBootstrapped(address,address[],int256[])\":{\"notice\":\"Event logged when Colony is initially bootstrapped\"},\"ColonyFundsClaimed(address,address,uint256,uint256)\":{\"notice\":\"Event logged when colony funds are moved to the top-level domain pot\"},\"ColonyFundsMovedBetweenFundingPots(address,uint256,uint256,uint256,address)\":{\"notice\":\"Event logged when colony funds, either tokens or ether, has been moved between funding pots\"},\"ColonyInitialised(address,address,address)\":{\"notice\":\"Event logged when Colony is initialised\"},\"ColonyMetadata(address,string)\":{\"notice\":\"Event logged when Colony metadata is updated\"},\"ColonyMetadataDelta(address,string)\":{\"notice\":\"Event logged when Colony metadata is updated via a delta\"},\"ColonyRewardInverseSet(address,uint256)\":{\"notice\":\"Event logged when the colony reward inverse is set\"},\"ColonyRoleSet(address,address,uint256,uint8,bool)\":{\"notice\":\"Event logged when a user/domain/role is granted or revoked\"},\"ColonyUpgraded(address,uint256,uint256)\":{\"notice\":\"Event logged when colony is upgraded\"},\"DomainAdded(address,uint256)\":{\"notice\":\"Event logged when a new Domain is added\"},\"DomainDeprecated(address,uint256,bool)\":{\"notice\":\"Event logged when domain metadata is updated\"},\"DomainMetadata(address,uint256,string)\":{\"notice\":\"Event logged when domain metadata is updated\"},\"ExpenditureAdded(address,uint256)\":{\"notice\":\"Event logged when a new expenditure is added\"},\"ExpenditureCancelled(address,uint256)\":{\"notice\":\"Event logged when an expenditure has been cancelled\"},\"ExpenditureClaimDelaySet(address,uint256,uint256,uint256)\":{\"notice\":\"Event logged when an expenditure slot claim delay changes\"},\"ExpenditureFinalized(address,uint256)\":{\"notice\":\"Event logged when an expenditure has been finalized\"},\"ExpenditureGlobalClaimDelaySet(address,uint256)\":{\"notice\":\"Event logged when the default global claim delay is updated\"},\"ExpenditureLocked(address,uint256)\":{\"notice\":\"Event logged when an expenditure has been locked\"},\"ExpenditureMetadataSet(address,uint256,string)\":{\"notice\":\"Event logged when expenditure metadata is set\"},\"ExpenditurePayoutModifierSet(address,uint256,uint256,int256)\":{\"notice\":\"Event logged when an expenditure slot payout modifier changes\"},\"ExpenditurePayoutSet(address,uint256,uint256,address,uint256)\":{\"notice\":\"Event logged when an expenditure payout changes\"},\"ExpenditureRecipientSet(address,uint256,uint256,address)\":{\"notice\":\"Event logged when an expenditure's recipient is set\"},\"ExpenditureSkillSet(address,uint256,uint256,uint256)\":{\"notice\":\"Event logged when an expenditure's skill changes\"},\"ExpenditureStateChanged(address,uint256,uint256,bool[],bytes32[],bytes32)\":{\"notice\":\"Event logged when an expenditure slot payout modifier changes\"},\"ExpenditureTransferred(address,uint256,address)\":{\"notice\":\"Event logged when a new expenditure is transferred\"},\"FundingPotAdded(uint256)\":{\"notice\":\"Event logged when a new FundingPot is added\"},\"LocalSkillAdded(address,uint256)\":{\"notice\":\"Event logged when a new local skill is added\"},\"LocalSkillDeprecated(address,uint256,bool)\":{\"notice\":\"Event logged when a new local skill is added\"},\"PaymentAdded(address,uint256)\":{\"notice\":\"Event logged when a new payment is added\"},\"PaymentFinalized(address,uint256)\":{\"notice\":\"Event logged when a payment is finalised\"},\"PaymentPayoutSet(address,uint256,address,uint256)\":{\"notice\":\"Event logged when a payment has its payout set\"},\"PaymentRecipientSet(address,uint256,address)\":{\"notice\":\"Event logged when a payment has its recipient set\"},\"PaymentSkillSet(address,uint256,uint256)\":{\"notice\":\"Event logged when a payment has its skill set\"},\"PayoutClaimed(address,uint256,address,uint256)\":{\"notice\":\"Event logged when a payout is claimed, either from a Task or Payment\"},\"RecoveryModeEntered(address)\":{\"notice\":\"Event logged when recovery mode is triggered.\"},\"RecoveryModeExitApproved(address)\":{\"notice\":\"Event logged when someone with recovery mode signals they are happy with the state and wish to leave recovery mode\"},\"RecoveryModeExited(address)\":{\"notice\":\"Event logged when recovery mode is left\"},\"RecoveryRoleSet(address,bool)\":{\"notice\":\"Event logged when user gets/loses the recovery role.\"},\"RecoveryStorageSlotSet(address,uint256,bytes32,bytes32)\":{\"notice\":\"Event logged when in recovery mode a storage slot is set\"},\"RewardPayoutClaimed(uint256,address,uint256,uint256)\":{\"notice\":\"Event logged when reward payout is claimed\"},\"RewardPayoutCycleEnded(address,uint256)\":{\"notice\":\"Event logged when the reward payout cycle has ended\"},\"RewardPayoutCycleStarted(address,uint256)\":{\"notice\":\"Event logged when a new reward payout cycle has started\"},\"TaskAdded(address,uint256)\":{\"notice\":\"Event logged when a new task is added\"},\"TaskBriefSet(uint256,bytes32)\":{\"notice\":\"Event logged when a task's specification hash changes\"},\"TaskCanceled(uint256)\":{\"notice\":\"Event logged when a task has been canceled\"},\"TaskChangedViaSignatures(address[])\":{\"notice\":\"Event logged when task data is changed via signed messages by those involved\"},\"TaskCompleted(address,uint256)\":{\"notice\":\"Event logged when a task has been completed. This is either because the dueDate has passed and the manager closed the task, or the worker has submitted the deliverable. In the latter case, TaskDeliverableSubmitted will also be emitted.\"},\"TaskDeliverableSubmitted(address,uint256,bytes32)\":{\"notice\":\"Event logged when a deliverable has been submitted for a task\"},\"TaskDueDateSet(uint256,uint256)\":{\"notice\":\"Event logged when a task's due date changes\"},\"TaskFinalized(address,uint256)\":{\"notice\":\"Event logged when a task has been finalized\"},\"TaskPayoutSet(uint256,uint8,address,uint256)\":{\"notice\":\"Event logged when a task payout changes\"},\"TaskRoleUserSet(uint256,uint8,address)\":{\"notice\":\"Event logged when a task's role user changes\"},\"TaskSkillSet(uint256,uint256)\":{\"notice\":\"Event logged when a task's skill changes\"},\"TaskWorkRatingRevealed(address,uint256,uint8,uint8)\":{\"notice\":\"Event logged when the rating of a role was revealed\"},\"TokenUnlocked(address)\":{\"notice\":\"Event emitted when the colony unlocks its native token through the provided function\"},\"TokensBurned(address,address,uint256)\":{\"notice\":\"Event logged when the colony burns tokens\"},\"TokensMinted(address,address,uint256)\":{\"notice\":\"Event logged when tokens are minted\"}},\"kind\":\"user\",\"methods\":{\"addDomain(uint256,uint256,uint256)\":{\"notice\":\"Add a colony domain, and its respective local skill under skill with id `_parentSkillId`. New funding pot is created and associated with the domain here.\"},\"addDomain(uint256,uint256,uint256,string)\":{\"notice\":\"Add a colony domain, and its respective local skill under skill with id `_parentSkillId`. New funding pot is created and associated with the domain here.\"},\"addLocalSkill()\":{\"notice\":\"Add a new local skill for the colony. Secured function to authorised members.\"},\"addPayment(uint256,uint256,address,address,uint256,uint256,uint256)\":{\"notice\":\"Add a new payment in the colony. Secured function to authorised members.\"},\"annotateTransaction(bytes32,string)\":{\"notice\":\"Emit a metadata string for a transaction\"},\"approveExitRecovery()\":{\"notice\":\"Indicate approval to exit recovery mode. Can only be called by user with recovery role.\"},\"approveStake(address,uint256,uint256)\":{\"notice\":\"Allow the _approvee to obligate some amount of tokens as a stake.\"},\"authority()\":{\"notice\":\"Get the `ColonyAuthority` for the colony.\"},\"bootstrapColony(address[],int256[])\":{\"notice\":\"Allows the colony to bootstrap itself by having initial reputation and token `_amount` assigned to `_users`. This reputation is assigned in the colony-wide domain. Secured function to authorised members.\"},\"burnTokens(address,uint256)\":{\"notice\":\"Burn tokens held by the colony. Can only burn tokens held in the root funding pot.\"},\"cancelExpenditure(uint256)\":{\"notice\":\"Cancels the expenditure and prevents further editing. Can only be called by expenditure owner.\"},\"cancelTask(uint256)\":{\"notice\":\"Cancel a task at any point before it is finalized. Secured function to authorised members. Any funds assigned to its funding pot can be moved back to the domain via `IColony.moveFundsBetweenPots`.\"},\"checkNotAdditionalProtectedVariable(uint256)\":{\"notice\":\"Check whether the supplied slot is a protected variable specific to this contract\"},\"claimColonyFunds(address)\":{\"notice\":\"Move any funds received by the colony in `_token` denomination to the top-level domain pot, siphoning off a small amount to the reward pot. If called against a colony's own token, no fee is taken.\"},\"claimExpenditurePayout(uint256,uint256,address)\":{\"notice\":\"Claim the payout for an expenditure slot. Here the network receives a fee from each payout.\"},\"claimPayment(uint256,address)\":{\"notice\":\"Claim the payout in `_token` denomination for payment `_id`. Here the network receives its fee from each payout. Same as for tasks, ether fees go straight to the Meta Colony whereas Token fees go to the Network to be auctioned off.\"},\"claimRewardPayout(uint256,uint256[7],bytes,bytes,uint256,bytes32[])\":{\"notice\":\"Claim the reward payout at `_payoutId`. User needs to provide their reputation and colony-wide reputation which will be proven via Merkle proof inside this function. Can only be called if payout is active, i.e if 60 days have not passed from its creation. Can only be called if next in queue.\"},\"claimTaskPayout(uint256,uint8,address)\":{\"notice\":\"Claim the payout in `_token` denomination for work completed in task `_id` by contributor with role `_role`. Allowed only after task is finalized. Here the network receives its fee from each payout. Ether fees go straight to the Meta Colony whereas Token fees go to the Network to be auctioned off.\"},\"completeTask(uint256)\":{\"notice\":\"Mark a task as complete after the due date has passed. This allows the task to be rated and finalized (and funds recovered) even in the presence of a worker who has disappeared. Note that if the due date was not set, then this function will throw.\"},\"deobligateStake(address,uint256,uint256)\":{\"notice\":\"Deobligate the user some amount of tokens, releasing the stake.\"},\"deprecateDomain(uint256,uint256,uint256,bool)\":{\"notice\":\"Deprecate a domain, preventing certain actions from happening there\"},\"deprecateExtension(bytes32,bool)\":{\"notice\":\"Set the deprecation of an extension in a colony. Secured function to authorised members.\"},\"deprecateLocalSkill(uint256,bool)\":{\"notice\":\"Deprecate a local skill for the colony. Secured function to authorised members.\"},\"editColony(string)\":{\"notice\":\"Called to change the metadata associated with a colony. Expected to be a IPFS hash of a JSON blob, but not enforced to any degree by the contracts\"},\"editColonyByDelta(string)\":{\"notice\":\"Called to change the metadata associated with a colony. Expected to be a IPFS hash of a delta to a JSON blob, but not enforced to any degree by the contracts\"},\"editDomain(uint256,uint256,uint256,string)\":{\"notice\":\"Add a colony domain, and its respective local skill under skill with id `_parentSkillId`. New funding pot is created and associated with the domain here.\"},\"emitDomainReputationPenalty(uint256,uint256,uint256,address,int256)\":{\"notice\":\"Emit a negative domain reputation update. Available only to Arbitration role holders\"},\"emitDomainReputationReward(uint256,address,int256)\":{\"notice\":\"Emit a positive domain reputation update. Available only to Root role holders\"},\"emitSkillReputationPenalty(uint256,address,int256)\":{\"notice\":\"Emit a negative skill reputation update. Available only to Arbitration role holders in the root domain\"},\"emitSkillReputationReward(uint256,address,int256)\":{\"notice\":\"Emit a positive skill reputation update. Available only to Root role holders\"},\"enterRecoveryMode()\":{\"notice\":\"Put colony network mining into recovery mode. Can only be called by user with recovery role.\"},\"executeMetaTransaction(address,bytes,bytes32,bytes32,uint8)\":{\"notice\":\"Executes a metatransaction targeting this contract\"},\"executeTaskChange(uint8[],bytes32[],bytes32[],uint8[],uint256,bytes)\":{\"notice\":\"Executes a task update transaction `_data` which is approved and signed by two of its roles (e.g. manager and worker) using the detached signatures for these users.\"},\"executeTaskRoleAssignment(uint8[],bytes32[],bytes32[],uint8[],uint256,bytes)\":{\"notice\":\"Executes a task role update transaction `_data` which is approved and signed by two of addresses. depending of which function we are calling. Allowed functions are `setTaskManagerRole`, `setTaskEvaluatorRole` and `setTaskWorkerRole`. Upon successful execution the `taskChangeNonces` entry for the task is incremented.\"},\"exitRecoveryMode()\":{\"notice\":\"Exit recovery mode, can be called by anyone if enough whitelist approvals are given.\"},\"finalizeExpenditure(uint256)\":{\"notice\":\"Finalizes the expenditure and allows for funds to be claimed. Can only be called by expenditure owner.\"},\"finalizePayment(uint256,uint256,uint256)\":{\"notice\":\"Finalizes the payment and logs the reputation log updates. Allowed to be called once after payment is fully funded. Secured function to authorised members.\"},\"finalizeRewardPayout(uint256)\":{\"notice\":\"Finalises the reward payout. Allows creation of next reward payouts for token that has been used in `_payoutId`. Can only be called when reward payout cycle is finished i.e when 60 days have passed from its creation.\"},\"finalizeTask(uint256)\":{\"notice\":\"Called after task work rating is complete which closes the task and logs the respective reputation log updates. Allowed to be called once per task. Secured function to authorised members.\"},\"finishUpgrade()\":{\"notice\":\"A function to be called after an upgrade has been done from v2 to v3.\"},\"generateSecret(bytes32,uint256)\":{\"notice\":\"Helper function used to generage consistently the rating secret using salt value `_salt` and value to hide `_value`\"},\"getApproval(address,address,uint256)\":{\"notice\":\"View an approval to obligate tokens.\"},\"getCapabilityRoles(bytes4)\":{\"notice\":\"Gets the bytes32 representation of the roles authorized to call a function\"},\"getColonyNetwork()\":{\"notice\":\"Returns the colony network address set on the Colony.\"},\"getDomain(uint256)\":{\"notice\":\"Get a domain by id.\"},\"getDomainCount()\":{\"notice\":\"Get the number of domains in the colony.\"},\"getDomainFromFundingPot(uint256)\":{\"notice\":\"Get the domain corresponding to a funding pot\"},\"getExpenditure(uint256)\":{\"notice\":\"Returns an existing expenditure.\"},\"getExpenditureCount()\":{\"notice\":\"Get the number of expenditures in the colony.\"},\"getExpenditureSlot(uint256,uint256)\":{\"notice\":\"Returns an existing expenditure slot.\"},\"getExpenditureSlotPayout(uint256,uint256,address)\":{\"notice\":\"Returns an existing expenditure slot's payout for a token.\"},\"getFundingPot(uint256)\":{\"notice\":\"Get the non-mapping properties of a pot by id.\"},\"getFundingPotBalance(uint256,address)\":{\"notice\":\"Get the `_token` balance of pot with id `_potId`.\"},\"getFundingPotCount()\":{\"notice\":\"Get the number of funding pots in the colony.\"},\"getFundingPotPayout(uint256,address)\":{\"notice\":\"Get the assigned `_token` payouts of pot with id `_potId`.\"},\"getMetatransactionNonce(address)\":{\"notice\":\"Gets the next metatransaction nonce for user that should be used targeting this contract\"},\"getNonRewardPotsTotal(address)\":{\"notice\":\"Get the total amount of tokens `_token` minus amount reserved to be paid to the reputation and token holders as rewards.\"},\"getObligation(address,address,uint256)\":{\"notice\":\"View an obligation of tokens.\"},\"getPayment(uint256)\":{\"notice\":\"Returns an exiting payment.\"},\"getPaymentCount()\":{\"notice\":\"Get the number of payments in the colony.\"},\"getRewardInverse()\":{\"notice\":\"Return 1 / the reward to pay out from revenue. e.g. if the fee is 1% (or 0.01), return 100.\"},\"getRewardPayoutInfo(uint256)\":{\"notice\":\"Get useful information about specific reward payout.\"},\"getRootLocalSkill()\":{\"notice\":\"Get the root local skill id\"},\"getTask(uint256)\":{\"notice\":\"Get a task with id `_id`\"},\"getTaskChangeNonce(uint256)\":{\"notice\":\"Starts from 0 and is incremented on every co-reviewed task change via `executeTaskChange` call.\"},\"getTaskCount()\":{\"notice\":\"Get the number of tasks in the colony.\"},\"getTaskPayout(uint256,uint8,address)\":{\"notice\":\"Get payout amount in `_token` denomination for role `_role` in task `_id`.\"},\"getTaskRole(uint256,uint8)\":{\"notice\":\"Get the `Role` properties back for role `_role` in task `_id`.\"},\"getTaskWorkRatingSecret(uint256,uint8)\":{\"notice\":\"Get the rating secret submitted for role `_role` in task `_id`\"},\"getTaskWorkRatingSecretsInfo(uint256)\":{\"notice\":\"Get the `ColonyStorage.RatingSecrets` information for task `_id`.\"},\"getToken()\":{\"notice\":\"Get the colony token.\"},\"getTokenApproval(address,address)\":{\"notice\":\"Get the current approval amount\"},\"getTotalTokenApproval(address)\":{\"notice\":\"Get the current total approval amount across all spenders\"},\"getUserRoles(address,uint256)\":{\"notice\":\"Gets the bytes32 representation of the roles for a user in a given domain\"},\"hasInheritedUserRole(address,uint256,uint8,uint256,uint256)\":{\"notice\":\"Check whether a given user has a given role for the colony, in a child domain. Calls the function of the same name on the colony's authority contract and an internal inheritance validator function\"},\"hasUserRole(address,uint256,uint8)\":{\"notice\":\"Check whether a given user has a given role for the colony. Calls the function of the same name on the colony's authority contract.\"},\"initialiseColony(address,address)\":{\"notice\":\"Called once when the colony is created to initialise certain storage slot values.\"},\"initialiseRootLocalSkill()\":{\"notice\":\"Initialise the local skill tree for the colony.\"},\"installExtension(bytes32,uint256)\":{\"notice\":\"Install an extension to the colony. Secured function to authorised members.\"},\"isInRecoveryMode()\":{\"notice\":\"Is colony network in recovery mode.\"},\"lockExpenditure(uint256)\":{\"notice\":\"Locks the expenditure and prevents further editing. Can only be called by expenditure owner.\"},\"lockToken()\":{\"notice\":\"Lock the colony's token. Can only be called by a network-managed extension.\"},\"makeArbitraryTransaction(address,bytes)\":{\"notice\":\"@deprecatedExecute arbitrary transaction on behalf of the Colony\"},\"makeArbitraryTransactions(address[],bytes[],bool)\":{\"notice\":\"Execute arbitrary transactions on behalf of the Colony in series\"},\"makeExpenditure(uint256,uint256,uint256)\":{\"notice\":\"Add a new expenditure in the colony. Secured function to authorised members.\"},\"makeSingleArbitraryTransaction(address,bytes)\":{\"notice\":\"Executes a single arbitrary transaction\"},\"makeTask(uint256,uint256,bytes32,uint256,uint256,uint256)\":{\"notice\":\"Make a new task in the colony. Secured function to authorised members.\"},\"mintTokens(uint256)\":{\"notice\":\"Mint `_wad` amount of colony tokens. Secured function to authorised members.\"},\"mintTokensFor(address,uint256)\":{\"notice\":\"Mint `_wad` amount of colony tokens and send to `_guy`. Secured function to authorised members.\"},\"moveFundsBetweenPots(uint256,uint256,uint256,uint256,uint256,uint256,address)\":{\"notice\":\"@deprecatedMove a given amount: `_amount` of `_token` funds from funding pot with id `_fromPot` to one with id `_toPot`.\"},\"moveFundsBetweenPots(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address)\":{\"notice\":\"Move a given amount: `_amount` of `_token` funds from funding pot with id `_fromPot` to one with id `_toPot`.\"},\"multicall(bytes[])\":{\"notice\":\"Call multiple functions in the current contract and return the data from all of them if they all succeed\"},\"numRecoveryRoles()\":{\"notice\":\"Return number of recovery roles.\"},\"obligateStake(address,uint256,uint256)\":{\"notice\":\"Obligate the user some amount of tokens as a stake.\"},\"owner()\":{\"notice\":\"Get the colony `owner` address. This should be address(0x0) at all times.\"},\"registerColonyLabel(string,string)\":{\"notice\":\"Register colony's ENS label.\"},\"removeRecoveryRole(address)\":{\"notice\":\"Remove colony recovery role. Can only be called by root role.\"},\"removeTaskEvaluatorRole(uint256)\":{\"notice\":\"Removing evaluator role. Agreed between manager and currently assigned evaluator.\"},\"removeTaskWorkerRole(uint256)\":{\"notice\":\"Removing worker role. Agreed between manager and currently assigned worker.\"},\"revealTaskWorkRating(uint256,uint8,uint8,bytes32)\":{\"notice\":\"Reveal the secret rating submitted in `IColony.submitTaskWorkRating` for task `_id` and task role with id `_role`. Allowed within 5 days period starting which whichever is first from either both rating secrets being submitted (via `IColony.submitTaskWorkRating`) or the 5 day rating period expiring.\"},\"setAdministrationRole(uint256,uint256,address,uint256,bool)\":{\"notice\":\"Set new colony admin role. Can be called by root role or architecture role.\"},\"setAllTaskPayouts(uint256,address,uint256,uint256,uint256)\":{\"notice\":\"Set `_token` payout for all roles in task `_id` to the respective amounts.\"},\"setArbitrationRole(uint256,uint256,address,uint256,bool)\":{\"notice\":\"Set new colony arbitration role. Can be called by root role or architecture role.\"},\"setArchitectureRole(uint256,uint256,address,uint256,bool)\":{\"notice\":\"Set new colony architecture role. Can be called by root role or architecture role.\"},\"setDefaultGlobalClaimDelay(uint256)\":{\"notice\":\"Update the default global claim delay for expenditures\"},\"setExpenditureClaimDelay(uint256,uint256,uint256)\":{\"notice\":\"@deprecatedSets the claim delay on an expenditure slot. Can only be called by expenditure owner.\"},\"setExpenditureClaimDelays(uint256,uint256[],uint256[])\":{\"notice\":\"Sets the claim delays in given expenditure slots. Can only be called by expenditure owner.\"},\"setExpenditureMetadata(uint256,string)\":{\"notice\":\"Sets the metadata for an expenditure. Can only be called by expenditure owner.\"},\"setExpenditureMetadata(uint256,uint256,uint256,string)\":{\"notice\":\"Sets the metadata for an expenditure. Can only be called by Arbitration role.\"},\"setExpenditurePayout(uint256,uint256,address,uint256)\":{\"notice\":\"@deprecatedSet the token payout on an expenditure slot. Can only be called by expenditure owner.\"},\"setExpenditurePayout(uint256,uint256,uint256,uint256,address,uint256)\":{\"notice\":\"Set the token payout in a given expenditure slot. Can only be called by an Arbitration user.\"},\"setExpenditurePayoutModifiers(uint256,uint256[],int256[])\":{\"notice\":\"Sets the payout modifiers in given expenditure slots. Can only be called by expenditure owner.\"},\"setExpenditurePayouts(uint256,uint256[],address,uint256[])\":{\"notice\":\"Set the token payouts in given expenditure slots. Can only be called by expenditure owner.\"},\"setExpenditureRecipient(uint256,uint256,address)\":{\"notice\":\"@deprecatedSets the recipient on an expenditure slot. Can only be called by expenditure owner.\"},\"setExpenditureRecipients(uint256,uint256[],address[])\":{\"notice\":\"Sets the recipients in given expenditure slots. Can only be called by expenditure owner.\"},\"setExpenditureSkill(uint256,uint256,uint256)\":{\"notice\":\"@deprecatedSets the skill on an expenditure slot. Can only be called by expenditure owner.\"},\"setExpenditureSkills(uint256,uint256[],uint256[])\":{\"notice\":\"Sets the skill on an expenditure slot. Can only be called by expenditure owner.\"},\"setExpenditureState(uint256,uint256,uint256,uint256,bool[],bytes32[],bytes32)\":{\"notice\":\"Set arbitrary state on an expenditure slot. Can only be called by Arbitration role.\"},\"setExpenditureValues(uint256,uint256[],address[],uint256[],uint256[],uint256[],uint256[],uint256[],int256[],address[],uint256[][],uint256[][])\":{\"notice\":\"Set many values of an expenditure simultaneously. Can only be called by expenditure owner.\"},\"setFundingRole(uint256,uint256,address,uint256,bool)\":{\"notice\":\"Set new colony funding role. Can be called by root role or architecture role.\"},\"setPaymentPayout(uint256,uint256,uint256,address,uint256)\":{\"notice\":\"Sets the payout for a given token on an existing payment. Secured function to authorised members.\"},\"setPaymentRecipient(uint256,uint256,uint256,address)\":{\"notice\":\"Sets the recipient on an existing payment. Secured function to authorised members.\"},\"setPaymentSkill(uint256,uint256,uint256,uint256)\":{\"notice\":\"Sets the skill on an existing payment. Secured function to authorised members.\"},\"setRecoveryRole(address)\":{\"notice\":\"Set new colony recovery role. Can be called by root.\"},\"setRewardInverse(uint256)\":{\"notice\":\"Set the reward inverse to pay out from revenue. e.g. if the fee is 1% (or 0.01), set 100.\"},\"setRootRole(address,bool)\":{\"notice\":\"Set new colony root role. Can be called by root role only.\"},\"setStorageSlotRecovery(uint256,bytes32)\":{\"notice\":\"Update value of arbitrary storage variable. Can only be called by user with recovery role.\"},\"setTaskBrief(uint256,bytes32)\":{\"notice\":\"Set the hash for the task brief, aka task work specification, which identifies the task brief content in ddb. Allowed before a task is finalized.\"},\"setTaskDueDate(uint256,uint256)\":{\"notice\":\"Set the due date on task `_id`. Allowed before a task is finalized.\"},\"setTaskEvaluatorPayout(uint256,address,uint256)\":{\"notice\":\"Set `_token` payout for evaluator in task `_id` to `_amount`.\"},\"setTaskEvaluatorRole(uint256,address)\":{\"notice\":\"Assigning evaluator role. Can only be set if there is no one currently assigned to be an evaluator. Manager of the task and user we want to assign role to both need to agree. Managers can assign themselves to this role, if there is no one currently assigned to it.\"},\"setTaskManagerPayout(uint256,address,uint256)\":{\"notice\":\"Set `_token` payout for manager in task `_id` to `_amount`.\"},\"setTaskManagerRole(uint256,address,uint256,uint256)\":{\"notice\":\"Assigning manager role. Current manager and user we want to assign role to both need to agree. User we want to set here also needs to be an admin. Note that the domain proof data comes at the end here to not interfere with the assembly argument unpacking.\"},\"setTaskSkill(uint256,uint256)\":{\"notice\":\"Set the skill for task `_id`.\"},\"setTaskWorkerPayout(uint256,address,uint256)\":{\"notice\":\"Set `_token` payout for worker in task `_id` to `_amount`.\"},\"setTaskWorkerRole(uint256,address)\":{\"notice\":\"Assigning worker role. Can only be set if there is no one currently assigned to be a worker. Manager of the task and user we want to assign role to both need to agree.\"},\"setUserRoles(uint256,uint256,address,uint256,bytes32)\":{\"notice\":\"Set several roles in one transaction. Can be called by root role or architecture role.\"},\"startNextRewardPayout(address,bytes,bytes,uint256,bytes32[])\":{\"notice\":\"Start next reward payout for `_token`. All funds in the reward pot for `_token` will become unavailable.Add a new payment in the colony. Can only be called by users with root permission. All tokens will be locked, and can be unlocked by calling `waiveRewardPayout` or `claimRewardPayout`.\"},\"submitTaskDeliverable(uint256,bytes32)\":{\"notice\":\"Submit the task deliverable, i.e. the output of the work performed for task `_id`. Submission is allowed only to the assigned worker before the task due date. Submissions cannot be overwritten.\"},\"submitTaskDeliverableAndRating(uint256,bytes32,bytes32)\":{\"notice\":\"Submit the task deliverable for Worker and rating for Manager.\"},\"submitTaskWorkRating(uint256,uint8,bytes32)\":{\"notice\":\"Submit a hashed secret of the rating for work in task `_id` which was performed by user with task role id `_role`. Allowed within 5 days period starting which whichever is first from either the deliverable being submitted or the dueDate been reached. Allowed only for evaluator to rate worker and for worker to rate manager performance. Once submitted ratings can not be changed or overwritten.\"},\"transferExpenditure(uint256,address)\":{\"notice\":\"Updates the expenditure owner. Can only be called by expenditure owner.\"},\"transferExpenditureViaArbitration(uint256,uint256,uint256,address)\":{\"notice\":\"@deprecatedUpdates the expenditure owner. Can only be called by Arbitration role.\"},\"transferStake(uint256,uint256,address,address,uint256,uint256,address)\":{\"notice\":\"Transfer some amount of obligated tokens. Can be called by the arbitration role.\"},\"uninstallExtension(bytes32)\":{\"notice\":\"Uninstall an extension from a colony. Secured function to authorised members.\"},\"unlockToken()\":{\"notice\":\"unlock the native colony token, if possible\"},\"unlockTokenForUser(address,uint256)\":{\"notice\":\"Unlock the colony's token for a user. Can only be called by a network-managed extension.\"},\"updateApprovalAmount(address,address)\":{\"notice\":\"Update the internal bookkeeping around external ERC20 approvals\"},\"updateColonyOrbitDB(string)\":{\"notice\":\"Update a colony's orbitdb address. Can only be called by a colony with a registered subdomain\"},\"upgrade(uint256)\":{\"notice\":\"Upgrades a colony to a new Colony contract version `_newVersion`.\"},\"upgradeExtension(bytes32,uint256)\":{\"notice\":\"Upgrade an extension in a colony. Secured function to authorised members.\"},\"userCanSetRoles(address,uint256,uint256,uint256)\":{\"notice\":\"Check whether a given user can modify roles in the target domain `_childDomainId`. Mostly a convenience function to provide a uniform interface for extension contracts validating permissions\"},\"verifyReputationProof(bytes,bytes,uint256,bytes32[])\":{\"notice\":\"Helper function that can be used by a client to verify the correctness of a patricia proof they have been supplied with.\"},\"version()\":{\"notice\":\"Get the Colony contract version. Starts from 1 and is incremented with every deployed contract change.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"project:/contracts/colony/IColony.sol\":\"IColony\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"project:/contracts/colony/ColonyDataTypes.sol\":{\"keccak256\":\"0x50c4a23cdbf96e16401cf58934da7cbc1ff3e6daed14ea879c83fba041030a4a\",\"urls\":[\"bzz-raw://947440b5dc885b64a5598e942c6591f2b2429250ed3f5b83b87093b51ffaff69\",\"dweb:/ipfs/QmZwFGzXeoFb4nxwxywkXicmBzGa9LhnQoZL3SQZqyJvG2\"]},\"project:/contracts/colony/IColony.sol\":{\"keccak256\":\"0xe4e2c9d84118a45717a6d982af48ee5f8671033cfa21c160e670df4d68b3efa9\",\"urls\":[\"bzz-raw://4fec75a5555d1886bef480c4b33df6b6cdfeb9cbcffc350b54e4f477372dc871\",\"dweb:/ipfs/QmZsGEwSSGeRE8EDPS8qXSqxsE7LTr5Gt3QqHv6JQv9UXR\"]},\"project:/contracts/common/ContractRecoveryDataTypes.sol\":{\"keccak256\":\"0x49bde7b21cc15fb7e2c3a19389d0d3997e95d676aec3aad17e1e34e6b8ac8e52\",\"urls\":[\"bzz-raw://0f7ee2da03ca688614df9cdb43a5d401aeeb30a769a70fe2f494d87163135fae\",\"dweb:/ipfs/QmcbxRHhjf2PRNmcEujFa6i9JTpcE2srsuatsbAnJA1ncs\"]},\"project:/contracts/common/IBasicMetaTransaction.sol\":{\"keccak256\":\"0xcc4773c97fabcb33c589ee8baf4e4d689fd2fd926237858f0d3b8ae436152ff7\",\"urls\":[\"bzz-raw://e6c1d3c42ed5cd05772ff273feae1dd8747989a33b786aae95eb348a7234ba55\",\"dweb:/ipfs/QmQhytkFVayDCLTkLmrJJKA8itE5zMsJXNA4JNG86wNS4p\"]},\"project:/contracts/common/IMulticall.sol\":{\"keccak256\":\"0x7e8c4a534e5e1d8624ffdf938efb0aa86cb16149f685e724166f3d4d60391fce\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://22b38dcfb4ef99545bde9d31fd6f36b69d7f4deea29e5114059194a84e5af505\",\"dweb:/ipfs/QmNRgEekDp6JW1a4SrKJJrCXpzr5JYM7JaD97KE7xyyPVv\"]},\"project:/contracts/common/IRecovery.sol\":{\"keccak256\":\"0x66afd695a100b0dd3566d8d10d0685c312b7af79da64eca0963a19071a770ec0\",\"urls\":[\"bzz-raw://79f620ad786840f72dbf5673c80fc36cde48c37d47cf74ece0d6053ed5ad9ec3\",\"dweb:/ipfs/QmXFKUDfjjpYuPkzEcduoA71Pg1x1zVQ26srXKyzcv2tCr\"]}},\"version\":1}","bytecode":"0x","deployedBytecode":"0x","immutableReferences":{},"generatedSources":[],"deployedGeneratedSources":[],"sourceMap":"","deployedSourceMap":"","source":"/*\n  This file is part of The Colony Network.\n\n  The Colony Network is free software: you can redistribute it and/or modify\n  it under the terms of the GNU General Public License as published by\n  the Free Software Foundation, either version 3 of the License, or\n  (at your option) any later version.\n\n  The Colony Network is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n  GNU General Public License for more details.\n\n  You should have received a copy of the GNU General Public License\n  along with The Colony Network. If not, see <http://www.gnu.org/licenses/>.\n*/\n\npragma solidity >=0.8.20; // ignore-swc-103\npragma experimental ABIEncoderV2;\n\nimport \"./../common/IRecovery.sol\";\nimport \"./../common/IBasicMetaTransaction.sol\";\nimport \"./../common/IMulticall.sol\";\nimport \"./ColonyDataTypes.sol\";\n\n\ninterface IColony is ColonyDataTypes, IRecovery, IBasicMetaTransaction, IMulticall {\n  // Implemented in DSAuth.sol\n  /// @notice Get the `ColonyAuthority` for the colony.\n  /// @return colonyAuthority The `ColonyAuthority` contract address\n  function authority() external view returns (address colonyAuthority);\n\n  /// @notice Get the colony `owner` address. This should be address(0x0) at all times.\n  /// @dev Used for testing.\n  /// @return colonyOwner Address of the colony owner\n  function owner() external view returns (address colonyOwner);\n\n  // Implemented in Colony.sol\n  /// @notice Get the Colony contract version.\n  /// Starts from 1 and is incremented with every deployed contract change.\n  /// @return colonyVersion Version number\n  function version() external pure returns (uint256 colonyVersion);\n\n  /// @notice Upgrades a colony to a new Colony contract version `_newVersion`.\n  /// @dev Downgrades are not allowed, i.e. `_newVersion` should be higher than the currect colony version.\n  /// @param _newVersion The target version for the upgrade\n  function upgrade(uint _newVersion) external;\n\n  /// @notice A function to be called after an upgrade has been done from v2 to v3.\n  /// @dev Can only be called by the colony itself, and only expected to be called as part of the `upgrade()` call. Required to\n  /// be external so it can be an external call.\n  function finishUpgrade() external;\n\n  /// @notice Returns the colony network address set on the Colony.\n  /// @dev The colonyNetworkAddress we read here is set once, during `initialiseColony`.\n  /// @return colonyNetwork The address of Colony Network instance\n  function getColonyNetwork() external view returns (address colonyNetwork);\n\n  /// @notice Get the colony token.\n  /// @return tokenAddress Address of the token contract\n  function getToken() external view returns (address tokenAddress);\n\n  /// @notice @deprecated\n  /// @notice Execute arbitrary transaction on behalf of the Colony\n  /// @param _to Contract to receive the function call (cannot be this contract, network or token locking)\n  /// @param _action Bytes array encoding the function call and arguments\n  /// @return success Boolean indicating whether the transaction succeeded\n  function makeArbitraryTransaction(address _to, bytes memory _action) external returns (bool success);\n\n  /// @notice Execute arbitrary transactions on behalf of the Colony in series\n  /// @param _targets Array of addressed to be targeted\n  /// @param _actions Array of Bytes arrays encoding the function calls and arguments\n  /// @param _strict Boolean indicating whether if one transaction fails, the whole call to this function should fail.\n  /// @return success Boolean indicating whether the transactions succeeded\n  function makeArbitraryTransactions(address[] memory _targets, bytes[] memory _actions, bool _strict) external returns (bool success);\n\n  /// @notice Executes a single arbitrary transaction\n  /// @dev Only callable by the colony itself. If you wish to use this functionality, you should\n  /// use the makeAbitraryTransactions function\n  /// @param _target Contract to receive the function call\n  /// @param _action Bytes array encoding the function call and arguments\n  /// @return success Boolean indicating whether the transactions succeeded\n  function makeSingleArbitraryTransaction(address _target, bytes memory _action) external returns (bool success);\n\n  /// @notice Emit a metadata string for a transaction\n  /// @param _txHash Hash of transaction being annotated (0x0 for current tx)\n  /// @param _metadata String of metadata for tx\n  function annotateTransaction(bytes32 _txHash, string memory _metadata) external;\n\n  /// @notice Set new colony root role.\n  /// Can be called by root role only.\n  /// @param _user User we want to give an root role to\n  /// @param _setTo The state of the role permission (true assign the permission, false revokes it)\n  function setRootRole(address _user, bool _setTo) external;\n\n  /// @notice Set new colony arbitration role.\n  /// Can be called by root role or architecture role.\n  /// @param _permissionDomainId Domain in which the caller has root role\n  /// @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`\n  /// @param _user User we want to give an arbitration role to\n  /// @param _domainId Domain in which we are giving user the role\n  /// @param _setTo The state of the role permission (true assign the permission, false revokes it)\n  function setArbitrationRole(uint256 _permissionDomainId, uint256 _childSkillIndex, address _user, uint256 _domainId, bool _setTo) external;\n\n  /// @notice Set new colony architecture role.\n  /// Can be called by root role or architecture role.\n  /// @param _permissionDomainId Domain in which the caller has root/architecture role\n  /// @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`\n  /// @param _user User we want to give an architecture role to\n  /// @param _domainId Domain in which we are giving user the role\n  /// @param _setTo The state of the role permission (true assign the permission, false revokes it)\n  function setArchitectureRole(uint256 _permissionDomainId, uint256 _childSkillIndex, address _user, uint256 _domainId, bool _setTo) external;\n\n  /// @notice Set new colony funding role.\n  /// Can be called by root role or architecture role.\n  /// @param _permissionDomainId Domain in which the caller has root/architecture role\n  /// @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`\n  /// @param _user User we want to give an funding role to\n  /// @param _domainId Domain in which we are giving user the role\n  /// @param _setTo The state of the role permission (true assign the permission, false revokes it)\n  function setFundingRole(uint256 _permissionDomainId, uint256 _childSkillIndex, address _user, uint256 _domainId, bool _setTo) external;\n\n  /// @notice Set new colony admin role.\n  /// Can be called by root role or architecture role.\n  /// @param _permissionDomainId Domain in which the caller has root/architecture role\n  /// @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`\n  /// @param _user User we want to give an admin role to\n  /// @param _domainId Domain in which we are giving user the role\n  /// @param _setTo The state of the role permission (true assign the permission, false revokes it)\n  function setAdministrationRole(uint256 _permissionDomainId, uint256 _childSkillIndex, address _user, uint256 _domainId, bool _setTo) external;\n\n  /// @notice Set several roles in one transaction.\n  /// Can be called by root role or architecture role.\n  /// @param _permissionDomainId Domain in which the caller has root/architecture role\n  /// @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`\n  /// @param _user User we want to give a role to\n  /// @param _domainId Domain in which we are giving user the role\n  /// @param _roles Byte array representing the desired role setting (1 for on, 0 for off)\n  function setUserRoles(\n    uint256 _permissionDomainId,\n    uint256 _childSkillIndex,\n    address _user,\n    uint256 _domainId,\n    bytes32 _roles\n    ) external;\n\n  /// @notice Check whether a given user has a given role for the colony.\n  /// Calls the function of the same name on the colony's authority contract.\n  /// @param _user The user whose role we want to check\n  /// @param _domainId The domain where we want to check for the role\n  /// @param _role The role we want to check for\n  /// @return hasRole Boolean indicating whether the given user has the given role in domain\n  function hasUserRole(address _user, uint256 _domainId, ColonyRole _role) external view returns (bool hasRole);\n\n  /// @notice Check whether a given user has a given role for the colony, in a child domain.\n  /// Calls the function of the same name on the colony's authority contract and an internal inheritance validator function\n  /// @param _user The user whose role we want to check\n  /// @param _domainId Domain in which the caller has the role\n  /// @param _role The role we want to check for\n  /// @param _childSkillIndex The index that the `_childDomainId` is relative to `_domainId`\n  /// @param _childDomainId The domain where we want to use the role\n  /// @return hasRole Boolean indicating whether the given user has the given role in domain\n  function hasInheritedUserRole(address _user, uint256 _domainId, ColonyRole _role, uint256 _childSkillIndex, uint256 _childDomainId)\n    external view returns (bool hasRole);\n\n  /// @notice Check whether a given user can modify roles in the target domain `_childDomainId`.\n  /// Mostly a convenience function to provide a uniform interface for extension contracts validating permissions\n  /// @param _user The user whose permissions we want to check\n  /// @param _domainId Domain in which the caller has the role (currently Root or Architecture)\n  /// @param _childSkillIndex The index that the `_childDomainId` is relative to `_domainId`\n  /// @param _childDomainId The domain where we want to edit roles\n  /// @return canSet Boolean indicating whether the given user is allowed to edit roles in the target domain.\n  function userCanSetRoles(address _user, uint256 _domainId, uint256 _childSkillIndex, uint256 _childDomainId)\n    external view returns (bool canSet);\n\n  /// @notice Gets the bytes32 representation of the roles for a user in a given domain\n  /// @param _user The user whose roles we want to get\n  /// @param _domain The domain we want to get roles in\n  /// @return roles bytes32 representation of the held roles\n  function getUserRoles(address _user, uint256 _domain) external view returns (bytes32 roles);\n\n  /// @notice Gets the bytes32 representation of the roles authorized to call a function\n  /// @param _sig The function signature\n  /// @return roles bytes32 representation of the authorized roles\n  function getCapabilityRoles(bytes4 _sig) external view returns (bytes32 roles);\n\n  /// @notice Emit a positive domain reputation update. Available only to Root role holders\n  /// @param _domainId The domain where the user will gain reputation\n  /// @param _user The user who will gain reputation\n  /// @param _amount The (positive) amount of reputation to gain\n  function emitDomainReputationReward(uint256 _domainId, address _user, int256 _amount) external;\n\n  /// @notice Emit a positive skill reputation update. Available only to Root role holders\n  /// @param _skillId The skill where the user will gain reputation\n  /// @param _user The user who will gain reputation\n  /// @param _amount The (positive) amount of reputation to gain\n  function emitSkillReputationReward(uint256 _skillId, address _user, int256 _amount) external;\n\n  /// @notice Emit a negative domain reputation update. Available only to Arbitration role holders\n  /// @param _permissionDomainId The domainId in which I hold the Arbitration role\n  /// @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`\n  /// @param _domainId The domain where the user will lose reputation\n  /// @param _user The user who will lose reputation\n  /// @param _amount The (negative) amount of reputation to lose\n  function emitDomainReputationPenalty(\n    uint256 _permissionDomainId,\n    uint256 _childSkillIndex,\n    uint256 _domainId,\n    address _user,\n    int256 _amount\n    ) external;\n\n  /// @notice Emit a negative skill reputation update. Available only to Arbitration role holders in the root domain\n  /// @param _skillId The skill where the user will lose reputation\n  /// @param _user The user who will lose reputation\n  /// @param _amount The (negative) amount of reputation to lose\n  function emitSkillReputationPenalty(uint256 _skillId, address _user, int256 _amount) external;\n\n  /// @notice Called once when the colony is created to initialise certain storage slot values.\n  /// @dev Sets the reward inverse to the uint max 2**256 - 1.\n  /// @param _colonyNetworkAddress Address of the colony network\n  /// @param _token Address of the colony ERC20 Token\n  function initialiseColony(address _colonyNetworkAddress, address _token) external;\n\n  /// @notice Called to change the metadata associated with a colony. Expected to be a IPFS hash of a\n  /// JSON blob, but not enforced to any degree by the contracts\n  /// @param _metadata IPFS hash of the metadata\n  function editColony(string memory _metadata) external;\n\n  /// @notice Called to change the metadata associated with a colony. Expected to be a IPFS hash of a\n  /// delta to a JSON blob, but not enforced to any degree by the contracts\n  /// @param _metadataDelta IPFS hash of the metadata delta\n  function editColonyByDelta(string memory _metadataDelta) external;\n\n  /// @notice Allows the colony to bootstrap itself by having initial reputation and token `_amount` assigned to `_users`.\n  /// This reputation is assigned in the colony-wide domain. Secured function to authorised members.\n  /// @dev Only allowed to be called when `taskCount` is `0` by authorized addresses.\n  /// @param _users Array of address to bootstrap with reputation\n  /// @param _amount Amount of reputation/tokens for every address\n  function bootstrapColony(address[] memory _users, int[] memory _amount) external;\n\n  /// @notice Mint `_wad` amount of colony tokens. Secured function to authorised members.\n  /// @param _wad Amount to mint\n  function mintTokens(uint256 _wad) external;\n\n  /// @notice Mint `_wad` amount of colony tokens and send to `_guy`. Secured function to authorised members.\n  /// @param _guy Recipient of new tokens\n  /// @param _wad Amount to mint\n  function mintTokensFor(address _guy, uint256 _wad) external;\n\n  /// @notice Lock the colony's token. Can only be called by a network-managed extension.\n  /// @return timesLocked The amount of times the token was locked\n  function lockToken() external returns (uint256 timesLocked);\n\n  /// @notice Unlock the colony's token for a user. Can only be called by a network-managed extension.\n  /// @param user The user to unlock\n  /// @param lockId The specific lock to unlock\n  function unlockTokenForUser(address user, uint256 lockId) external;\n\n  /// @notice Register colony's ENS label.\n  /// @param colonyName The label to register.\n  /// @param orbitdb The path of the orbitDB database associated with the colony name\n  function registerColonyLabel(string memory colonyName, string memory orbitdb) external;\n\n  /// @notice Update a colony's orbitdb address. Can only be called by a colony with a registered subdomain\n  /// @param orbitdb The path of the orbitDB database to be associated with the colony\n  function updateColonyOrbitDB(string memory orbitdb) external;\n\n  /// @notice Install an extension to the colony. Secured function to authorised members.\n  /// @param extensionId keccak256 hash of the extension name, used as an indentifier\n  /// @param version The new extension version to install\n  function installExtension(bytes32 extensionId, uint256 version) external;\n\n  /// @notice Upgrade an extension in a colony. Secured function to authorised members.\n  /// @param extensionId keccak256 hash of the extension name, used as an indentifier\n  /// @param newVersion The version to upgrade to (must be one larger than the current version)\n  function upgradeExtension(bytes32 extensionId, uint256 newVersion) external;\n\n  /// @notice Set the deprecation of an extension in a colony. Secured function to authorised members.\n  /// @param extensionId keccak256 hash of the extension name, used as an indentifier\n  /// @param deprecated Whether to deprecate the extension or not\n  function deprecateExtension(bytes32 extensionId, bool deprecated) external;\n\n  /// @notice Uninstall an extension from a colony. Secured function to authorised members.\n  /// @dev This is a permanent action -- re-installing the extension will deploy a new contract\n  /// @dev It is recommended to deprecate an extension before uninstalling to allow active objects to be resolved\n  /// @param extensionId keccak256 hash of the extension name, used as an indentifier\n  function uninstallExtension(bytes32 extensionId) external;\n\n  /// @notice Initialise the local skill tree for the colony.\n  function initialiseRootLocalSkill() external;\n\n  /// @notice Add a new local skill for the colony. Secured function to authorised members.\n  function addLocalSkill() external;\n\n  /// @notice Deprecate a local skill for the colony. Secured function to authorised members.\n  /// @param localSkillId Id for the local skill\n  /// @param deprecated Deprecation status to set for the skill\n  function deprecateLocalSkill(uint256 localSkillId, bool deprecated) external;\n\n  /// @notice Get the root local skill id\n  /// @return rootLocalSkill The root local skill id\n  function getRootLocalSkill() external view returns (uint256 rootLocalSkill);\n\n  /// @notice Add a colony domain, and its respective local skill under skill with id `_parentSkillId`.\n  /// New funding pot is created and associated with the domain here.\n  /// @param _permissionDomainId The domainId in which I have the permission to take this action\n  /// @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`\n  /// @param _parentDomainId Id of the domain under which the new one will be added\n  /// @dev Adding new domains is currently retricted to one level only, i.e. `_parentDomainId` has to be the root domain id: `1`.\n  function addDomain(uint256 _permissionDomainId, uint256 _childSkillIndex, uint256 _parentDomainId) external;\n\n  /// @notice Add a colony domain, and its respective local skill under skill with id `_parentSkillId`.\n  /// New funding pot is created and associated with the domain here.\n  /// @param _permissionDomainId The domainId in which I have the permission to take this action\n  /// @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`\n  /// @param _parentDomainId Id of the domain under which the new one will be added\n  /// @param _metadata Metadata relating to the domain. Expected to be the IPFS hash of a JSON blob, but not enforced by the contracts.\n  /// @dev Adding new domains is currently retricted to one level only, i.e. `_parentDomainId` has to be the root domain id: `1`.\n  /// @dev We expect this function to only be used by the dapp\n  function addDomain(uint256 _permissionDomainId, uint256 _childSkillIndex, uint256 _parentDomainId, string memory _metadata) external;\n\n  /// @notice Add a colony domain, and its respective local skill under skill with id `_parentSkillId`.\n  /// New funding pot is created and associated with the domain here.\n  /// @param _permissionDomainId The domainId in which I have the permission to take this action\n  /// @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`\n  /// @param _domainId Id of the domain being edited\n  /// @param _metadata Metadata relating to the domain. Expected to be the IPFS hash of a JSON blob, but not enforced by the contracts.\n  function editDomain(uint256 _permissionDomainId, uint256 _childSkillIndex, uint256 _domainId, string memory _metadata) external;\n\n  /// @notice Deprecate a domain, preventing certain actions from happening there\n  /// @param _permissionDomainId The domainId in which I have the permission to take this action\n  /// @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`\n  /// @param _domainId Id of the domain being deprecated\n  /// @param _deprecated Whether or not the domain is deprecated\n  function deprecateDomain(uint256 _permissionDomainId, uint256 _childSkillIndex, uint256 _domainId, bool _deprecated) external;\n\n  /// @notice Get a domain by id.\n  /// @param _id Id of the domain which details to get\n  /// @return domain The domain\n  function getDomain(uint256 _id) external view returns (Domain memory domain);\n\n  /// @notice Get the number of domains in the colony.\n  /// @return count The domain count. Min 1 as the root domain is created at the same time as the colony\n  function getDomainCount() external view returns (uint256 count);\n\n  /// @notice Helper function that can be used by a client to verify the correctness of a patricia proof they have been supplied with.\n  /// @param key The key of the element the proof is for.\n  /// @param value The value of the element that the proof is for.\n  /// @param branchMask The branchmask of the proof\n  /// @param siblings The siblings of the proof\n  /// @return isValid True if the proof is valid, false otherwise.\n  /// @dev For more detail about branchMask and siblings, examine the PatriciaTree implementation.\n  /// While external, likely only to be used by the Colony contracts, as it checks that the user is proving their own\n  /// reputation in the current colony. The `verifyProof` function can be used to verify any proof, though this function\n  /// is not currently exposed on the Colony's EtherRouter.\n  function verifyReputationProof(bytes memory key, bytes memory value, uint256 branchMask, bytes32[] memory siblings)\n    external view returns (bool isValid);\n\n  // Implemented in ColonyExpenditure.sol\n\n  /// @notice Update the default global claim delay for expenditures\n  /// @param _globalClaimDelay The new default global claim delay\n  function setDefaultGlobalClaimDelay(uint256 _globalClaimDelay) external;\n\n  /// @notice Add a new expenditure in the colony. Secured function to authorised members.\n  /// @param _permissionDomainId The domainId in which I have the permission to take this action\n  /// @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`,\n  /// (only used if `_permissionDomainId` is different to `_domainId`)\n  /// @param _domainId The domain where the expenditure belongs\n  /// @return expenditureId Identifier of the newly created expenditure\n  function makeExpenditure(uint256 _permissionDomainId, uint256 _childSkillIndex, uint256 _domainId) external returns (uint256 expenditureId);\n\n  /// @notice Updates the expenditure owner. Can only be called by expenditure owner.\n  /// @param _id Expenditure identifier\n  /// @param _newOwner New owner of expenditure\n  function transferExpenditure(uint256 _id, address _newOwner) external;\n\n  /// @notice @deprecated\n  /// @notice Updates the expenditure owner. Can only be called by Arbitration role.\n  /// @dev This is now deprecated and will be removed in a future version\n  /// @param _permissionDomainId The domainId in which I have the permission to take this action\n  /// @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`,\n  /// (only used if `_permissionDomainId` is different to `_domainId`)\n  /// @param _id Expenditure identifier\n  /// @param _newOwner New owner of expenditure\n  function transferExpenditureViaArbitration(uint256 _permissionDomainId, uint256 _childSkillIndex, uint256 _id, address _newOwner) external;\n\n  /// @notice Cancels the expenditure and prevents further editing. Can only be called by expenditure owner.\n  /// @param _id Expenditure identifier\n  function cancelExpenditure(uint256 _id) external;\n\n  /// @notice Locks the expenditure and prevents further editing. Can only be called by expenditure owner.\n  /// @param _id Expenditure identifier\n  function lockExpenditure(uint256 _id) external;\n\n  /// @notice Finalizes the expenditure and allows for funds to be claimed. Can only be called by expenditure owner.\n  /// @param _id Expenditure identifier\n  function finalizeExpenditure(uint256 _id) external;\n\n  /// @notice Sets the metadata for an expenditure. Can only be called by expenditure owner.\n  /// @dev Can only be called while expenditure is in draft state.\n  /// @param _id Id of the expenditure\n  /// @param _metadata IPFS hash of the metadata\n  function setExpenditureMetadata(uint256 _id, string memory _metadata) external;\n\n  /// @notice Sets the metadata for an expenditure. Can only be called by Arbitration role.\n  /// @param _permissionDomainId The domainId in which I have the permission to take this action\n  /// @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`,\n  /// @param _id Id of the expenditure\n  /// @param _metadata IPFS hash of the metadata\n  function setExpenditureMetadata(uint256 _permissionDomainId, uint256 _childSkillIndex, uint256 _id, string memory _metadata) external;\n\n  /// @notice @deprecated\n  /// @notice Sets the recipient on an expenditure slot. Can only be called by expenditure owner.\n  /// @dev Can only be called while expenditure is in draft state.\n  /// @param _id Id of the expenditure\n  /// @param _slot Slot for the recipient address\n  /// @param _recipient Address of the recipient\n  function setExpenditureRecipient(uint256 _id, uint256 _slot, address payable _recipient) external;\n\n  /// @notice Sets the recipients in given expenditure slots. Can only be called by expenditure owner.\n  /// @dev Can only be called while expenditure is in draft state.\n  /// @param _id Id of the expenditure\n  /// @param _slots Array of slots to set recipients\n  /// @param _recipients Addresses of the recipients\n  function setExpenditureRecipients(uint256 _id, uint256[] memory _slots, address payable[] memory _recipients) external;\n\n  /// @notice @deprecated\n  /// @notice Set the token payout on an expenditure slot. Can only be called by expenditure owner.\n  /// @dev Can only be called while expenditure is in draft state.\n  /// @param _id Id of the expenditure\n  /// @param _slot Number of the slot\n  /// @param _token Address of the token, `0x0` value indicates Ether\n  /// @param _amount Payout amount\n  function setExpenditurePayout(uint256 _id, uint256 _slot, address _token, uint256 _amount) external;\n\n  /// @notice Set the token payouts in given expenditure slots. Can only be called by expenditure owner.\n  /// @dev Can only be called while expenditure is in draft state.\n  /// @param _id Id of the expenditure\n  /// @param _slots Array of slots to set payouts\n  /// @param _token Address of the token, `0x0` value indicates Ether\n  /// @param _amounts Payout amounts\n  function setExpenditurePayouts(uint256 _id, uint256[] memory _slots, address _token, uint256[] memory _amounts) external;\n\n  /// @notice Set the token payout in a given expenditure slot. Can only be called by an Arbitration user.\n  /// @param _permissionDomainId The domainId in which I have the permission to take this action\n  /// @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`\n  /// @param _id Id of the expenditure\n  /// @param _slot The slot to set the payout\n  /// @param _token Address of the token, `0x0` value indicates Ether\n  /// @param _amount Payout amount\n  function setExpenditurePayout(\n    uint256 _permissionDomainId,\n    uint256 _childSkillIndex,\n    uint256 _id,\n    uint256 _slot,\n    address _token,\n    uint256 _amount\n  ) external;\n\n  /// @notice @deprecated\n  /// @notice Sets the skill on an expenditure slot. Can only be called by expenditure owner.\n  /// @param _id Expenditure identifier\n  /// @param _slot Number of the slot\n  /// @param _skillId Id of the new skill to set\n  function setExpenditureSkill(uint256 _id, uint256 _slot, uint256 _skillId) external;\n\n  /// @notice Sets the skill on an expenditure slot. Can only be called by expenditure owner.\n  /// @param _id Expenditure identifier\n  /// @param _slots Array of slots to set skills\n  /// @param _skillIds Ids of the new skills to set\n  function setExpenditureSkills(uint256 _id, uint256[] memory _slots, uint256[] memory _skillIds) external;\n\n  /// @notice @deprecated\n  /// @notice Sets the claim delay on an expenditure slot. Can only be called by expenditure owner.\n  /// @param _id Expenditure identifier\n  /// @param _slot Number of the slot\n  /// @param _claimDelay Duration of time (in seconds) to delay\n  function setExpenditureClaimDelay(uint256 _id, uint256 _slot, uint256 _claimDelay) external;\n\n  /// @notice Sets the claim delays in given expenditure slots. Can only be called by expenditure owner.\n  /// @param _id Expenditure identifier\n  /// @param _slots Array of slots to set claim delays\n  /// @param _claimDelays Durations of time (in seconds) to delay\n  function setExpenditureClaimDelays(uint256 _id, uint256[] memory _slots, uint256[] memory _claimDelays) external;\n\n  /// @notice Sets the payout modifiers in given expenditure slots. Can only be called by expenditure owner.\n  /// @param _id Expenditure identifier\n  /// @param _slots Array of slots to set payout modifiers\n  /// @param _payoutModifiers Values (between +/- WAD) to modify the payout & reputation bonus\n  function setExpenditurePayoutModifiers(uint256 _id, uint256[] memory _slots, int256[] memory _payoutModifiers) external;\n\n  /// @notice Set many values of an expenditure simultaneously. Can only be called by expenditure owner.\n  /// @param _id Expenditure identifier\n  /// @param _recipientSlots Array of slots to set recipients\n  /// @param _recipients Addresses of the recipients\n  /// @param _skillIdSlots Array of slots to set skills\n  /// @param _skillIds Ids of the new skills to set\n  /// @param _claimDelaySlots Array of slots to set claim delays\n  /// @param _claimDelays Durations of time (in seconds) to delay\n  /// @param _payoutModifierSlots Array of slots to set payout modifiers\n  /// @param _payoutModifiers Values (between +/- WAD) to modify the payout & reputation bonus\n  /// @param _payoutTokens Addresses of the tokens, `0x0` value indicates Ether\n  /// @param _payoutSlots 2-dimensional array of slots to set payouts\n  /// @param _payoutValues 2-dimensional array of the payout amounts\n  function setExpenditureValues(\n    uint256 _id,\n    uint256[] memory _recipientSlots,\n    address payable[] memory _recipients,\n    uint256[] memory _skillIdSlots,\n    uint256[] memory _skillIds,\n    uint256[] memory _claimDelaySlots,\n    uint256[] memory _claimDelays,\n    uint256[] memory _payoutModifierSlots,\n    int256[] memory _payoutModifiers,\n    address[] memory _payoutTokens,\n    uint256[][] memory _payoutSlots,\n    uint256[][] memory _payoutValues\n  ) external;\n\n  /// @notice Set arbitrary state on an expenditure slot. Can only be called by Arbitration role.\n  /// @param _permissionDomainId The domainId in which I have the permission to take this action\n  /// @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`,\n  /// (only used if `_permissionDomainId` is different to `_domainId`)\n  /// @param _id Expenditure identifier\n  /// @param _storageSlot Number of the top-level storage slot (25, 26, or 27)\n  /// @param _mask Array of booleans indicated whether a key is a mapping (F) or an array index (T).\n  /// @param _keys Array of additional keys (for mappings & arrays)\n  /// @param _value Value to set at location\n  function setExpenditureState(\n    uint256 _permissionDomainId,\n    uint256 _childSkillIndex,\n    uint256 _id,\n    uint256 _storageSlot,\n    bool[] memory _mask,\n    bytes32[] memory _keys,\n    bytes32 _value\n    ) external;\n\n  /// @notice Claim the payout for an expenditure slot. Here the network receives a fee from each payout.\n  /// @param _id Expenditure identifier\n  /// @param _slot Number of the slot\n  /// @param _token Address of the token, `0x0` value indicates Ether\n  function claimExpenditurePayout(uint256 _id, uint256 _slot, address _token) external;\n\n  /// @notice Get the number of expenditures in the colony.\n  /// @return count The expenditure count\n  function getExpenditureCount() external view returns (uint256 count);\n\n  /// @notice Returns an existing expenditure.\n  /// @param _id Expenditure identifier\n  /// @return expenditure The expenditure\n  function getExpenditure(uint256 _id) external view returns (Expenditure memory expenditure);\n\n  /// @notice Returns an existing expenditure slot.\n  /// @param _id Expenditure identifier\n  /// @param _slot Expenditure slot\n  /// @return expenditureSlot The expenditure slot\n  function getExpenditureSlot(uint256 _id, uint256 _slot) external view returns (ExpenditureSlot memory expenditureSlot);\n\n  /// @notice Returns an existing expenditure slot's payout for a token.\n  /// @param _id Expenditure identifier\n  /// @param _slot Expenditure slot\n  /// @param _token Token address\n  /// @return amount Amount of the payout for that slot/token.\n  function getExpenditureSlotPayout(uint256 _id, uint256 _slot, address _token) external view returns (uint256 amount);\n\n  // Implemented in ColonyPayment.sol\n  /// @notice Add a new payment in the colony. Secured function to authorised members.\n  /// @param _permissionDomainId The domainId in which I have the permission to take this action\n  /// @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`,\n  /// (only used if `_permissionDomainId` is different to `_domainId`)\n  /// @param _recipient Address of the payment recipient\n  /// @param _token Address of the token, `0x0` value indicates Ether\n  /// @param _amount Payout amount\n  /// @param _domainId The domain where the payment belongs\n  /// @param _skillId The skill associated with the payment\n  /// @return paymentId Identifier of the newly created payment\n  function addPayment(\n    uint256 _permissionDomainId,\n    uint256 _childSkillIndex,\n    address payable _recipient,\n    address _token,\n    uint256 _amount,\n    uint256 _domainId,\n    uint256 _skillId)\n    external returns (uint256 paymentId);\n\n  /// @notice Finalizes the payment and logs the reputation log updates.\n  /// Allowed to be called once after payment is fully funded. Secured function to authorised members.\n  /// @param _permissionDomainId The domainId in which I have the permission to take this action\n  /// @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`\n  /// @param _id Payment identifier\n  function finalizePayment(uint256 _permissionDomainId, uint256 _childSkillIndex, uint256 _id) external;\n\n  /// @notice Sets the recipient on an existing payment. Secured function to authorised members.\n  /// @param _permissionDomainId The domainId in which I have the permission to take this action\n  /// @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`\n  /// @param _id Payment identifier\n  /// @param _recipient Address of the payment recipient\n  function setPaymentRecipient(uint256 _permissionDomainId, uint256 _childSkillIndex, uint256 _id, address payable _recipient) external;\n\n  /// @notice Sets the skill on an existing payment. Secured function to authorised members.\n  /// @param _permissionDomainId The domainId in which I have the permission to take this action\n  /// @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`\n  /// @param _id Payment identifier\n  /// @param _skillId Id of the new skill to set\n  function setPaymentSkill(uint256 _permissionDomainId, uint256 _childSkillIndex, uint256 _id, uint256 _skillId) external;\n\n  /// @notice Sets the payout for a given token on an existing payment. Secured function to authorised members.\n  /// @param _permissionDomainId The domainId in which I have the permission to take this action\n  /// @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`\n  /// @param _id Payment identifier\n  /// @param _token Address of the token, `0x0` value indicates Ether\n  /// @param _amount Payout amount\n  function setPaymentPayout(uint256 _permissionDomainId, uint256 _childSkillIndex, uint256 _id, address _token, uint256 _amount) external;\n\n  /// @notice Returns an exiting payment.\n  /// @param _id Payment identifier\n  /// @return payment The Payment data structure\n  function getPayment(uint256 _id) external view returns (Payment memory payment);\n\n  /// @notice Claim the payout in `_token` denomination for payment `_id`. Here the network receives its fee from each payout.\n  /// Same as for tasks, ether fees go straight to the Meta Colony whereas Token fees go to the Network to be auctioned off.\n  /// @param _id Payment identifier\n  /// @param _token Address of the token, `0x0` value indicates Ether\n  function claimPayment(uint256 _id, address _token) external;\n\n  /// @notice Get the number of payments in the colony.\n  /// @return count The payment count\n  function getPaymentCount() external view returns (uint256 count);\n\n  // Implemented in ColonyTask.sol\n  /// @notice Make a new task in the colony. Secured function to authorised members.\n  /// @param _permissionDomainId The domainId in which I have the permission to take this action\n  /// @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`\n  /// @param _specificationHash Database identifier where the task specification is stored\n  /// @param _domainId The domain where the task belongs\n  /// @param _skillId The skill associated with the task, can set to `0` for no-op\n  /// @param _dueDate The due date of the task, can set to `0` for no-op\n  function makeTask(\n    uint256 _permissionDomainId,\n    uint256 _childSkillIndex,\n    bytes32 _specificationHash,\n    uint256 _domainId,\n    uint256 _skillId,\n    uint256 _dueDate) external;\n\n  /// @notice Get the number of tasks in the colony.\n  /// @return count The task count\n  function getTaskCount() external view returns (uint256 count);\n\n  /// @notice Starts from 0 and is incremented on every co-reviewed task change via `executeTaskChange` call.\n  /// @param _id Id of the task\n  /// @return nonce The current task change nonce value\n  function getTaskChangeNonce(uint256 _id) external view returns (uint256 nonce);\n\n  /// @notice Executes a task update transaction `_data` which is approved and signed by two of its roles (e.g. manager and worker)\n  /// using the detached signatures for these users.\n  /// @dev The Colony functions which require approval and the task roles to review these are set in `IColony.initialiseColony` at colony creation.\n  /// Upon successful execution the `taskChangeNonces` entry for the task is incremented.\n  /// @param _sigV recovery id\n  /// @param _sigR r output of the ECDSA signature of the transaction\n  /// @param _sigS s output of the ECDSA signature of the transaction\n  /// @param _mode How the signature was generated - 0 for Geth-style (usual), 1 for Trezor-style (only Trezor does this)\n  /// @param _value The transaction value, i.e. number of wei to be sent when the transaction is executed\n  /// Currently we only accept 0 value transactions but this is kept as a future option\n  /// @param _data The transaction data\n  function executeTaskChange(\n    uint8[] memory _sigV,\n    bytes32[] memory _sigR,\n    bytes32[] memory _sigS,\n    uint8[] memory _mode,\n    uint256 _value,\n    bytes memory _data\n    ) external;\n\n  /// @notice Executes a task role update transaction `_data` which is approved and signed by two of addresses.\n  /// depending of which function we are calling. Allowed functions are `setTaskManagerRole`, `setTaskEvaluatorRole` and `setTaskWorkerRole`.\n  /// Upon successful execution the `taskChangeNonces` entry for the task is incremented.\n  /// @param _sigV recovery id\n  /// @param _sigR r output of the ECDSA signature of the transaction\n  /// @param _sigS s output of the ECDSA signature of the transaction\n  /// @param _mode How the signature was generated - 0 for Geth-style (usual), 1 for Trezor-style (only Trezor does this)\n  /// @param _value The transaction value, i.e. number of wei to be sent when the transaction is executed\n  /// Currently we only accept 0 value transactions but this is kept as a future option\n  /// @param _data The transaction data\n  function executeTaskRoleAssignment(\n    uint8[] memory _sigV,\n    bytes32[] memory _sigR,\n    bytes32[] memory _sigS,\n    uint8[] memory _mode,\n    uint256 _value,\n    bytes memory _data\n    ) external;\n\n  /// @notice Submit a hashed secret of the rating for work in task `_id` which was performed by user with task role id `_role`.\n  /// Allowed within 5 days period starting which whichever is first from either the deliverable being submitted or the dueDate been reached.\n  /// Allowed only for evaluator to rate worker and for worker to rate manager performance.\n  /// Once submitted ratings can not be changed or overwritten.\n  /// @param _id Id of the task\n  /// @param _role Id of the role, as defined in TaskRole enum\n  /// @param _ratingSecret `keccak256` hash of a salt and 0-50 rating score (in increments of 10, .e.g 0, 10, 20, 30, 40 or 50).\n  /// Can be generated via `IColony.generateSecret` helper function.\n  function submitTaskWorkRating(uint256 _id, uint8 _role, bytes32 _ratingSecret) external;\n\n  /// @notice Reveal the secret rating submitted in `IColony.submitTaskWorkRating` for task `_id` and task role with id `_role`.\n  /// Allowed within 5 days period starting which whichever is first from either both rating secrets being submitted\n  /// (via `IColony.submitTaskWorkRating`) or the 5 day rating period expiring.\n  /// @dev Compares the `keccak256(_salt, _rating)` output with the previously submitted rating secret and if they match,\n  /// sets the task role properties `rated` to `true` and `rating` to `_rating`.\n  /// @param _id Id of the task\n  /// @param _role Id of the role, as defined in TaskRole enum\n  /// @param _rating 0-50 rating score (in increments of 10, .e.g 0, 10, 20, 30, 40 or 50)\n  /// @param _salt Salt value used to generate the rating secret\n  function revealTaskWorkRating(uint256 _id, uint8 _role, uint8 _rating, bytes32 _salt) external;\n\n  /// @notice Helper function used to generage consistently the rating secret using salt value `_salt` and value to hide `_value`\n  /// @param _salt Salt value\n  /// @param _value Value to hide\n  /// @return secret `keccak256` hash of joint _salt and _value\n  function generateSecret(bytes32 _salt, uint256 _value) external pure returns (bytes32 secret);\n\n  /// @notice Get the `ColonyStorage.RatingSecrets` information for task `_id`.\n  /// @param _id Id of the task\n  /// @return nSecrets Number of secrets\n  /// @return lastSubmittedAt Timestamp of the last submitted rating secret\n  function getTaskWorkRatingSecretsInfo(uint256 _id) external view returns (uint256 nSecrets, uint256 lastSubmittedAt);\n\n  /// @notice Get the rating secret submitted for role `_role` in task `_id`\n  /// @param _id Id of the task\n  /// @param _role Id of the role, as defined in TaskRole enum\n  /// @return secret Rating secret `bytes32` value\n  function getTaskWorkRatingSecret(uint256 _id, uint8 _role) external view returns (bytes32 secret);\n\n  /// @notice Assigning manager role.\n  /// Current manager and user we want to assign role to both need to agree.\n  /// User we want to set here also needs to be an admin.\n  /// Note that the domain proof data comes at the end here to not interfere with the assembly argument unpacking.\n  /// @dev This function can only be called through `executeTaskRoleAssignment`.\n  /// @param _id Id of the task\n  /// @param _user Address of the user we want to give a manager role to\n  /// @param _permissionDomainId The domain ID in which _user has the Administration permission\n  /// @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`\n  function setTaskManagerRole(uint256 _id, address payable _user, uint256 _permissionDomainId, uint256 _childSkillIndex) external;\n\n  /// @notice Assigning evaluator role.\n  /// Can only be set if there is no one currently assigned to be an evaluator.\n  /// Manager of the task and user we want to assign role to both need to agree.\n  /// Managers can assign themselves to this role, if there is no one currently assigned to it.\n  /// @dev This function can only be called through `executeTaskRoleAssignment`.\n  /// @param _id Id of the task\n  /// @param _user Address of the user we want to give a evaluator role to\n  function setTaskEvaluatorRole(uint256 _id, address payable _user) external;\n\n  /// @notice Assigning worker role.\n  /// Can only be set if there is no one currently assigned to be a worker.\n  /// Manager of the task and user we want to assign role to both need to agree.\n  /// @dev This function can only be called through `executeTaskRoleAssignment`.\n  /// @param _id Id of the task\n  /// @param _user Address of the user we want to give a worker role to\n  function setTaskWorkerRole(uint256 _id, address payable _user) external;\n\n  /// @notice Removing evaluator role.\n  /// Agreed between manager and currently assigned evaluator.\n  /// @param _id Id of the task\n  function removeTaskEvaluatorRole(uint256 _id) external;\n\n  /// @notice Removing worker role.\n  /// Agreed between manager and currently assigned worker.\n  /// @param _id Id of the task\n  function removeTaskWorkerRole(uint256 _id) external;\n\n  /// @notice Set the skill for task `_id`.\n  /// @dev Currently we only allow one skill per task although we have provisioned for an array of skills in `Task` struct.\n  /// Allowed before a task is finalized.\n  /// @param _id Id of the task\n  /// @param _skillId Id of the skill which has to be a global skill\n  function setTaskSkill(uint256 _id, uint256 _skillId) external;\n\n  /// @notice Set the hash for the task brief, aka task work specification, which identifies the task brief content in ddb.\n  /// Allowed before a task is finalized.\n  /// @param _id Id of the task\n  /// @param _specificationHash Unique hash of the task brief in ddb\n  function setTaskBrief(uint256 _id, bytes32 _specificationHash) external;\n\n  /// @notice Set the due date on task `_id`. Allowed before a task is finalized.\n  /// @param _id Id of the task\n  /// @param _dueDate Due date as seconds since unix epoch\n  function setTaskDueDate(uint256 _id, uint256 _dueDate) external;\n\n  /// @notice Submit the task deliverable, i.e. the output of the work performed for task `_id`.\n  /// Submission is allowed only to the assigned worker before the task due date. Submissions cannot be overwritten.\n  /// @dev Set the `task.deliverableHash` and `task.completionTimestamp` properties.\n  /// @param _id Id of the task\n  /// @param _deliverableHash Unique hash of the task deliverable content in ddb\n  function submitTaskDeliverable(uint256 _id, bytes32 _deliverableHash) external;\n\n  /// @notice Submit the task deliverable for Worker and rating for Manager.\n  /// @dev Internally call `submitTaskDeliverable` and `submitTaskWorkRating` in sequence.\n  /// @param _id Id of the task\n  /// @param _deliverableHash Unique hash of the task deliverable content in ddb\n  /// @param _ratingSecret Rating secret for manager\n  function submitTaskDeliverableAndRating(uint256 _id, bytes32 _deliverableHash, bytes32 _ratingSecret) external;\n\n  /// @notice Called after task work rating is complete which closes the task and logs the respective reputation log updates.\n  /// Allowed to be called once per task. Secured function to authorised members.\n  /// @dev Set the `task.finalized` property to true\n  /// @param _id Id of the task\n  function finalizeTask(uint256 _id) external;\n\n  /// @notice Cancel a task at any point before it is finalized. Secured function to authorised members.\n  /// Any funds assigned to its funding pot can be moved back to the domain via `IColony.moveFundsBetweenPots`.\n  /// @dev Set the `task.status` property to `1`.\n  /// @param _id Id of the task\n  function cancelTask(uint256 _id) external;\n\n  /// @notice Mark a task as complete after the due date has passed.\n  /// This allows the task to be rated and finalized (and funds recovered) even in the presence of a worker who has disappeared.\n  /// Note that if the due date was not set, then this function will throw.\n  /// @param _id Id of the task\n  function completeTask(uint256 _id) external;\n\n  /// @notice Get a task with id `_id`\n  /// @param _id Id of the task\n  /// @return specificationHash Task brief hash\n  /// @return deliverableHash Task deliverable hash\n  /// @return status TaskStatus property. 0 - Active. 1 - Cancelled. 2 - Finalized\n  /// @return dueDate Due date\n  /// @return fundingPotId Id of funding pot for task\n  /// @return completionTimestamp Task completion timestamp\n  /// @return domainId Task domain id, default is root colony domain with id 1\n  /// @return skillIds Array of global skill ids assigned to task\n  function getTask(uint256 _id) external view returns (\n    bytes32 specificationHash,\n    bytes32 deliverableHash,\n    TaskStatus status,\n    uint256 dueDate,\n    uint256 fundingPotId,\n    uint256 completionTimestamp,\n    uint256 domainId,\n    uint256[] memory skillIds\n    );\n\n  /// @notice Get the `Role` properties back for role `_role` in task `_id`.\n  /// @param _id Id of the task\n  /// @param _role Id of the role, as defined in TaskRole enum\n  /// @return role The Role\n  function getTaskRole(uint256 _id, uint8 _role) external view returns (Role memory role);\n\n  /// @notice Set the reward inverse to pay out from revenue. e.g. if the fee is 1% (or 0.01), set 100.\n  /// @param _rewardInverse The inverse of the reward\n  function setRewardInverse(uint256 _rewardInverse) external;\n\n  /// @notice Return 1 / the reward to pay out from revenue. e.g. if the fee is 1% (or 0.01), return 100.\n  /// @return rewardInverse The inverse of the reward\n  function getRewardInverse() external view returns (uint256 rewardInverse);\n\n  /// @notice Get payout amount in `_token` denomination for role `_role` in task `_id`.\n  /// @param _id Id of the task\n  /// @param _role Id of the role, as defined in TaskRole enum\n  /// @param _token Address of the token, `0x0` value indicates Ether\n  /// @return amount Payout amount\n  function getTaskPayout(uint256 _id, uint8 _role, address _token) external view returns (uint256 amount);\n\n  /// @notice Set `_token` payout for manager in task `_id` to `_amount`.\n  /// @param _id Id of the task\n  /// @param _token Address of the token, `0x0` value indicates Ether\n  /// @param _amount Payout amount\n  function setTaskManagerPayout(uint256 _id, address _token, uint256 _amount) external;\n\n  /// @notice Set `_token` payout for evaluator in task `_id` to `_amount`.\n  /// @param _id Id of the task\n  /// @param _token Address of the token, `0x0` value indicates Ether\n  /// @param _amount Payout amount\n  function setTaskEvaluatorPayout(uint256 _id, address _token, uint256 _amount) external;\n\n  /// @notice Set `_token` payout for worker in task `_id` to `_amount`.\n  /// @param _id Id of the task\n  /// @param _token Address of the token, `0x0` value indicates Ether\n  /// @param _amount Payout amount\n  function setTaskWorkerPayout(uint256 _id, address _token, uint256 _amount) external;\n\n  /// @notice Set `_token` payout for all roles in task `_id` to the respective amounts.\n  /// @dev Can only call if evaluator and worker are unassigned or manager, otherwise need signature.\n  /// @param _id Id of the task\n  /// @param _token Address of the token, `0x0` value indicates Ether\n  /// @param _managerAmount Payout amount for manager\n  /// @param _evaluatorAmount Payout amount for evaluator\n  /// @param _workerAmount Payout amount for worker\n  function setAllTaskPayouts(uint256 _id, address _token, uint256 _managerAmount, uint256 _evaluatorAmount, uint256 _workerAmount) external;\n\n  /// @notice Claim the payout in `_token` denomination for work completed in task `_id` by contributor with role `_role`.\n  /// Allowed only after task is finalized. Here the network receives its fee from each payout.\n  /// Ether fees go straight to the Meta Colony whereas Token fees go to the Network to be auctioned off.\n  /// @param _id Id of the task\n  /// @param _role Id of the role, as defined in TaskRole enum\n  /// @param _token Address of the token, `0x0` value indicates Ether\n  function claimTaskPayout(uint256 _id, uint8 _role, address _token) external;\n\n  /// @notice Start next reward payout for `_token`. All funds in the reward pot for `_token` will become unavailable.\n  /// @notice Add a new payment in the colony. Can only be called by users with root permission.\n  /// All tokens will be locked, and can be unlocked by calling `waiveRewardPayout` or `claimRewardPayout`.\n  /// @param _token Address of the token used for reward payout\n  /// @param key Some Reputation hash tree key\n  /// @param value Reputation value\n  /// @param branchMask The branchmask of the proof\n  /// @param siblings The siblings of the proof\n  function startNextRewardPayout(address _token, bytes memory key, bytes memory value, uint256 branchMask, bytes32[] memory siblings) external;\n\n  /// @notice Claim the reward payout at `_payoutId`. User needs to provide their reputation and colony-wide reputation\n  /// which will be proven via Merkle proof inside this function.\n  /// Can only be called if payout is active, i.e if 60 days have not passed from its creation.\n  /// Can only be called if next in queue.\n  /// @param _payoutId Id of the reward payout\n  /// @param _squareRoots Square roots of values used in equation:\n  /// `_squareRoots[0]` - square root of user reputation,\n  /// `_squareRoots[1]` - square root of user tokens (deposited in TokenLocking),\n  /// `_squareRoots[2]` - square root of total reputation,\n  /// `_squareRoots[3]` - square root of total tokens,\n  /// `_squareRoots[4]` - square root of numerator (user reputation * user tokens),\n  /// `_squareRoots[5]` - square root of denominator (total reputation * total tokens),\n  /// `_squareRoots[6]` - square root of payout amount.\n  /// @param key Some Reputation hash tree key\n  /// @param value Reputation value\n  /// @param branchMask The branchmask of the proof\n  /// @param siblings The siblings of the proof\n  function claimRewardPayout(\n    uint256 _payoutId,\n    uint256[7] memory _squareRoots,\n    bytes memory key,\n    bytes memory value,\n    uint256 branchMask,\n    bytes32[] memory siblings\n    ) external;\n\n  /// @notice Get useful information about specific reward payout.\n  /// @param _payoutId Id of the reward payout\n  /// @return rewardPayoutCycle RewardPayoutCycle, containing propertes:\n  ///  `reputationState` Reputation root hash at the time of creation,\n  ///  `colonyWideReputation` Colony wide reputation in `reputationState`,\n  ///  `totalTokens` Total colony tokens at the time of creation,\n  ///  `amount` Total amount of tokens taken aside for reward payout,\n  ///  `tokenAddress` Token address,\n  ///  `blockTimestamp` Block number at the time of creation.\n  function getRewardPayoutInfo(uint256 _payoutId) external view returns (RewardPayoutCycle memory rewardPayoutCycle);\n\n  /// @notice Finalises the reward payout. Allows creation of next reward payouts for token that has been used in `_payoutId`.\n  /// Can only be called when reward payout cycle is finished i.e when 60 days have passed from its creation.\n  /// @param _payoutId Id of the reward payout\n  function finalizeRewardPayout(uint256 _payoutId) external;\n\n  /// @notice Get the non-mapping properties of a pot by id.\n  /// @param _id Id of the pot which details to get\n  /// @return associatedType The FundingPotAssociatedType value of the current funding pot, e.g. Domain, Task, Payout\n  /// @return associatedTypeId Id of the associated type, e.g. if associatedType = FundingPotAssociatedType.Domain, this refers to the domainId\n  /// @return payoutsWeCannotMake Number of payouts that cannot be completed with the current funding\n  /// @dev For the reward funding pot (e.g. id: 0) this returns (0, 0, 0).\n  function getFundingPot(uint256 _id) external view returns (\n    FundingPotAssociatedType associatedType,\n    uint256 associatedTypeId,\n    uint256 payoutsWeCannotMake);\n\n  /// @notice Get the number of funding pots in the colony.\n  /// @return count The funding pots count\n  function getFundingPotCount() external view returns (uint256 count);\n\n  /// @notice Get the `_token` balance of pot with id `_potId`.\n  /// @param _potId Id of the funding pot\n  /// @param _token Address of the token, `0x0` value indicates Ether\n  /// @return balance Funding pot supply balance\n  function getFundingPotBalance(uint256 _potId, address _token) external view returns (uint256 balance);\n\n  /// @notice Get the assigned `_token` payouts of pot with id `_potId`.\n  /// @param _potId Id of the funding pot\n  /// @param _token Address of the token, `0x0` value indicates Ether\n  /// @return payout Funding pot payout amount\n  function getFundingPotPayout(uint256 _potId, address _token) external view returns (uint256 payout);\n\n  /// @notice Move a given amount: `_amount` of `_token` funds from funding pot with id `_fromPot` to one with id `_toPot`.\n  /// @param _permissionDomainId The domainId in which I have the permission to take this action\n  /// @param _childSkillIndex The child index in _permissionDomainId where I will be taking this action\n  /// @param _domainId The domain where I am taking this action, pointed to by _permissionDomainId and _childSkillIndex\n  /// @param _fromChildSkillIndex In the array of child skills for the skill associated with the domain pointed to by _permissionDomainId + _childSkillIndex,\n  ///         the index of the skill associated with the domain that contains _fromPot\n  /// @param _toChildSkillIndex The same, but for the _toPot which the funds are being moved to\n  /// @param _fromPot Funding pot id providing the funds\n  /// @param _toPot Funding pot id receiving the funds\n  /// @param _amount Amount of funds\n  /// @param _token Address of the token, `0x0` value indicates Ether\n  function moveFundsBetweenPots(\n    uint256 _permissionDomainId,\n    uint256 _childSkillIndex,\n    uint256 _domainId,\n    uint256 _fromChildSkillIndex,\n    uint256 _toChildSkillIndex,\n    uint256 _fromPot,\n    uint256 _toPot,\n    uint256 _amount,\n    address _token\n    ) external;\n\n  /// @notice @deprecated\n  /// @notice Move a given amount: `_amount` of `_token` funds from funding pot with id `_fromPot` to one with id `_toPot`.\n  /// @param _permissionDomainId The domainId in which I have the permission to take this action\n  /// @param _fromChildSkillIndex The child index in `_permissionDomainId` where we can find the domain for `_fromPotId`\n  /// @param _toChildSkillIndex The child index in `_permissionDomainId` where we can find the domain for `_toPotId`\n  /// @param _fromPot Funding pot id providing the funds\n  /// @param _toPot Funding pot id receiving the funds\n  /// @param _amount Amount of funds\n  /// @param _token Address of the token, `0x0` value indicates Ether\n  function moveFundsBetweenPots(\n    uint256 _permissionDomainId,\n    uint256 _fromChildSkillIndex,\n    uint256 _toChildSkillIndex,\n    uint256 _fromPot,\n    uint256 _toPot,\n    uint256 _amount,\n    address _token\n    ) external;\n\n  /// @notice Move any funds received by the colony in `_token` denomination to the top-level domain pot,\n  /// siphoning off a small amount to the reward pot. If called against a colony's own token, no fee is taken.\n  /// @param _token Address of the token, `0x0` value indicates Ether\n  function claimColonyFunds(address _token) external;\n\n  /// @notice Get the total amount of tokens `_token` minus amount reserved to be paid to the reputation and token holders as rewards.\n  /// @param _token Address of the token, `0x0` value indicates Ether\n  /// @return amount Total amount of tokens in funding pots other than the rewards pot (id 0)\n  function getNonRewardPotsTotal(address _token) external view returns (uint256 amount);\n\n  /// @notice Allow the _approvee to obligate some amount of tokens as a stake.\n  /// @param _approvee Address of the account we are willing to let obligate us.\n  /// @param _domainId Domain in which we are willing to be obligated.\n  /// @param _amount Amount of internal token up to which we are willing to be obligated.\n  function approveStake(address _approvee, uint256 _domainId, uint256 _amount) external;\n\n  /// @notice Obligate the user some amount of tokens as a stake.\n  /// @param _user Address of the account we are obligating.\n  /// @param _domainId Domain in which we are obligating the user.\n  /// @param _amount Amount of internal token we are obligating.\n  function obligateStake(address _user, uint256 _domainId, uint256 _amount) external;\n\n  /// @notice Deobligate the user some amount of tokens, releasing the stake.\n  /// @param _user Address of the account we are deobligating.\n  /// @param _domainId Domain in which we are deobligating the user.\n  /// @param _amount Amount of internal token we are deobligating.\n  function deobligateStake(address _user, uint256 _domainId, uint256 _amount) external;\n\n  /// @notice Transfer some amount of obligated tokens.\n  /// Can be called by the arbitration role.\n  /// @param _permissionDomainId The domainId in which I have the permission to take this action.\n  /// @param _childSkillIndex The child index in `_permissionDomainId` where we can find `_domainId`.\n  /// @param _obligator Address of the account who set the obligation.\n  /// @param _user Address of the account we are transferring.\n  /// @param _domainId Domain in which we are transferring the tokens.\n  /// @param _amount Amount of internal token we are transferring.\n  /// @param _recipient Recipient of the transferred tokens.\n  function transferStake(\n    uint256 _permissionDomainId,\n    uint256 _childSkillIndex,\n    address _obligator,\n    address _user,\n    uint256 _domainId,\n    uint256 _amount,\n    address _recipient\n    ) external;\n\n  /// @notice View an approval to obligate tokens.\n  /// @param _user User allowing their tokens to be obligated.\n  /// @param _obligator Address of the account we are willing to let obligate us.\n  /// @param _domainId Domain in which we are willing to be obligated.\n  /// @return approval The amount the user has approved\n  function getApproval(address _user, address _obligator, uint256 _domainId) external view returns (uint256 approval);\n\n  /// @notice View an obligation of tokens.\n  /// @param _user User whose tokens are obligated.\n  /// @param _obligator Address of the account who obligated us.\n  /// @param _domainId Domain in which we are obligated.\n  /// @return obligation The amount that is currently obligated\n  function getObligation(address _user, address _obligator, uint256 _domainId) external view returns (uint256 obligation);\n\n  /// @notice Get the domain corresponding to a funding pot\n  /// @param _fundingPotId Id of the funding pot\n  /// @return domainId Id of the corresponding domain\n  function getDomainFromFundingPot(uint256 _fundingPotId) external view returns (uint256 domainId);\n\n  /// @notice Burn tokens held by the colony. Can only burn tokens held in the root funding pot.\n  /// @param token The address of the token to burn\n  /// @param amount The amount of tokens to burn\n  function burnTokens(address token, uint256 amount) external;\n\n  /// @notice unlock the native colony token, if possible\n  function unlockToken() external;\n\n  /// @notice Update the internal bookkeeping around external ERC20 approvals\n  /// @param token The address of the token which was approved\n  /// @param spender The account we have approved\n  function updateApprovalAmount(address token, address spender) external;\n\n  /// @notice Get the current approval amount\n  /// @param token The address of the token which was approved\n  /// @param spender The account we have approved\n  /// @return amount The token approval amount\n  function getTokenApproval(address token, address spender) external view returns (uint256 amount);\n\n  /// @notice Get the current total approval amount across all spenders\n  /// @param token The address of the token which was approved\n  /// @return amount The total token approval amount\n  function getTotalTokenApproval(address token) external view returns (uint256 amount);\n}\n","sourcePath":"/home/alex/colony/subgraph/colonyNetwork/contracts/colony/IColony.sol","ast":{"absolutePath":"project:/contracts/colony/IColony.sol","exportedSymbols":{"ColonyDataTypes":[3139],"ContractRecoveryDataTypes":[20052],"IBasicMetaTransaction":[20470],"IColony":[13658],"IMulticall":[20506],"IRecovery":[20563]},"id":13659,"nodeType":"SourceUnit","nodes":[{"id":12187,"literals":["solidity",">=","0.8",".20"],"nodeType":"PragmaDirective","src":"700:25:13"},{"id":12188,"literals":["experimental","ABIEncoderV2"],"nodeType":"PragmaDirective","src":"744:33:13"},{"absolutePath":"project:/contracts/common/IRecovery.sol","file":"./../common/IRecovery.sol","id":12189,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":13659,"sourceUnit":20564,"src":"779:35:13","symbolAliases":[],"unitAlias":""},{"absolutePath":"project:/contracts/common/IBasicMetaTransaction.sol","file":"./../common/IBasicMetaTransaction.sol","id":12190,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":13659,"sourceUnit":20471,"src":"815:47:13","symbolAliases":[],"unitAlias":""},{"absolutePath":"project:/contracts/common/IMulticall.sol","file":"./../common/IMulticall.sol","id":12191,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":13659,"sourceUnit":20507,"src":"863:36:13","symbolAliases":[],"unitAlias":""},{"absolutePath":"project:/contracts/colony/ColonyDataTypes.sol","file":"./ColonyDataTypes.sol","id":12192,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":13659,"sourceUnit":3140,"src":"900:31:13","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":12193,"name":"ColonyDataTypes","nameLocations":["955:15:13"],"nodeType":"IdentifierPath","referencedDeclaration":3139,"src":"955:15:13"},"id":12194,"nodeType":"InheritanceSpecifier","src":"955:15:13"},{"baseName":{"id":12195,"name":"IRecovery","nameLocations":["972:9:13"],"nodeType":"IdentifierPath","referencedDeclaration":20563,"src":"972:9:13"},"id":12196,"nodeType":"InheritanceSpecifier","src":"972:9:13"},{"baseName":{"id":12197,"name":"IBasicMetaTransaction","nameLocations":["983:21:13"],"nodeType":"IdentifierPath","referencedDeclaration":20470,"src":"983:21:13"},"id":12198,"nodeType":"InheritanceSpecifier","src":"983:21:13"},{"baseName":{"id":12199,"name":"IMulticall","nameLocations":["1006:10:13"],"nodeType":"IdentifierPath","referencedDeclaration":20506,"src":"1006:10:13"},"id":12200,"nodeType":"InheritanceSpecifier","src":"1006:10:13"}],"canonicalName":"IColony","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":13658,"linearizedBaseContracts":[13658,20506,20470,20563,20052,3139],"name":"IColony","nameLocation":"944:7:13","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":12201,"nodeType":"StructuredDocumentation","src":"1052:122:13","text":"@notice Get the `ColonyAuthority` for the colony.\n @return colonyAuthority The `ColonyAuthority` contract address"},"functionSelector":"bf7e214f","id":12206,"implemented":false,"kind":"function","modifiers":[],"name":"authority","nameLocation":"1186:9:13","nodeType":"FunctionDefinition","parameters":{"id":12202,"nodeType":"ParameterList","parameters":[],"src":"1195:2:13"},"returnParameters":{"id":12205,"nodeType":"ParameterList","parameters":[{"constant":false,"id":12204,"mutability":"mutable","name":"colonyAuthority","nameLocation":"1229:15:13","nodeType":"VariableDeclaration","scope":12206,"src":"1221:23:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":12203,"name":"address","nodeType":"ElementaryTypeName","src":"1221:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1220:25:13"},"scope":13658,"src":"1177:69:13","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":12207,"nodeType":"StructuredDocumentation","src":"1250:168:13","text":"@notice Get the colony `owner` address. This should be address(0x0) at all times.\n @dev Used for testing.\n @return colonyOwner Address of the colony owner"},"functionSelector":"8da5cb5b","id":12212,"implemented":false,"kind":"function","modifiers":[],"name":"owner","nameLocation":"1430:5:13","nodeType":"FunctionDefinition","parameters":{"id":12208,"nodeType":"ParameterList","parameters":[],"src":"1435:2:13"},"returnParameters":{"id":12211,"nodeType":"ParameterList","parameters":[{"constant":false,"id":12210,"mutability":"mutable","name":"colonyOwner","nameLocation":"1469:11:13","nodeType":"VariableDeclaration","scope":12212,"src":"1461:19:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":12209,"name":"address","nodeType":"ElementaryTypeName","src":"1461:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1460:21:13"},"scope":13658,"src":"1421:61:13","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":12213,"nodeType":"StructuredDocumentation","src":"1517:163:13","text":"@notice Get the Colony contract version.\n Starts from 1 and is incremented with every deployed contract change.\n @return colonyVersion Version number"},"functionSelector":"54fd4d50","id":12218,"implemented":false,"kind":"function","modifiers":[],"name":"version","nameLocation":"1692:7:13","nodeType":"FunctionDefinition","parameters":{"id":12214,"nodeType":"ParameterList","parameters":[],"src":"1699:2:13"},"returnParameters":{"id":12217,"nodeType":"ParameterList","parameters":[{"constant":false,"id":12216,"mutability":"mutable","name":"colonyVersion","nameLocation":"1733:13:13","nodeType":"VariableDeclaration","scope":12218,"src":"1725:21:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":12215,"name":"uint256","nodeType":"ElementaryTypeName","src":"1725:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1724:23:13"},"scope":13658,"src":"1683:65:13","stateMutability":"pure","virtual":false,"visibility":"external"},{"documentation":{"id":12219,"nodeType":"StructuredDocumentation","src":"1752:245:13","text":"@notice Upgrades a colony to a new Colony contract version `_newVersion`.\n @dev Downgrades are not allowed, i.e. `_newVersion` should be higher than the currect colony version.\n @param _newVersion The target version for the upgrade"},"functionSelector":"45977d03","id":12224,"implemented":false,"kind":"function","modifiers":[],"name":"upgrade","nameLocation":"2009:7:13","nodeType":"FunctionDefinition","parameters":{"id":12222,"nodeType":"ParameterList","parameters":[{"constant":false,"id":12221,"mutability":"mutable","name":"_newVersion","nameLocation":"2022:11:13","nodeType":"VariableDeclaration","scope":12224,"src":"2017:16:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":12220,"name":"uint","nodeType":"ElementaryTypeName","src":"2017:4:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2016:18:13"},"returnParameters":{"id":12223,"nodeType":"ParameterList","parameters":[],"src":"2043:0:13"},"scope":13658,"src":"2000:44:13","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":12225,"nodeType":"StructuredDocumentation","src":"2048:258:13","text":"@notice A function to be called after an upgrade has been done from v2 to v3.\n @dev Can only be called by the colony itself, and only expected to be called as part of the `upgrade()` call. Required to\n be external so it can be an external call."},"functionSelector":"340df28f","id":12228,"implemented":false,"kind":"function","modifiers":[],"name":"finishUpgrade","nameLocation":"2318:13:13","nodeType":"FunctionDefinition","parameters":{"id":12226,"nodeType":"ParameterList","parameters":[],"src":"2331:2:13"},"returnParameters":{"id":12227,"nodeType":"ParameterList","parameters":[],"src":"2342:0:13"},"scope":13658,"src":"2309:34:13","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":12229,"nodeType":"StructuredDocumentation","src":"2347:221:13","text":"@notice Returns the colony network address set on the Colony.\n @dev The colonyNetworkAddress we read here is set once, during `initialiseColony`.\n @return colonyNetwork The address of Colony Network instance"},"functionSelector":"4e5e8395","id":12234,"implemented":false,"kind":"function","modifiers":[],"name":"getColonyNetwork","nameLocation":"2580:16:13","nodeType":"FunctionDefinition","parameters":{"id":12230,"nodeType":"ParameterList","parameters":[],"src":"2596:2:13"},"returnParameters":{"id":12233,"nodeType":"ParameterList","parameters":[{"constant":false,"id":12232,"mutability":"mutable","name":"colonyNetwork","nameLocation":"2630:13:13","nodeType":"VariableDeclaration","scope":12234,"src":"2622:21:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":12231,"name":"address","nodeType":"ElementaryTypeName","src":"2622:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2621:23:13"},"scope":13658,"src":"2571:74:13","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":12235,"nodeType":"StructuredDocumentation","src":"2649:90:13","text":"@notice Get the colony token.\n @return tokenAddress Address of the token contract"},"functionSelector":"21df0da7","id":12240,"implemented":false,"kind":"function","modifiers":[],"name":"getToken","nameLocation":"2751:8:13","nodeType":"FunctionDefinition","parameters":{"id":12236,"nodeType":"ParameterList","parameters":[],"src":"2759:2:13"},"returnParameters":{"id":12239,"nodeType":"ParameterList","parameters":[{"constant":false,"id":12238,"mutability":"mutable","name":"tokenAddress","nameLocation":"2793:12:13","nodeType":"VariableDeclaration","scope":12240,"src":"2785:20:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":12237,"name":"address","nodeType":"ElementaryTypeName","src":"2785:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2784:22:13"},"scope":13658,"src":"2742:65:13","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":12241,"nodeType":"StructuredDocumentation","src":"2811:347:13","text":"@notice @deprecated\n @notice Execute arbitrary transaction on behalf of the Colony\n @param _to Contract to receive the function call (cannot be this contract, network or token locking)\n @param _action Bytes array encoding the function call and arguments\n @return success Boolean indicating whether the transaction succeeded"},"functionSelector":"67c351c2","id":12250,"implemented":false,"kind":"function","modifiers":[],"name":"makeArbitraryTransaction","nameLocation":"3170:24:13","nodeType":"FunctionDefinition","parameters":{"id":12246,"nodeType":"ParameterList","parameters":[{"constant":false,"id":12243,"mutability":"mutable","name":"_to","nameLocation":"3203:3:13","nodeType":"VariableDeclaration","scope":12250,"src":"3195:11:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":12242,"name":"address","nodeType":"ElementaryTypeName","src":"3195:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":12245,"mutability":"mutable","name":"_action","nameLocation":"3221:7:13","nodeType":"VariableDeclaration","scope":12250,"src":"3208:20:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":12244,"name":"bytes","nodeType":"ElementaryTypeName","src":"3208:5:13","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3194:35:13"},"returnParameters":{"id":12249,"nodeType":"ParameterList","parameters":[{"constant":false,"id":12248,"mutability":"mutable","name":"success","nameLocation":"3253:7:13","nodeType":"VariableDeclaration","scope":12250,"src":"3248:12:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":12247,"name":"bool","nodeType":"ElementaryTypeName","src":"3248:4:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"3247:14:13"},"scope":13658,"src":"3161:101:13","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":12251,"nodeType":"StructuredDocumentation","src":"3266:413:13","text":"@notice Execute arbitrary transactions on behalf of the Colony in series\n @param _targets Array of addressed to be targeted\n @param _actions Array of Bytes arrays encoding the function calls and arguments\n @param _strict Boolean indicating whether if one transaction fails, the whole call to this function should fail.\n @return success Boolean indicating whether the transactions succeeded"},"functionSelector":"c6356efe","id":12264,"implemented":false,"kind":"function","modifiers":[],"name":"makeArbitraryTransactions","nameLocation":"3691:25:13","nodeType":"FunctionDefinition","parameters":{"id":12260,"nodeType":"ParameterList","parameters":[{"constant":false,"id":12254,"mutability":"mutable","name":"_targets","nameLocation":"3734:8:13","nodeType":"VariableDeclaration","scope":12264,"src":"3717:25:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":12252,"name":"address","nodeType":"ElementaryTypeName","src":"3717:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":12253,"nodeType":"ArrayTypeName","src":"3717:9:13","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"},{"constant":false,"id":12257,"mutability":"mutable","name":"_actions","nameLocation":"3759:8:13","nodeType":"VariableDeclaration","scope":12264,"src":"3744:23:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes[]"},"typeName":{"baseType":{"id":12255,"name":"bytes","nodeType":"ElementaryTypeName","src":"3744:5:13","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"id":12256,"nodeType":"ArrayTypeName","src":"3744:7:13","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_storage_$dyn_storage_ptr","typeString":"bytes[]"}},"visibility":"internal"},{"constant":false,"id":12259,"mutability":"mutable","name":"_strict","nameLocation":"3774:7:13","nodeType":"VariableDeclaration","scope":12264,"src":"3769:12:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":12258,"name":"bool","nodeType":"ElementaryTypeName","src":"3769:4:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"3716:66:13"},"returnParameters":{"id":12263,"nodeType":"ParameterList","parameters":[{"constant":false,"id":12262,"mutability":"mutable","name":"success","nameLocation":"3806:7:13","nodeType":"VariableDeclaration","scope":12264,"src":"3801:12:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":12261,"name":"bool","nodeType":"ElementaryTypeName","src":"3801:4:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"3800:14:13"},"scope":13658,"src":"3682:133:13","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":12265,"nodeType":"StructuredDocumentation","src":"3819:405:13","text":"@notice Executes a single arbitrary transaction\n @dev Only callable by the colony itself. If you wish to use this functionality, you should\n use the makeAbitraryTransactions function\n @param _target Contract to receive the function call\n @param _action Bytes array encoding the function call and arguments\n @return success Boolean indicating whether the transactions succeeded"},"functionSelector":"663b482d","id":12274,"implemented":false,"kind":"function","modifiers":[],"name":"makeSingleArbitraryTransaction","nameLocation":"4236:30:13","nodeType":"FunctionDefinition","parameters":{"id":12270,"nodeType":"ParameterList","parameters":[{"constant":false,"id":12267,"mutability":"mutable","name":"_target","nameLocation":"4275:7:13","nodeType":"VariableDeclaration","scope":12274,"src":"4267:15:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":12266,"name":"address","nodeType":"ElementaryTypeName","src":"4267:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":12269,"mutability":"mutable","name":"_action","nameLocation":"4297:7:13","nodeType":"VariableDeclaration","scope":12274,"src":"4284:20:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":12268,"name":"bytes","nodeType":"ElementaryTypeName","src":"4284:5:13","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4266:39:13"},"returnParameters":{"id":12273,"nodeType":"ParameterList","parameters":[{"constant":false,"id":12272,"mutability":"mutable","name":"success","nameLocation":"4329:7:13","nodeType":"VariableDeclaration","scope":12274,"src":"4324:12:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":12271,"name":"bool","nodeType":"ElementaryTypeName","src":"4324:4:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4323:14:13"},"scope":13658,"src":"4227:111:13","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":12275,"nodeType":"StructuredDocumentation","src":"4342:179:13","text":"@notice Emit a metadata string for a transaction\n @param _txHash Hash of transaction being annotated (0x0 for current tx)\n @param _metadata String of metadata for tx"},"functionSelector":"6c8ec8b5","id":12282,"implemented":false,"kind":"function","modifiers":[],"name":"annotateTransaction","nameLocation":"4533:19:13","nodeType":"FunctionDefinition","parameters":{"id":12280,"nodeType":"ParameterList","parameters":[{"constant":false,"id":12277,"mutability":"mutable","name":"_txHash","nameLocation":"4561:7:13","nodeType":"VariableDeclaration","scope":12282,"src":"4553:15:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":12276,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4553:7:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":12279,"mutability":"mutable","name":"_metadata","nameLocation":"4584:9:13","nodeType":"VariableDeclaration","scope":12282,"src":"4570:23:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":12278,"name":"string","nodeType":"ElementaryTypeName","src":"4570:6:13","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"4552:42:13"},"returnParameters":{"id":12281,"nodeType":"ParameterList","parameters":[],"src":"4603:0:13"},"scope":13658,"src":"4524:80:13","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":12283,"nodeType":"StructuredDocumentation","src":"4608:232:13","text":"@notice Set new colony root role.\n Can be called by root role only.\n @param _user User we want to give an root role to\n @param _setTo The state of the role permission (true assign the permission, false revokes it)"},"functionSelector":"e178f31a","id":12290,"implemented":false,"kind":"function","modifiers":[],"name":"setRootRole","nameLocation":"4852:11:13","nodeType":"FunctionDefinition","parameters":{"id":12288,"nodeType":"ParameterList","parameters":[{"constant":false,"id":12285,"mutability":"mutable","name":"_user","nameLocation":"4872:5:13","nodeType":"VariableDeclaration","scope":12290,"src":"4864:13:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":12284,"name":"address","nodeType":"ElementaryTypeName","src":"4864:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":12287,"mutability":"mutable","name":"_setTo","nameLocation":"4884:6:13","nodeType":"VariableDeclaration","scope":12290,"src":"4879:11:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":12286,"name":"bool","nodeType":"ElementaryTypeName","src":"4879:4:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4863:28:13"},"returnParameters":{"id":12289,"nodeType":"ParameterList","parameters":[],"src":"4900:0:13"},"scope":13658,"src":"4843:58:13","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":12291,"nodeType":"StructuredDocumentation","src":"4905:501:13","text":"@notice Set new colony arbitration role.\n Can be called by root role or architecture role.\n @param _permissionDomainId Domain in which the caller has root role\n @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`\n @param _user User we want to give an arbitration role to\n @param _domainId Domain in which we are giving user the role\n @param _setTo The state of the role permission (true assign the permission, false revokes it)"},"functionSelector":"b7e9b3f2","id":12304,"implemented":false,"kind":"function","modifiers":[],"name":"setArbitrationRole","nameLocation":"5418:18:13","nodeType":"FunctionDefinition","parameters":{"id":12302,"nodeType":"ParameterList","parameters":[{"constant":false,"id":12293,"mutability":"mutable","name":"_permissionDomainId","nameLocation":"5445:19:13","nodeType":"VariableDeclaration","scope":12304,"src":"5437:27:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":12292,"name":"uint256","nodeType":"ElementaryTypeName","src":"5437:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":12295,"mutability":"mutable","name":"_childSkillIndex","nameLocation":"5474:16:13","nodeType":"VariableDeclaration","scope":12304,"src":"5466:24:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":12294,"name":"uint256","nodeType":"ElementaryTypeName","src":"5466:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":12297,"mutability":"mutable","name":"_user","nameLocation":"5500:5:13","nodeType":"VariableDeclaration","scope":12304,"src":"5492:13:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":12296,"name":"address","nodeType":"ElementaryTypeName","src":"5492:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":12299,"mutability":"mutable","name":"_domainId","nameLocation":"5515:9:13","nodeType":"VariableDeclaration","scope":12304,"src":"5507:17:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":12298,"name":"uint256","nodeType":"ElementaryTypeName","src":"5507:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":12301,"mutability":"mutable","name":"_setTo","nameLocation":"5531:6:13","nodeType":"VariableDeclaration","scope":12304,"src":"5526:11:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":12300,"name":"bool","nodeType":"ElementaryTypeName","src":"5526:4:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"5436:102:13"},"returnParameters":{"id":12303,"nodeType":"ParameterList","parameters":[],"src":"5547:0:13"},"scope":13658,"src":"5409:139:13","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":12305,"nodeType":"StructuredDocumentation","src":"5552:516:13","text":"@notice Set new colony architecture role.\n Can be called by root role or architecture role.\n @param _permissionDomainId Domain in which the caller has root/architecture role\n @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`\n @param _user User we want to give an architecture role to\n @param _domainId Domain in which we are giving user the role\n @param _setTo The state of the role permission (true assign the permission, false revokes it)"},"functionSelector":"e9c75e47","id":12318,"implemented":false,"kind":"function","modifiers":[],"name":"setArchitectureRole","nameLocation":"6080:19:13","nodeType":"FunctionDefinition","parameters":{"id":12316,"nodeType":"ParameterList","parameters":[{"constant":false,"id":12307,"mutability":"mutable","name":"_permissionDomainId","nameLocation":"6108:19:13","nodeType":"VariableDeclaration","scope":12318,"src":"6100:27:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":12306,"name":"uint256","nodeType":"ElementaryTypeName","src":"6100:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":12309,"mutability":"mutable","name":"_childSkillIndex","nameLocation":"6137:16:13","nodeType":"VariableDeclaration","scope":12318,"src":"6129:24:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":12308,"name":"uint256","nodeType":"ElementaryTypeName","src":"6129:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":12311,"mutability":"mutable","name":"_user","nameLocation":"6163:5:13","nodeType":"VariableDeclaration","scope":12318,"src":"6155:13:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":12310,"name":"address","nodeType":"ElementaryTypeName","src":"6155:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":12313,"mutability":"mutable","name":"_domainId","nameLocation":"6178:9:13","nodeType":"VariableDeclaration","scope":12318,"src":"6170:17:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":12312,"name":"uint256","nodeType":"ElementaryTypeName","src":"6170:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":12315,"mutability":"mutable","name":"_setTo","nameLocation":"6194:6:13","nodeType":"VariableDeclaration","scope":12318,"src":"6189:11:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":12314,"name":"bool","nodeType":"ElementaryTypeName","src":"6189:4:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"6099:102:13"},"returnParameters":{"id":12317,"nodeType":"ParameterList","parameters":[],"src":"6210:0:13"},"scope":13658,"src":"6071:140:13","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":12319,"nodeType":"StructuredDocumentation","src":"6215:506:13","text":"@notice Set new colony funding role.\n Can be called by root role or architecture role.\n @param _permissionDomainId Domain in which the caller has root/architecture role\n @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`\n @param _user User we want to give an funding role to\n @param _domainId Domain in which we are giving user the role\n @param _setTo The state of the role permission (true assign the permission, false revokes it)"},"functionSelector":"9552a1e5","id":12332,"implemented":false,"kind":"function","modifiers":[],"name":"setFundingRole","nameLocation":"6733:14:13","nodeType":"FunctionDefinition","parameters":{"id":12330,"nodeType":"ParameterList","parameters":[{"constant":false,"id":12321,"mutability":"mutable","name":"_permissionDomainId","nameLocation":"6756:19:13","nodeType":"VariableDeclaration","scope":12332,"src":"6748:27:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":12320,"name":"uint256","nodeType":"ElementaryTypeName","src":"6748:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":12323,"mutability":"mutable","name":"_childSkillIndex","nameLocation":"6785:16:13","nodeType":"VariableDeclaration","scope":12332,"src":"6777:24:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":12322,"name":"uint256","nodeType":"ElementaryTypeName","src":"6777:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":12325,"mutability":"mutable","name":"_user","nameLocation":"6811:5:13","nodeType":"VariableDeclaration","scope":12332,"src":"6803:13:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":12324,"name":"address","nodeType":"ElementaryTypeName","src":"6803:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":12327,"mutability":"mutable","name":"_domainId","nameLocation":"6826:9:13","nodeType":"VariableDeclaration","scope":12332,"src":"6818:17:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":12326,"name":"uint256","nodeType":"ElementaryTypeName","src":"6818:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":12329,"mutability":"mutable","name":"_setTo","nameLocation":"6842:6:13","nodeType":"VariableDeclaration","scope":12332,"src":"6837:11:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":12328,"name":"bool","nodeType":"ElementaryTypeName","src":"6837:4:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"6747:102:13"},"returnParameters":{"id":12331,"nodeType":"ParameterList","parameters":[],"src":"6858:0:13"},"scope":13658,"src":"6724:135:13","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":12333,"nodeType":"StructuredDocumentation","src":"6863:502:13","text":"@notice Set new colony admin role.\n Can be called by root role or architecture role.\n @param _permissionDomainId Domain in which the caller has root/architecture role\n @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`\n @param _user User we want to give an admin role to\n @param _domainId Domain in which we are giving user the role\n @param _setTo The state of the role permission (true assign the permission, false revokes it)"},"functionSelector":"63331de3","id":12346,"implemented":false,"kind":"function","modifiers":[],"name":"setAdministrationRole","nameLocation":"7377:21:13","nodeType":"FunctionDefinition","parameters":{"id":12344,"nodeType":"ParameterList","parameters":[{"constant":false,"id":12335,"mutability":"mutable","name":"_permissionDomainId","nameLocation":"7407:19:13","nodeType":"VariableDeclaration","scope":12346,"src":"7399:27:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":12334,"name":"uint256","nodeType":"ElementaryTypeName","src":"7399:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":12337,"mutability":"mutable","name":"_childSkillIndex","nameLocation":"7436:16:13","nodeType":"VariableDeclaration","scope":12346,"src":"7428:24:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":12336,"name":"uint256","nodeType":"ElementaryTypeName","src":"7428:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":12339,"mutability":"mutable","name":"_user","nameLocation":"7462:5:13","nodeType":"VariableDeclaration","scope":12346,"src":"7454:13:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":12338,"name":"address","nodeType":"ElementaryTypeName","src":"7454:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":12341,"mutability":"mutable","name":"_domainId","nameLocation":"7477:9:13","nodeType":"VariableDeclaration","scope":12346,"src":"7469:17:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":12340,"name":"uint256","nodeType":"ElementaryTypeName","src":"7469:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":12343,"mutability":"mutable","name":"_setTo","nameLocation":"7493:6:13","nodeType":"VariableDeclaration","scope":12346,"src":"7488:11:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":12342,"name":"bool","nodeType":"ElementaryTypeName","src":"7488:4:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"7398:102:13"},"returnParameters":{"id":12345,"nodeType":"ParameterList","parameters":[],"src":"7509:0:13"},"scope":13658,"src":"7368:142:13","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":12347,"nodeType":"StructuredDocumentation","src":"7514:497:13","text":"@notice Set several roles in one transaction.\n Can be called by root role or architecture role.\n @param _permissionDomainId Domain in which the caller has root/architecture role\n @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`\n @param _user User we want to give a role to\n @param _domainId Domain in which we are giving user the role\n @param _roles Byte array representing the desired role setting (1 for on, 0 for off)"},"functionSelector":"cd4a72cb","id":12360,"implemented":false,"kind":"function","modifiers":[],"name":"setUserRoles","nameLocation":"8023:12:13","nodeType":"FunctionDefinition","parameters":{"id":12358,"nodeType":"ParameterList","parameters":[{"constant":false,"id":12349,"mutability":"mutable","name":"_permissionDomainId","nameLocation":"8049:19:13","nodeType":"VariableDeclaration","scope":12360,"src":"8041:27:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":12348,"name":"uint256","nodeType":"ElementaryTypeName","src":"8041:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":12351,"mutability":"mutable","name":"_childSkillIndex","nameLocation":"8082:16:13","nodeType":"VariableDeclaration","scope":12360,"src":"8074:24:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":12350,"name":"uint256","nodeType":"ElementaryTypeName","src":"8074:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":12353,"mutability":"mutable","name":"_user","nameLocation":"8112:5:13","nodeType":"VariableDeclaration","scope":12360,"src":"8104:13:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":12352,"name":"address","nodeType":"ElementaryTypeName","src":"8104:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":12355,"mutability":"mutable","name":"_domainId","nameLocation":"8131:9:13","nodeType":"VariableDeclaration","scope":12360,"src":"8123:17:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":12354,"name":"uint256","nodeType":"ElementaryTypeName","src":"8123:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":12357,"mutability":"mutable","name":"_roles","nameLocation":"8154:6:13","nodeType":"VariableDeclaration","scope":12360,"src":"8146:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":12356,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8146:7:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"8035:131:13"},"returnParameters":{"id":12359,"nodeType":"ParameterList","parameters":[],"src":"8175:0:13"},"scope":13658,"src":"8014:162:13","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":12361,"nodeType":"StructuredDocumentation","src":"8180:417:13","text":"@notice Check whether a given user has a given role for the colony.\n Calls the function of the same name on the colony's authority contract.\n @param _user The user whose role we want to check\n @param _domainId The domain where we want to check for the role\n @param _role The role we want to check for\n @return hasRole Boolean indicating whether the given user has the given role in domain"},"functionSelector":"ab2f7ae2","id":12373,"implemented":false,"kind":"function","modifiers":[],"name":"hasUserRole","nameLocation":"8609:11:13","nodeType":"FunctionDefinition","parameters":{"id":12369,"nodeType":"ParameterList","parameters":[{"constant":false,"id":12363,"mutability":"mutable","name":"_user","nameLocation":"8629:5:13","nodeType":"VariableDeclaration","scope":12373,"src":"8621:13:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":12362,"name":"address","nodeType":"ElementaryTypeName","src":"8621:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":12365,"mutability":"mutable","name":"_domainId","nameLocation":"8644:9:13","nodeType":"VariableDeclaration","scope":12373,"src":"8636:17:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":12364,"name":"uint256","nodeType":"ElementaryTypeName","src":"8636:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":12368,"mutability":"mutable","name":"_role","nameLocation":"8666:5:13","nodeType":"VariableDeclaration","scope":12373,"src":"8655:16:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_ColonyRole_$3091","typeString":"enum ColonyDataTypes.ColonyRole"},"typeName":{"id":12367,"nodeType":"UserDefinedTypeName","pathNode":{"id":12366,"name":"ColonyRole","nameLocations":["8655:10:13"],"nodeType":"IdentifierPath","referencedDeclaration":3091,"src":"8655:10:13"},"referencedDeclaration":3091,"src":"8655:10:13","typeDescriptions":{"typeIdentifier":"t_enum$_ColonyRole_$3091","typeString":"enum ColonyDataTypes.ColonyRole"}},"visibility":"internal"}],"src":"8620:52:13"},"returnParameters":{"id":12372,"nodeType":"ParameterList","parameters":[{"constant":false,"id":12371,"mutability":"mutable","name":"hasRole","nameLocation":"8701:7:13","nodeType":"VariableDeclaration","scope":12373,"src":"8696:12:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":12370,"name":"bool","nodeType":"ElementaryTypeName","src":"8696:4:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"8695:14:13"},"scope":13658,"src":"8600:110:13","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":12374,"nodeType":"StructuredDocumentation","src":"8714:637:13","text":"@notice Check whether a given user has a given role for the colony, in a child domain.\n Calls the function of the same name on the colony's authority contract and an internal inheritance validator function\n @param _user The user whose role we want to check\n @param _domainId Domain in which the caller has the role\n @param _role The role we want to check for\n @param _childSkillIndex The index that the `_childDomainId` is relative to `_domainId`\n @param _childDomainId The domain where we want to use the role\n @return hasRole Boolean indicating whether the given user has the given role in domain"},"functionSelector":"3354f138","id":12390,"implemented":false,"kind":"function","modifiers":[],"name":"hasInheritedUserRole","nameLocation":"9363:20:13","nodeType":"FunctionDefinition","parameters":{"id":12386,"nodeType":"ParameterList","parameters":[{"constant":false,"id":12376,"mutability":"mutable","name":"_user","nameLocation":"9392:5:13","nodeType":"VariableDeclaration","scope":12390,"src":"9384:13:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":12375,"name":"address","nodeType":"ElementaryTypeName","src":"9384:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":12378,"mutability":"mutable","name":"_domainId","nameLocation":"9407:9:13","nodeType":"VariableDeclaration","scope":12390,"src":"9399:17:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":12377,"name":"uint256","nodeType":"ElementaryTypeName","src":"9399:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":12381,"mutability":"mutable","name":"_role","nameLocation":"9429:5:13","nodeType":"VariableDeclaration","scope":12390,"src":"9418:16:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_ColonyRole_$3091","typeString":"enum ColonyDataTypes.ColonyRole"},"typeName":{"id":12380,"nodeType":"UserDefinedTypeName","pathNode":{"id":12379,"name":"ColonyRole","nameLocations":["9418:10:13"],"nodeType":"IdentifierPath","referencedDeclaration":3091,"src":"9418:10:13"},"referencedDeclaration":3091,"src":"9418:10:13","typeDescriptions":{"typeIdentifier":"t_enum$_ColonyRole_$3091","typeString":"enum ColonyDataTypes.ColonyRole"}},"visibility":"internal"},{"constant":false,"id":12383,"mutability":"mutable","name":"_childSkillIndex","nameLocation":"9444:16:13","nodeType":"VariableDeclaration","scope":12390,"src":"9436:24:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":12382,"name":"uint256","nodeType":"ElementaryTypeName","src":"9436:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":12385,"mutability":"mutable","name":"_childDomainId","nameLocation":"9470:14:13","nodeType":"VariableDeclaration","scope":12390,"src":"9462:22:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":12384,"name":"uint256","nodeType":"ElementaryTypeName","src":"9462:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9383:102:13"},"returnParameters":{"id":12389,"nodeType":"ParameterList","parameters":[{"constant":false,"id":12388,"mutability":"mutable","name":"hasRole","nameLocation":"9518:7:13","nodeType":"VariableDeclaration","scope":12390,"src":"9513:12:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":12387,"name":"bool","nodeType":"ElementaryTypeName","src":"9513:4:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"9512:14:13"},"scope":13658,"src":"9354:173:13","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":12391,"nodeType":"StructuredDocumentation","src":"9531:637:13","text":"@notice Check whether a given user can modify roles in the target domain `_childDomainId`.\n Mostly a convenience function to provide a uniform interface for extension contracts validating permissions\n @param _user The user whose permissions we want to check\n @param _domainId Domain in which the caller has the role (currently Root or Architecture)\n @param _childSkillIndex The index that the `_childDomainId` is relative to `_domainId`\n @param _childDomainId The domain where we want to edit roles\n @return canSet Boolean indicating whether the given user is allowed to edit roles in the target domain."},"functionSelector":"f4a8d851","id":12404,"implemented":false,"kind":"function","modifiers":[],"name":"userCanSetRoles","nameLocation":"10180:15:13","nodeType":"FunctionDefinition","parameters":{"id":12400,"nodeType":"ParameterList","parameters":[{"constant":false,"id":12393,"mutability":"mutable","name":"_user","nameLocation":"10204:5:13","nodeType":"VariableDeclaration","scope":12404,"src":"10196:13:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":12392,"name":"address","nodeType":"ElementaryTypeName","src":"10196:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":12395,"mutability":"mutable","name":"_domainId","nameLocation":"10219:9:13","nodeType":"VariableDeclaration","scope":12404,"src":"10211:17:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":12394,"name":"uint256","nodeType":"ElementaryTypeName","src":"10211:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":12397,"mutability":"mutable","name":"_childSkillIndex","nameLocation":"10238:16:13","nodeType":"VariableDeclaration","scope":12404,"src":"10230:24:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":12396,"name":"uint256","nodeType":"ElementaryTypeName","src":"10230:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":12399,"mutability":"mutable","name":"_childDomainId","nameLocation":"10264:14:13","nodeType":"VariableDeclaration","scope":12404,"src":"10256:22:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":12398,"name":"uint256","nodeType":"ElementaryTypeName","src":"10256:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10195:84:13"},"returnParameters":{"id":12403,"nodeType":"ParameterList","parameters":[{"constant":false,"id":12402,"mutability":"mutable","name":"canSet","nameLocation":"10312:6:13","nodeType":"VariableDeclaration","scope":12404,"src":"10307:11:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":12401,"name":"bool","nodeType":"ElementaryTypeName","src":"10307:4:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"10306:13:13"},"scope":13658,"src":"10171:149:13","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":12405,"nodeType":"StructuredDocumentation","src":"10324:257:13","text":"@notice Gets the bytes32 representation of the roles for a user in a given domain\n @param _user The user whose roles we want to get\n @param _domain The domain we want to get roles in\n @return roles bytes32 representation of the held roles"},"functionSelector":"595b03f0","id":12414,"implemented":false,"kind":"function","modifiers":[],"name":"getUserRoles","nameLocation":"10593:12:13","nodeType":"FunctionDefinition","parameters":{"id":12410,"nodeType":"ParameterList","parameters":[{"constant":false,"id":12407,"mutability":"mutable","name":"_user","nameLocation":"10614:5:13","nodeType":"VariableDeclaration","scope":12414,"src":"10606:13:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":12406,"name":"address","nodeType":"ElementaryTypeName","src":"10606:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":12409,"mutability":"mutable","name":"_domain","nameLocation":"10629:7:13","nodeType":"VariableDeclaration","scope":12414,"src":"10621:15:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":12408,"name":"uint256","nodeType":"ElementaryTypeName","src":"10621:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10605:32:13"},"returnParameters":{"id":12413,"nodeType":"ParameterList","parameters":[{"constant":false,"id":12412,"mutability":"mutable","name":"roles","nameLocation":"10669:5:13","nodeType":"VariableDeclaration","scope":12414,"src":"10661:13:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":12411,"name":"bytes32","nodeType":"ElementaryTypeName","src":"10661:7:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"10660:15:13"},"scope":13658,"src":"10584:92:13","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":12415,"nodeType":"StructuredDocumentation","src":"10680:194:13","text":"@notice Gets the bytes32 representation of the roles authorized to call a function\n @param _sig The function signature\n @return roles bytes32 representation of the authorized roles"},"functionSelector":"2dfbb083","id":12422,"implemented":false,"kind":"function","modifiers":[],"name":"getCapabilityRoles","nameLocation":"10886:18:13","nodeType":"FunctionDefinition","parameters":{"id":12418,"nodeType":"ParameterList","parameters":[{"constant":false,"id":12417,"mutability":"mutable","name":"_sig","nameLocation":"10912:4:13","nodeType":"VariableDeclaration","scope":12422,"src":"10905:11:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":12416,"name":"bytes4","nodeType":"ElementaryTypeName","src":"10905:6:13","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"10904:13:13"},"returnParameters":{"id":12421,"nodeType":"ParameterList","parameters":[{"constant":false,"id":12420,"mutability":"mutable","name":"roles","nameLocation":"10949:5:13","nodeType":"VariableDeclaration","scope":12422,"src":"10941:13:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":12419,"name":"bytes32","nodeType":"ElementaryTypeName","src":"10941:7:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"10940:15:13"},"scope":13658,"src":"10877:79:13","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":12423,"nodeType":"StructuredDocumentation","src":"10960:277:13","text":"@notice Emit a positive domain reputation update. Available only to Root role holders\n @param _domainId The domain where the user will gain reputation\n @param _user The user who will gain reputation\n @param _amount The (positive) amount of reputation to gain"},"functionSelector":"944c650f","id":12432,"implemented":false,"kind":"function","modifiers":[],"name":"emitDomainReputationReward","nameLocation":"11249:26:13","nodeType":"FunctionDefinition","parameters":{"id":12430,"nodeType":"ParameterList","parameters":[{"constant":false,"id":12425,"mutability":"mutable","name":"_domainId","nameLocation":"11284:9:13","nodeType":"VariableDeclaration","scope":12432,"src":"11276:17:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":12424,"name":"uint256","nodeType":"ElementaryTypeName","src":"11276:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":12427,"mutability":"mutable","name":"_user","nameLocation":"11303:5:13","nodeType":"VariableDeclaration","scope":12432,"src":"11295:13:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":12426,"name":"address","nodeType":"ElementaryTypeName","src":"11295:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":12429,"mutability":"mutable","name":"_amount","nameLocation":"11317:7:13","nodeType":"VariableDeclaration","scope":12432,"src":"11310:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":12428,"name":"int256","nodeType":"ElementaryTypeName","src":"11310:6:13","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"11275:50:13"},"returnParameters":{"id":12431,"nodeType":"ParameterList","parameters":[],"src":"11334:0:13"},"scope":13658,"src":"11240:95:13","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":12433,"nodeType":"StructuredDocumentation","src":"11339:274:13","text":"@notice Emit a positive skill reputation update. Available only to Root role holders\n @param _skillId The skill where the user will gain reputation\n @param _user The user who will gain reputation\n @param _amount The (positive) amount of reputation to gain"},"functionSelector":"596d368e","id":12442,"implemented":false,"kind":"function","modifiers":[],"name":"emitSkillReputationReward","nameLocation":"11625:25:13","nodeType":"FunctionDefinition","parameters":{"id":12440,"nodeType":"ParameterList","parameters":[{"constant":false,"id":12435,"mutability":"mutable","name":"_skillId","nameLocation":"11659:8:13","nodeType":"VariableDeclaration","scope":12442,"src":"11651:16:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":12434,"name":"uint256","nodeType":"ElementaryTypeName","src":"11651:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":12437,"mutability":"mutable","name":"_user","nameLocation":"11677:5:13","nodeType":"VariableDeclaration","scope":12442,"src":"11669:13:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":12436,"name":"address","nodeType":"ElementaryTypeName","src":"11669:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":12439,"mutability":"mutable","name":"_amount","nameLocation":"11691:7:13","nodeType":"VariableDeclaration","scope":12442,"src":"11684:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":12438,"name":"int256","nodeType":"ElementaryTypeName","src":"11684:6:13","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"11650:49:13"},"returnParameters":{"id":12441,"nodeType":"ParameterList","parameters":[],"src":"11708:0:13"},"scope":13658,"src":"11616:93:13","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":12443,"nodeType":"StructuredDocumentation","src":"11713:465:13","text":"@notice Emit a negative domain reputation update. Available only to Arbitration role holders\n @param _permissionDomainId The domainId in which I hold the Arbitration role\n @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`\n @param _domainId The domain where the user will lose reputation\n @param _user The user who will lose reputation\n @param _amount The (negative) amount of reputation to lose"},"functionSelector":"fce891a5","id":12456,"implemented":false,"kind":"function","modifiers":[],"name":"emitDomainReputationPenalty","nameLocation":"12190:27:13","nodeType":"FunctionDefinition","parameters":{"id":12454,"nodeType":"ParameterList","parameters":[{"constant":false,"id":12445,"mutability":"mutable","name":"_permissionDomainId","nameLocation":"12231:19:13","nodeType":"VariableDeclaration","scope":12456,"src":"12223:27:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":12444,"name":"uint256","nodeType":"ElementaryTypeName","src":"12223:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":12447,"mutability":"mutable","name":"_childSkillIndex","nameLocation":"12264:16:13","nodeType":"VariableDeclaration","scope":12456,"src":"12256:24:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":12446,"name":"uint256","nodeType":"ElementaryTypeName","src":"12256:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":12449,"mutability":"mutable","name":"_domainId","nameLocation":"12294:9:13","nodeType":"VariableDeclaration","scope":12456,"src":"12286:17:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":12448,"name":"uint256","nodeType":"ElementaryTypeName","src":"12286:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":12451,"mutability":"mutable","name":"_user","nameLocation":"12317:5:13","nodeType":"VariableDeclaration","scope":12456,"src":"12309:13:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":12450,"name":"address","nodeType":"ElementaryTypeName","src":"12309:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":12453,"mutability":"mutable","name":"_amount","nameLocation":"12335:7:13","nodeType":"VariableDeclaration","scope":12456,"src":"12328:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":12452,"name":"int256","nodeType":"ElementaryTypeName","src":"12328:6:13","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"12217:131:13"},"returnParameters":{"id":12455,"nodeType":"ParameterList","parameters":[],"src":"12357:0:13"},"scope":13658,"src":"12181:177:13","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":12457,"nodeType":"StructuredDocumentation","src":"12362:300:13","text":"@notice Emit a negative skill reputation update. Available only to Arbitration role holders in the root domain\n @param _skillId The skill where the user will lose reputation\n @param _user The user who will lose reputation\n @param _amount The (negative) amount of reputation to lose"},"functionSelector":"5d860695","id":12466,"implemented":false,"kind":"function","modifiers":[],"name":"emitSkillReputationPenalty","nameLocation":"12674:26:13","nodeType":"FunctionDefinition","parameters":{"id":12464,"nodeType":"ParameterList","parameters":[{"constant":false,"id":12459,"mutability":"mutable","name":"_skillId","nameLocation":"12709:8:13","nodeType":"VariableDeclaration","scope":12466,"src":"12701:16:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":12458,"name":"uint256","nodeType":"ElementaryTypeName","src":"12701:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":12461,"mutability":"mutable","name":"_user","nameLocation":"12727:5:13","nodeType":"VariableDeclaration","scope":12466,"src":"12719:13:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":12460,"name":"address","nodeType":"ElementaryTypeName","src":"12719:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":12463,"mutability":"mutable","name":"_amount","nameLocation":"12741:7:13","nodeType":"VariableDeclaration","scope":12466,"src":"12734:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":12462,"name":"int256","nodeType":"ElementaryTypeName","src":"12734:6:13","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"12700:49:13"},"returnParameters":{"id":12465,"nodeType":"ParameterList","parameters":[],"src":"12758:0:13"},"scope":13658,"src":"12665:94:13","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":12467,"nodeType":"StructuredDocumentation","src":"12763:275:13","text":"@notice Called once when the colony is created to initialise certain storage slot values.\n @dev Sets the reward inverse to the uint max 2**256 - 1.\n @param _colonyNetworkAddress Address of the colony network\n @param _token Address of the colony ERC20 Token"},"functionSelector":"79d95b92","id":12474,"implemented":false,"kind":"function","modifiers":[],"name":"initialiseColony","nameLocation":"13050:16:13","nodeType":"FunctionDefinition","parameters":{"id":12472,"nodeType":"ParameterList","parameters":[{"constant":false,"id":12469,"mutability":"mutable","name":"_colonyNetworkAddress","nameLocation":"13075:21:13","nodeType":"VariableDeclaration","scope":12474,"src":"13067:29:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":12468,"name":"address","nodeType":"ElementaryTypeName","src":"13067:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":12471,"mutability":"mutable","name":"_token","nameLocation":"13106:6:13","nodeType":"VariableDeclaration","scope":12474,"src":"13098:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":12470,"name":"address","nodeType":"ElementaryTypeName","src":"13098:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"13066:47:13"},"returnParameters":{"id":12473,"nodeType":"ParameterList","parameters":[],"src":"13122:0:13"},"scope":13658,"src":"13041:82:13","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":12475,"nodeType":"StructuredDocumentation","src":"13127:213:13","text":"@notice Called to change the metadata associated with a colony. Expected to be a IPFS hash of a\n JSON blob, but not enforced to any degree by the contracts\n @param _metadata IPFS hash of the metadata"},"functionSelector":"102b1b35","id":12480,"implemented":false,"kind":"function","modifiers":[],"name":"editColony","nameLocation":"13352:10:13","nodeType":"FunctionDefinition","parameters":{"id":12478,"nodeType":"ParameterList","parameters":[{"constant":false,"id":12477,"mutability":"mutable","name":"_metadata","nameLocation":"13377:9:13","nodeType":"VariableDeclaration","scope":12480,"src":"13363:23:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":12476,"name":"string","nodeType":"ElementaryTypeName","src":"13363:6:13","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"13362:25:13"},"returnParameters":{"id":12479,"nodeType":"ParameterList","parameters":[],"src":"13396:0:13"},"scope":13658,"src":"13343:54:13","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":12481,"nodeType":"StructuredDocumentation","src":"13401:235:13","text":"@notice Called to change the metadata associated with a colony. Expected to be a IPFS hash of a\n delta to a JSON blob, but not enforced to any degree by the contracts\n @param _metadataDelta IPFS hash of the metadata delta"},"functionSelector":"a72828b1","id":12486,"implemented":false,"kind":"function","modifiers":[],"name":"editColonyByDelta","nameLocation":"13648:17:13","nodeType":"FunctionDefinition","parameters":{"id":12484,"nodeType":"ParameterList","parameters":[{"constant":false,"id":12483,"mutability":"mutable","name":"_metadataDelta","nameLocation":"13680:14:13","nodeType":"VariableDeclaration","scope":12486,"src":"13666:28:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":12482,"name":"string","nodeType":"ElementaryTypeName","src":"13666:6:13","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"13665:30:13"},"returnParameters":{"id":12485,"nodeType":"ParameterList","parameters":[],"src":"13704:0:13"},"scope":13658,"src":"13639:66:13","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":12487,"nodeType":"StructuredDocumentation","src":"13709:440:13","text":"@notice Allows the colony to bootstrap itself by having initial reputation and token `_amount` assigned to `_users`.\n This reputation is assigned in the colony-wide domain. Secured function to authorised members.\n @dev Only allowed to be called when `taskCount` is `0` by authorized addresses.\n @param _users Array of address to bootstrap with reputation\n @param _amount Amount of reputation/tokens for every address"},"functionSelector":"e723d631","id":12496,"implemented":false,"kind":"function","modifiers":[],"name":"bootstrapColony","nameLocation":"14161:15:13","nodeType":"FunctionDefinition","parameters":{"id":12494,"nodeType":"ParameterList","parameters":[{"constant":false,"id":12490,"mutability":"mutable","name":"_users","nameLocation":"14194:6:13","nodeType":"VariableDeclaration","scope":12496,"src":"14177:23:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":12488,"name":"address","nodeType":"ElementaryTypeName","src":"14177:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":12489,"nodeType":"ArrayTypeName","src":"14177:9:13","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"},{"constant":false,"id":12493,"mutability":"mutable","name":"_amount","nameLocation":"14215:7:13","nodeType":"VariableDeclaration","scope":12496,"src":"14202:20:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_int256_$dyn_memory_ptr","typeString":"int256[]"},"typeName":{"baseType":{"id":12491,"name":"int","nodeType":"ElementaryTypeName","src":"14202:3:13","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":12492,"nodeType":"ArrayTypeName","src":"14202:5:13","typeDescriptions":{"typeIdentifier":"t_array$_t_int256_$dyn_storage_ptr","typeString":"int256[]"}},"visibility":"internal"}],"src":"14176:47:13"},"returnParameters":{"id":12495,"nodeType":"ParameterList","parameters":[],"src":"14232:0:13"},"scope":13658,"src":"14152:81:13","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":12497,"nodeType":"StructuredDocumentation","src":"14237:121:13","text":"@notice Mint `_wad` amount of colony tokens. Secured function to authorised members.\n @param _wad Amount to mint"},"functionSelector":"97304ced","id":12502,"implemented":false,"kind":"function","modifiers":[],"name":"mintTokens","nameLocation":"14370:10:13","nodeType":"FunctionDefinition","parameters":{"id":12500,"nodeType":"ParameterList","parameters":[{"constant":false,"id":12499,"mutability":"mutable","name":"_wad","nameLocation":"14389:4:13","nodeType":"VariableDeclaration","scope":12502,"src":"14381:12:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":12498,"name":"uint256","nodeType":"ElementaryTypeName","src":"14381:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"14380:14:13"},"returnParameters":{"id":12501,"nodeType":"ParameterList","parameters":[],"src":"14403:0:13"},"scope":13658,"src":"14361:43:13","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":12503,"nodeType":"StructuredDocumentation","src":"14408:182:13","text":"@notice Mint `_wad` amount of colony tokens and send to `_guy`. Secured function to authorised members.\n @param _guy Recipient of new tokens\n @param _wad Amount to mint"},"functionSelector":"8f6811a3","id":12510,"implemented":false,"kind":"function","modifiers":[],"name":"mintTokensFor","nameLocation":"14602:13:13","nodeType":"FunctionDefinition","parameters":{"id":12508,"nodeType":"ParameterList","parameters":[{"constant":false,"id":12505,"mutability":"mutable","name":"_guy","nameLocation":"14624:4:13","nodeType":"VariableDeclaration","scope":12510,"src":"14616:12:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":12504,"name":"address","nodeType":"ElementaryTypeName","src":"14616:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":12507,"mutability":"mutable","name":"_wad","nameLocation":"14638:4:13","nodeType":"VariableDeclaration","scope":12510,"src":"14630:12:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":12506,"name":"uint256","nodeType":"ElementaryTypeName","src":"14630:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"14615:28:13"},"returnParameters":{"id":12509,"nodeType":"ParameterList","parameters":[],"src":"14652:0:13"},"scope":13658,"src":"14593:60:13","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":12511,"nodeType":"StructuredDocumentation","src":"14657:154:13","text":"@notice Lock the colony's token. Can only be called by a network-managed extension.\n @return timesLocked The amount of times the token was locked"},"functionSelector":"bca7a9e2","id":12516,"implemented":false,"kind":"function","modifiers":[],"name":"lockToken","nameLocation":"14823:9:13","nodeType":"FunctionDefinition","parameters":{"id":12512,"nodeType":"ParameterList","parameters":[],"src":"14832:2:13"},"returnParameters":{"id":12515,"nodeType":"ParameterList","parameters":[{"constant":false,"id":12514,"mutability":"mutable","name":"timesLocked","nameLocation":"14861:11:13","nodeType":"VariableDeclaration","scope":12516,"src":"14853:19:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":12513,"name":"uint256","nodeType":"ElementaryTypeName","src":"14853:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"14852:21:13"},"scope":13658,"src":"14814:60:13","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":12517,"nodeType":"StructuredDocumentation","src":"14878:185:13","text":"@notice Unlock the colony's token for a user. Can only be called by a network-managed extension.\n @param user The user to unlock\n @param lockId The specific lock to unlock"},"functionSelector":"73c08dde","id":12524,"implemented":false,"kind":"function","modifiers":[],"name":"unlockTokenForUser","nameLocation":"15075:18:13","nodeType":"FunctionDefinition","parameters":{"id":12522,"nodeType":"ParameterList","parameters":[{"constant":false,"id":12519,"mutability":"mutable","name":"user","nameLocation":"15102:4:13","nodeType":"VariableDeclaration","scope":12524,"src":"15094:12:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":12518,"name":"address","nodeType":"ElementaryTypeName","src":"15094:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":12521,"mutability":"mutable","name":"lockId","nameLocation":"15116:6:13","nodeType":"VariableDeclaration","scope":12524,"src":"15108:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":12520,"name":"uint256","nodeType":"ElementaryTypeName","src":"15108:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"15093:30:13"},"returnParameters":{"id":12523,"nodeType":"ParameterList","parameters":[],"src":"15132:0:13"},"scope":13658,"src":"15066:67:13","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":12525,"nodeType":"StructuredDocumentation","src":"15137:173:13","text":"@notice Register colony's ENS label.\n @param colonyName The label to register.\n @param orbitdb The path of the orbitDB database associated with the colony name"},"functionSelector":"e2db777b","id":12532,"implemented":false,"kind":"function","modifiers":[],"name":"registerColonyLabel","nameLocation":"15322:19:13","nodeType":"FunctionDefinition","parameters":{"id":12530,"nodeType":"ParameterList","parameters":[{"constant":false,"id":12527,"mutability":"mutable","name":"colonyName","nameLocation":"15356:10:13","nodeType":"VariableDeclaration","scope":12532,"src":"15342:24:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":12526,"name":"string","nodeType":"ElementaryTypeName","src":"15342:6:13","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":12529,"mutability":"mutable","name":"orbitdb","nameLocation":"15382:7:13","nodeType":"VariableDeclaration","scope":12532,"src":"15368:21:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":12528,"name":"string","nodeType":"ElementaryTypeName","src":"15368:6:13","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"15341:49:13"},"returnParameters":{"id":12531,"nodeType":"ParameterList","parameters":[],"src":"15399:0:13"},"scope":13658,"src":"15313:87:13","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":12533,"nodeType":"StructuredDocumentation","src":"15404:192:13","text":"@notice Update a colony's orbitdb address. Can only be called by a colony with a registered subdomain\n @param orbitdb The path of the orbitDB database to be associated with the colony"},"functionSelector":"28672cea","id":12538,"implemented":false,"kind":"function","modifiers":[],"name":"updateColonyOrbitDB","nameLocation":"15608:19:13","nodeType":"FunctionDefinition","parameters":{"id":12536,"nodeType":"ParameterList","parameters":[{"constant":false,"id":12535,"mutability":"mutable","name":"orbitdb","nameLocation":"15642:7:13","nodeType":"VariableDeclaration","scope":12538,"src":"15628:21:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":12534,"name":"string","nodeType":"ElementaryTypeName","src":"15628:6:13","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"15627:23:13"},"returnParameters":{"id":12537,"nodeType":"ParameterList","parameters":[],"src":"15659:0:13"},"scope":13658,"src":"15599:61:13","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":12539,"nodeType":"StructuredDocumentation","src":"15664:231:13","text":"@notice Install an extension to the colony. Secured function to authorised members.\n @param extensionId keccak256 hash of the extension name, used as an indentifier\n @param version The new extension version to install"},"functionSelector":"9dec0910","id":12546,"implemented":false,"kind":"function","modifiers":[],"name":"installExtension","nameLocation":"15907:16:13","nodeType":"FunctionDefinition","parameters":{"id":12544,"nodeType":"ParameterList","parameters":[{"constant":false,"id":12541,"mutability":"mutable","name":"extensionId","nameLocation":"15932:11:13","nodeType":"VariableDeclaration","scope":12546,"src":"15924:19:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":12540,"name":"bytes32","nodeType":"ElementaryTypeName","src":"15924:7:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":12543,"mutability":"mutable","name":"version","nameLocation":"15953:7:13","nodeType":"VariableDeclaration","scope":12546,"src":"15945:15:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":12542,"name":"uint256","nodeType":"ElementaryTypeName","src":"15945:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"15923:38:13"},"returnParameters":{"id":12545,"nodeType":"ParameterList","parameters":[],"src":"15970:0:13"},"scope":13658,"src":"15898:73:13","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":12547,"nodeType":"StructuredDocumentation","src":"15975:267:13","text":"@notice Upgrade an extension in a colony. Secured function to authorised members.\n @param extensionId keccak256 hash of the extension name, used as an indentifier\n @param newVersion The version to upgrade to (must be one larger than the current version)"},"functionSelector":"d9bd780b","id":12554,"implemented":false,"kind":"function","modifiers":[],"name":"upgradeExtension","nameLocation":"16254:16:13","nodeType":"FunctionDefinition","parameters":{"id":12552,"nodeType":"ParameterList","parameters":[{"constant":false,"id":12549,"mutability":"mutable","name":"extensionId","nameLocation":"16279:11:13","nodeType":"VariableDeclaration","scope":12554,"src":"16271:19:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":12548,"name":"bytes32","nodeType":"ElementaryTypeName","src":"16271:7:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":12551,"mutability":"mutable","name":"newVersion","nameLocation":"16300:10:13","nodeType":"VariableDeclaration","scope":12554,"src":"16292:18:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":12550,"name":"uint256","nodeType":"ElementaryTypeName","src":"16292:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"16270:41:13"},"returnParameters":{"id":12553,"nodeType":"ParameterList","parameters":[],"src":"16320:0:13"},"scope":13658,"src":"16245:76:13","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":12555,"nodeType":"StructuredDocumentation","src":"16325:252:13","text":"@notice Set the deprecation of an extension in a colony. Secured function to authorised members.\n @param extensionId keccak256 hash of the extension name, used as an indentifier\n @param deprecated Whether to deprecate the extension or not"},"functionSelector":"04eaa104","id":12562,"implemented":false,"kind":"function","modifiers":[],"name":"deprecateExtension","nameLocation":"16589:18:13","nodeType":"FunctionDefinition","parameters":{"id":12560,"nodeType":"ParameterList","parameters":[{"constant":false,"id":12557,"mutability":"mutable","name":"extensionId","nameLocation":"16616:11:13","nodeType":"VariableDeclaration","scope":12562,"src":"16608:19:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":12556,"name":"bytes32","nodeType":"ElementaryTypeName","src":"16608:7:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":12559,"mutability":"mutable","name":"deprecated","nameLocation":"16634:10:13","nodeType":"VariableDeclaration","scope":12562,"src":"16629:15:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":12558,"name":"bool","nodeType":"ElementaryTypeName","src":"16629:4:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"16607:38:13"},"returnParameters":{"id":12561,"nodeType":"ParameterList","parameters":[],"src":"16654:0:13"},"scope":13658,"src":"16580:75:13","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":12563,"nodeType":"StructuredDocumentation","src":"16659:385:13","text":"@notice Uninstall an extension from a colony. Secured function to authorised members.\n @dev This is a permanent action -- re-installing the extension will deploy a new contract\n @dev It is recommended to deprecate an extension before uninstalling to allow active objects to be resolved\n @param extensionId keccak256 hash of the extension name, used as an indentifier"},"functionSelector":"c2308c49","id":12568,"implemented":false,"kind":"function","modifiers":[],"name":"uninstallExtension","nameLocation":"17056:18:13","nodeType":"FunctionDefinition","parameters":{"id":12566,"nodeType":"ParameterList","parameters":[{"constant":false,"id":12565,"mutability":"mutable","name":"extensionId","nameLocation":"17083:11:13","nodeType":"VariableDeclaration","scope":12568,"src":"17075:19:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":12564,"name":"bytes32","nodeType":"ElementaryTypeName","src":"17075:7:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"17074:21:13"},"returnParameters":{"id":12567,"nodeType":"ParameterList","parameters":[],"src":"17104:0:13"},"scope":13658,"src":"17047:58:13","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":12569,"nodeType":"StructuredDocumentation","src":"17109:59:13","text":"@notice Initialise the local skill tree for the colony."},"functionSelector":"2501ab2c","id":12572,"implemented":false,"kind":"function","modifiers":[],"name":"initialiseRootLocalSkill","nameLocation":"17180:24:13","nodeType":"FunctionDefinition","parameters":{"id":12570,"nodeType":"ParameterList","parameters":[],"src":"17204:2:13"},"returnParameters":{"id":12571,"nodeType":"ParameterList","parameters":[],"src":"17215:0:13"},"scope":13658,"src":"17171:45:13","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":12573,"nodeType":"StructuredDocumentation","src":"17220:89:13","text":"@notice Add a new local skill for the colony. Secured function to authorised members."},"functionSelector":"64055d04","id":12576,"implemented":false,"kind":"function","modifiers":[],"name":"addLocalSkill","nameLocation":"17321:13:13","nodeType":"FunctionDefinition","parameters":{"id":12574,"nodeType":"ParameterList","parameters":[],"src":"17334:2:13"},"returnParameters":{"id":12575,"nodeType":"ParameterList","parameters":[],"src":"17345:0:13"},"scope":13658,"src":"17312:34:13","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":12577,"nodeType":"StructuredDocumentation","src":"17350:204:13","text":"@notice Deprecate a local skill for the colony. Secured function to authorised members.\n @param localSkillId Id for the local skill\n @param deprecated Deprecation status to set for the skill"},"functionSelector":"a3fb7384","id":12584,"implemented":false,"kind":"function","modifiers":[],"name":"deprecateLocalSkill","nameLocation":"17566:19:13","nodeType":"FunctionDefinition","parameters":{"id":12582,"nodeType":"ParameterList","parameters":[{"constant":false,"id":12579,"mutability":"mutable","name":"localSkillId","nameLocation":"17594:12:13","nodeType":"VariableDeclaration","scope":12584,"src":"17586:20:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":12578,"name":"uint256","nodeType":"ElementaryTypeName","src":"17586:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":12581,"mutability":"mutable","name":"deprecated","nameLocation":"17613:10:13","nodeType":"VariableDeclaration","scope":12584,"src":"17608:15:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":12580,"name":"bool","nodeType":"ElementaryTypeName","src":"17608:4:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"17585:39:13"},"returnParameters":{"id":12583,"nodeType":"ParameterList","parameters":[],"src":"17633:0:13"},"scope":13658,"src":"17557:77:13","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":12585,"nodeType":"StructuredDocumentation","src":"17638:92:13","text":"@notice Get the root local skill id\n @return rootLocalSkill The root local skill id"},"functionSelector":"bda67023","id":12590,"implemented":false,"kind":"function","modifiers":[],"name":"getRootLocalSkill","nameLocation":"17742:17:13","nodeType":"FunctionDefinition","parameters":{"id":12586,"nodeType":"ParameterList","parameters":[],"src":"17759:2:13"},"returnParameters":{"id":12589,"nodeType":"ParameterList","parameters":[{"constant":false,"id":12588,"mutability":"mutable","name":"rootLocalSkill","nameLocation":"17793:14:13","nodeType":"VariableDeclaration","scope":12590,"src":"17785:22:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":12587,"name":"uint256","nodeType":"ElementaryTypeName","src":"17785:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"17784:24:13"},"scope":13658,"src":"17733:76:13","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":12591,"nodeType":"StructuredDocumentation","src":"17813:580:13","text":"@notice Add a colony domain, and its respective local skill under skill with id `_parentSkillId`.\n New funding pot is created and associated with the domain here.\n @param _permissionDomainId The domainId in which I have the permission to take this action\n @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`\n @param _parentDomainId Id of the domain under which the new one will be added\n @dev Adding new domains is currently retricted to one level only, i.e. `_parentDomainId` has to be the root domain id: `1`."},"functionSelector":"1f7e3ebe","id":12600,"implemented":false,"kind":"function","modifiers":[],"name":"addDomain","nameLocation":"18405:9:13","nodeType":"FunctionDefinition","parameters":{"id":12598,"nodeType":"ParameterList","parameters":[{"constant":false,"id":12593,"mutability":"mutable","name":"_permissionDomainId","nameLocation":"18423:19:13","nodeType":"VariableDeclaration","scope":12600,"src":"18415:27:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":12592,"name":"uint256","nodeType":"ElementaryTypeName","src":"18415:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":12595,"mutability":"mutable","name":"_childSkillIndex","nameLocation":"18452:16:13","nodeType":"VariableDeclaration","scope":12600,"src":"18444:24:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":12594,"name":"uint256","nodeType":"ElementaryTypeName","src":"18444:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":12597,"mutability":"mutable","name":"_parentDomainId","nameLocation":"18478:15:13","nodeType":"VariableDeclaration","scope":12600,"src":"18470:23:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":12596,"name":"uint256","nodeType":"ElementaryTypeName","src":"18470:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"18414:80:13"},"returnParameters":{"id":12599,"nodeType":"ParameterList","parameters":[],"src":"18503:0:13"},"scope":13658,"src":"18396:108:13","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":12601,"nodeType":"StructuredDocumentation","src":"18508:779:13","text":"@notice Add a colony domain, and its respective local skill under skill with id `_parentSkillId`.\n New funding pot is created and associated with the domain here.\n @param _permissionDomainId The domainId in which I have the permission to take this action\n @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`\n @param _parentDomainId Id of the domain under which the new one will be added\n @param _metadata Metadata relating to the domain. Expected to be the IPFS hash of a JSON blob, but not enforced by the contracts.\n @dev Adding new domains is currently retricted to one level only, i.e. `_parentDomainId` has to be the root domain id: `1`.\n @dev We expect this function to only be used by the dapp"},"functionSelector":"df91f650","id":12612,"implemented":false,"kind":"function","modifiers":[],"name":"addDomain","nameLocation":"19299:9:13","nodeType":"FunctionDefinition","parameters":{"id":12610,"nodeType":"ParameterList","parameters":[{"constant":false,"id":12603,"mutability":"mutable","name":"_permissionDomainId","nameLocation":"19317:19:13","nodeType":"VariableDeclaration","scope":12612,"src":"19309:27:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":12602,"name":"uint256","nodeType":"ElementaryTypeName","src":"19309:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":12605,"mutability":"mutable","name":"_childSkillIndex","nameLocation":"19346:16:13","nodeType":"VariableDeclaration","scope":12612,"src":"19338:24:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":12604,"name":"uint256","nodeType":"ElementaryTypeName","src":"19338:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":12607,"mutability":"mutable","name":"_parentDomainId","nameLocation":"19372:15:13","nodeType":"VariableDeclaration","scope":12612,"src":"19364:23:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":12606,"name":"uint256","nodeType":"ElementaryTypeName","src":"19364:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":12609,"mutability":"mutable","name":"_metadata","nameLocation":"19403:9:13","nodeType":"VariableDeclaration","scope":12612,"src":"19389:23:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":12608,"name":"string","nodeType":"ElementaryTypeName","src":"19389:6:13","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"19308:105:13"},"returnParameters":{"id":12611,"nodeType":"ParameterList","parameters":[],"src":"19422:0:13"},"scope":13658,"src":"19290:133:13","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":12613,"nodeType":"StructuredDocumentation","src":"19427:555:13","text":"@notice Add a colony domain, and its respective local skill under skill with id `_parentSkillId`.\n New funding pot is created and associated with the domain here.\n @param _permissionDomainId The domainId in which I have the permission to take this action\n @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`\n @param _domainId Id of the domain being edited\n @param _metadata Metadata relating to the domain. Expected to be the IPFS hash of a JSON blob, but not enforced by the contracts."},"functionSelector":"6406b868","id":12624,"implemented":false,"kind":"function","modifiers":[],"name":"editDomain","nameLocation":"19994:10:13","nodeType":"FunctionDefinition","parameters":{"id":12622,"nodeType":"ParameterList","parameters":[{"constant":false,"id":12615,"mutability":"mutable","name":"_permissionDomainId","nameLocation":"20013:19:13","nodeType":"VariableDeclaration","scope":12624,"src":"20005:27:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":12614,"name":"uint256","nodeType":"ElementaryTypeName","src":"20005:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":12617,"mutability":"mutable","name":"_childSkillIndex","nameLocation":"20042:16:13","nodeType":"VariableDeclaration","scope":12624,"src":"20034:24:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":12616,"name":"uint256","nodeType":"ElementaryTypeName","src":"20034:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":12619,"mutability":"mutable","name":"_domainId","nameLocation":"20068:9:13","nodeType":"VariableDeclaration","scope":12624,"src":"20060:17:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":12618,"name":"uint256","nodeType":"ElementaryTypeName","src":"20060:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":12621,"mutability":"mutable","name":"_metadata","nameLocation":"20093:9:13","nodeType":"VariableDeclaration","scope":12624,"src":"20079:23:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":12620,"name":"string","nodeType":"ElementaryTypeName","src":"20079:6:13","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"20004:99:13"},"returnParameters":{"id":12623,"nodeType":"ParameterList","parameters":[],"src":"20112:0:13"},"scope":13658,"src":"19985:128:13","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":12625,"nodeType":"StructuredDocumentation","src":"20117:396:13","text":"@notice Deprecate a domain, preventing certain actions from happening there\n @param _permissionDomainId The domainId in which I have the permission to take this action\n @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`\n @param _domainId Id of the domain being deprecated\n @param _deprecated Whether or not the domain is deprecated"},"functionSelector":"e70e808d","id":12636,"implemented":false,"kind":"function","modifiers":[],"name":"deprecateDomain","nameLocation":"20525:15:13","nodeType":"FunctionDefinition","parameters":{"id":12634,"nodeType":"ParameterList","parameters":[{"constant":false,"id":12627,"mutability":"mutable","name":"_permissionDomainId","nameLocation":"20549:19:13","nodeType":"VariableDeclaration","scope":12636,"src":"20541:27:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":12626,"name":"uint256","nodeType":"ElementaryTypeName","src":"20541:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":12629,"mutability":"mutable","name":"_childSkillIndex","nameLocation":"20578:16:13","nodeType":"VariableDeclaration","scope":12636,"src":"20570:24:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":12628,"name":"uint256","nodeType":"ElementaryTypeName","src":"20570:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":12631,"mutability":"mutable","name":"_domainId","nameLocation":"20604:9:13","nodeType":"VariableDeclaration","scope":12636,"src":"20596:17:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":12630,"name":"uint256","nodeType":"ElementaryTypeName","src":"20596:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":12633,"mutability":"mutable","name":"_deprecated","nameLocation":"20620:11:13","nodeType":"VariableDeclaration","scope":12636,"src":"20615:16:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":12632,"name":"bool","nodeType":"ElementaryTypeName","src":"20615:4:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"20540:92:13"},"returnParameters":{"id":12635,"nodeType":"ParameterList","parameters":[],"src":"20641:0:13"},"scope":13658,"src":"20516:126:13","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":12637,"nodeType":"StructuredDocumentation","src":"20646:118:13","text":"@notice Get a domain by id.\n @param _id Id of the domain which details to get\n @return domain The domain"},"functionSelector":"1a7a98e2","id":12645,"implemented":false,"kind":"function","modifiers":[],"name":"getDomain","nameLocation":"20776:9:13","nodeType":"FunctionDefinition","parameters":{"id":12640,"nodeType":"ParameterList","parameters":[{"constant":false,"id":12639,"mutability":"mutable","name":"_id","nameLocation":"20794:3:13","nodeType":"VariableDeclaration","scope":12645,"src":"20786:11:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":12638,"name":"uint256","nodeType":"ElementaryTypeName","src":"20786:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"20785:13:13"},"returnParameters":{"id":12644,"nodeType":"ParameterList","parameters":[{"constant":false,"id":12643,"mutability":"mutable","name":"domain","nameLocation":"20836:6:13","nodeType":"VariableDeclaration","scope":12645,"src":"20822:20:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Domain_$3135_memory_ptr","typeString":"struct ColonyDataTypes.Domain"},"typeName":{"id":12642,"nodeType":"UserDefinedTypeName","pathNode":{"id":12641,"name":"Domain","nameLocations":["20822:6:13"],"nodeType":"IdentifierPath","referencedDeclaration":3135,"src":"20822:6:13"},"referencedDeclaration":3135,"src":"20822:6:13","typeDescriptions":{"typeIdentifier":"t_struct$_Domain_$3135_storage_ptr","typeString":"struct ColonyDataTypes.Domain"}},"visibility":"internal"}],"src":"20821:22:13"},"scope":13658,"src":"20767:77:13","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":12646,"nodeType":"StructuredDocumentation","src":"20848:157:13","text":"@notice Get the number of domains in the colony.\n @return count The domain count. Min 1 as the root domain is created at the same time as the colony"},"functionSelector":"13e91f08","id":12651,"implemented":false,"kind":"function","modifiers":[],"name":"getDomainCount","nameLocation":"21017:14:13","nodeType":"FunctionDefinition","parameters":{"id":12647,"nodeType":"ParameterList","parameters":[],"src":"21031:2:13"},"returnParameters":{"id":12650,"nodeType":"ParameterList","parameters":[{"constant":false,"id":12649,"mutability":"mutable","name":"count","nameLocation":"21065:5:13","nodeType":"VariableDeclaration","scope":12651,"src":"21057:13:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":12648,"name":"uint256","nodeType":"ElementaryTypeName","src":"21057:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"21056:15:13"},"scope":13658,"src":"21008:64:13","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":12652,"nodeType":"StructuredDocumentation","src":"21076:822:13","text":"@notice Helper function that can be used by a client to verify the correctness of a patricia proof they have been supplied with.\n @param key The key of the element the proof is for.\n @param value The value of the element that the proof is for.\n @param branchMask The branchmask of the proof\n @param siblings The siblings of the proof\n @return isValid True if the proof is valid, false otherwise.\n @dev For more detail about branchMask and siblings, examine the PatriciaTree implementation.\n While external, likely only to be used by the Colony contracts, as it checks that the user is proving their own\n reputation in the current colony. The `verifyProof` function can be used to verify any proof, though this function\n is not currently exposed on the Colony's EtherRouter."},"functionSelector":"96d933e0","id":12666,"implemented":false,"kind":"function","modifiers":[],"name":"verifyReputationProof","nameLocation":"21910:21:13","nodeType":"FunctionDefinition","parameters":{"id":12662,"nodeType":"ParameterList","parameters":[{"constant":false,"id":12654,"mutability":"mutable","name":"key","nameLocation":"21945:3:13","nodeType":"VariableDeclaration","scope":12666,"src":"21932:16:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":12653,"name":"bytes","nodeType":"ElementaryTypeName","src":"21932:5:13","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":12656,"mutability":"mutable","name":"value","nameLocation":"21963:5:13","nodeType":"VariableDeclaration","scope":12666,"src":"21950:18:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":12655,"name":"bytes","nodeType":"ElementaryTypeName","src":"21950:5:13","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":12658,"mutability":"mutable","name":"branchMask","nameLocation":"21978:10:13","nodeType":"VariableDeclaration","scope":12666,"src":"21970:18:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":12657,"name":"uint256","nodeType":"ElementaryTypeName","src":"21970:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":12661,"mutability":"mutable","name":"siblings","nameLocation":"22007:8:13","nodeType":"VariableDeclaration","scope":12666,"src":"21990:25:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":12659,"name":"bytes32","nodeType":"ElementaryTypeName","src":"21990:7:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":12660,"nodeType":"ArrayTypeName","src":"21990:9:13","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"src":"21931:85:13"},"returnParameters":{"id":12665,"nodeType":"ParameterList","parameters":[{"constant":false,"id":12664,"mutability":"mutable","name":"isValid","nameLocation":"22049:7:13","nodeType":"VariableDeclaration","scope":12666,"src":"22044:12:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":12663,"name":"bool","nodeType":"ElementaryTypeName","src":"22044:4:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"22043:14:13"},"scope":13658,"src":"21901:157:13","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":12667,"nodeType":"StructuredDocumentation","src":"22105:132:13","text":"@notice Update the default global claim delay for expenditures\n @param _globalClaimDelay The new default global claim delay"},"functionSelector":"8c2c0421","id":12672,"implemented":false,"kind":"function","modifiers":[],"name":"setDefaultGlobalClaimDelay","nameLocation":"22249:26:13","nodeType":"FunctionDefinition","parameters":{"id":12670,"nodeType":"ParameterList","parameters":[{"constant":false,"id":12669,"mutability":"mutable","name":"_globalClaimDelay","nameLocation":"22284:17:13","nodeType":"VariableDeclaration","scope":12672,"src":"22276:25:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":12668,"name":"uint256","nodeType":"ElementaryTypeName","src":"22276:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"22275:27:13"},"returnParameters":{"id":12671,"nodeType":"ParameterList","parameters":[],"src":"22311:0:13"},"scope":13658,"src":"22240:72:13","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":12673,"nodeType":"StructuredDocumentation","src":"22316:491:13","text":"@notice Add a new expenditure in the colony. Secured function to authorised members.\n @param _permissionDomainId The domainId in which I have the permission to take this action\n @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`,\n (only used if `_permissionDomainId` is different to `_domainId`)\n @param _domainId The domain where the expenditure belongs\n @return expenditureId Identifier of the newly created expenditure"},"functionSelector":"a5487a37","id":12684,"implemented":false,"kind":"function","modifiers":[],"name":"makeExpenditure","nameLocation":"22819:15:13","nodeType":"FunctionDefinition","parameters":{"id":12680,"nodeType":"ParameterList","parameters":[{"constant":false,"id":12675,"mutability":"mutable","name":"_permissionDomainId","nameLocation":"22843:19:13","nodeType":"VariableDeclaration","scope":12684,"src":"22835:27:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":12674,"name":"uint256","nodeType":"ElementaryTypeName","src":"22835:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":12677,"mutability":"mutable","name":"_childSkillIndex","nameLocation":"22872:16:13","nodeType":"VariableDeclaration","scope":12684,"src":"22864:24:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":12676,"name":"uint256","nodeType":"ElementaryTypeName","src":"22864:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":12679,"mutability":"mutable","name":"_domainId","nameLocation":"22898:9:13","nodeType":"VariableDeclaration","scope":12684,"src":"22890:17:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":12678,"name":"uint256","nodeType":"ElementaryTypeName","src":"22890:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"22834:74:13"},"returnParameters":{"id":12683,"nodeType":"ParameterList","parameters":[{"constant":false,"id":12682,"mutability":"mutable","name":"expenditureId","nameLocation":"22935:13:13","nodeType":"VariableDeclaration","scope":12684,"src":"22927:21:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":12681,"name":"uint256","nodeType":"ElementaryTypeName","src":"22927:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"22926:23:13"},"scope":13658,"src":"22810:140:13","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":12685,"nodeType":"StructuredDocumentation","src":"22954:171:13","text":"@notice Updates the expenditure owner. Can only be called by expenditure owner.\n @param _id Expenditure identifier\n @param _newOwner New owner of expenditure"},"functionSelector":"fe40fbe5","id":12692,"implemented":false,"kind":"function","modifiers":[],"name":"transferExpenditure","nameLocation":"23137:19:13","nodeType":"FunctionDefinition","parameters":{"id":12690,"nodeType":"ParameterList","parameters":[{"constant":false,"id":12687,"mutability":"mutable","name":"_id","nameLocation":"23165:3:13","nodeType":"VariableDeclaration","scope":12692,"src":"23157:11:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":12686,"name":"uint256","nodeType":"ElementaryTypeName","src":"23157:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":12689,"mutability":"mutable","name":"_newOwner","nameLocation":"23178:9:13","nodeType":"VariableDeclaration","scope":12692,"src":"23170:17:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":12688,"name":"address","nodeType":"ElementaryTypeName","src":"23170:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"23156:32:13"},"returnParameters":{"id":12691,"nodeType":"ParameterList","parameters":[],"src":"23197:0:13"},"scope":13658,"src":"23128:70:13","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":12693,"nodeType":"StructuredDocumentation","src":"23202:537:13","text":"@notice @deprecated\n @notice Updates the expenditure owner. Can only be called by Arbitration role.\n @dev This is now deprecated and will be removed in a future version\n @param _permissionDomainId The domainId in which I have the permission to take this action\n @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`,\n (only used if `_permissionDomainId` is different to `_domainId`)\n @param _id Expenditure identifier\n @param _newOwner New owner of expenditure"},"functionSelector":"2c176360","id":12704,"implemented":false,"kind":"function","modifiers":[],"name":"transferExpenditureViaArbitration","nameLocation":"23751:33:13","nodeType":"FunctionDefinition","parameters":{"id":12702,"nodeType":"ParameterList","parameters":[{"constant":false,"id":12695,"mutability":"mutable","name":"_permissionDomainId","nameLocation":"23793:19:13","nodeType":"VariableDeclaration","scope":12704,"src":"23785:27:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":12694,"name":"uint256","nodeType":"ElementaryTypeName","src":"23785:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":12697,"mutability":"mutable","name":"_childSkillIndex","nameLocation":"23822:16:13","nodeType":"VariableDeclaration","scope":12704,"src":"23814:24:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":12696,"name":"uint256","nodeType":"ElementaryTypeName","src":"23814:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":12699,"mutability":"mutable","name":"_id","nameLocation":"23848:3:13","nodeType":"VariableDeclaration","scope":12704,"src":"23840:11:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":12698,"name":"uint256","nodeType":"ElementaryTypeName","src":"23840:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":12701,"mutability":"mutable","name":"_newOwner","nameLocation":"23861:9:13","nodeType":"VariableDeclaration","scope":12704,"src":"23853:17:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":12700,"name":"address","nodeType":"ElementaryTypeName","src":"23853:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"23784:87:13"},"returnParameters":{"id":12703,"nodeType":"ParameterList","parameters":[],"src":"23880:0:13"},"scope":13658,"src":"23742:139:13","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":12705,"nodeType":"StructuredDocumentation","src":"23885:146:13","text":"@notice Cancels the expenditure and prevents further editing. Can only be called by expenditure owner.\n @param _id Expenditure identifier"},"functionSelector":"3ddd42d0","id":12710,"implemented":false,"kind":"function","modifiers":[],"name":"cancelExpenditure","nameLocation":"24043:17:13","nodeType":"FunctionDefinition","parameters":{"id":12708,"nodeType":"ParameterList","parameters":[{"constant":false,"id":12707,"mutability":"mutable","name":"_id","nameLocation":"24069:3:13","nodeType":"VariableDeclaration","scope":12710,"src":"24061:11:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":12706,"name":"uint256","nodeType":"ElementaryTypeName","src":"24061:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"24060:13:13"},"returnParameters":{"id":12709,"nodeType":"ParameterList","parameters":[],"src":"24082:0:13"},"scope":13658,"src":"24034:49:13","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":12711,"nodeType":"StructuredDocumentation","src":"24087:144:13","text":"@notice Locks the expenditure and prevents further editing. Can only be called by expenditure owner.\n @param _id Expenditure identifier"},"functionSelector":"7883b770","id":12716,"implemented":false,"kind":"function","modifiers":[],"name":"lockExpenditure","nameLocation":"24243:15:13","nodeType":"FunctionDefinition","parameters":{"id":12714,"nodeType":"ParameterList","parameters":[{"constant":false,"id":12713,"mutability":"mutable","name":"_id","nameLocation":"24267:3:13","nodeType":"VariableDeclaration","scope":12716,"src":"24259:11:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":12712,"name":"uint256","nodeType":"ElementaryTypeName","src":"24259:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"24258:13:13"},"returnParameters":{"id":12715,"nodeType":"ParameterList","parameters":[],"src":"24280:0:13"},"scope":13658,"src":"24234:47:13","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":12717,"nodeType":"StructuredDocumentation","src":"24285:154:13","text":"@notice Finalizes the expenditure and allows for funds to be claimed. Can only be called by expenditure owner.\n @param _id Expenditure identifier"},"functionSelector":"b3e75ec6","id":12722,"implemented":false,"kind":"function","modifiers":[],"name":"finalizeExpenditure","nameLocation":"24451:19:13","nodeType":"FunctionDefinition","parameters":{"id":12720,"nodeType":"ParameterList","parameters":[{"constant":false,"id":12719,"mutability":"mutable","name":"_id","nameLocation":"24479:3:13","nodeType":"VariableDeclaration","scope":12722,"src":"24471:11:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":12718,"name":"uint256","nodeType":"ElementaryTypeName","src":"24471:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"24470:13:13"},"returnParameters":{"id":12721,"nodeType":"ParameterList","parameters":[],"src":"24492:0:13"},"scope":13658,"src":"24442:51:13","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":12723,"nodeType":"StructuredDocumentation","src":"24497:245:13","text":"@notice Sets the metadata for an expenditure. Can only be called by expenditure owner.\n @dev Can only be called while expenditure is in draft state.\n @param _id Id of the expenditure\n @param _metadata IPFS hash of the metadata"},"functionSelector":"e68fc17d","id":12730,"implemented":false,"kind":"function","modifiers":[],"name":"setExpenditureMetadata","nameLocation":"24754:22:13","nodeType":"FunctionDefinition","parameters":{"id":12728,"nodeType":"ParameterList","parameters":[{"constant":false,"id":12725,"mutability":"mutable","name":"_id","nameLocation":"24785:3:13","nodeType":"VariableDeclaration","scope":12730,"src":"24777:11:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":12724,"name":"uint256","nodeType":"ElementaryTypeName","src":"24777:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":12727,"mutability":"mutable","name":"_metadata","nameLocation":"24804:9:13","nodeType":"VariableDeclaration","scope":12730,"src":"24790:23:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":12726,"name":"string","nodeType":"ElementaryTypeName","src":"24790:6:13","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"24776:38:13"},"returnParameters":{"id":12729,"nodeType":"ParameterList","parameters":[],"src":"24823:0:13"},"scope":13658,"src":"24745:79:13","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":12731,"nodeType":"StructuredDocumentation","src":"24828:373:13","text":"@notice Sets the metadata for an expenditure. Can only be called by Arbitration role.\n @param _permissionDomainId The domainId in which I have the permission to take this action\n @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`,\n @param _id Id of the expenditure\n @param _metadata IPFS hash of the metadata"},"functionSelector":"6b9bf027","id":12742,"implemented":false,"kind":"function","modifiers":[],"name":"setExpenditureMetadata","nameLocation":"25213:22:13","nodeType":"FunctionDefinition","parameters":{"id":12740,"nodeType":"ParameterList","parameters":[{"constant":false,"id":12733,"mutability":"mutable","name":"_permissionDomainId","nameLocation":"25244:19:13","nodeType":"VariableDeclaration","scope":12742,"src":"25236:27:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":12732,"name":"uint256","nodeType":"ElementaryTypeName","src":"25236:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":12735,"mutability":"mutable","name":"_childSkillIndex","nameLocation":"25273:16:13","nodeType":"VariableDeclaration","scope":12742,"src":"25265:24:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":12734,"name":"uint256","nodeType":"ElementaryTypeName","src":"25265:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":12737,"mutability":"mutable","name":"_id","nameLocation":"25299:3:13","nodeType":"VariableDeclaration","scope":12742,"src":"25291:11:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":12736,"name":"uint256","nodeType":"ElementaryTypeName","src":"25291:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":12739,"mutability":"mutable","name":"_metadata","nameLocation":"25318:9:13","nodeType":"VariableDeclaration","scope":12742,"src":"25304:23:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":12738,"name":"string","nodeType":"ElementaryTypeName","src":"25304:6:13","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"25235:93:13"},"returnParameters":{"id":12741,"nodeType":"ParameterList","parameters":[],"src":"25337:0:13"},"scope":13658,"src":"25204:134:13","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":12743,"nodeType":"StructuredDocumentation","src":"25342:326:13","text":"@notice @deprecated\n @notice Sets the recipient on an expenditure slot. Can only be called by expenditure owner.\n @dev Can only be called while expenditure is in draft state.\n @param _id Id of the expenditure\n @param _slot Slot for the recipient address\n @param _recipient Address of the recipient"},"functionSelector":"17b46cb7","id":12752,"implemented":false,"kind":"function","modifiers":[],"name":"setExpenditureRecipient","nameLocation":"25680:23:13","nodeType":"FunctionDefinition","parameters":{"id":12750,"nodeType":"ParameterList","parameters":[{"constant":false,"id":12745,"mutability":"mutable","name":"_id","nameLocation":"25712:3:13","nodeType":"VariableDeclaration","scope":12752,"src":"25704:11:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":12744,"name":"uint256","nodeType":"ElementaryTypeName","src":"25704:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":12747,"mutability":"mutable","name":"_slot","nameLocation":"25725:5:13","nodeType":"VariableDeclaration","scope":12752,"src":"25717:13:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":12746,"name":"uint256","nodeType":"ElementaryTypeName","src":"25717:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":12749,"mutability":"mutable","name":"_recipient","nameLocation":"25748:10:13","nodeType":"VariableDeclaration","scope":12752,"src":"25732:26:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":12748,"name":"address","nodeType":"ElementaryTypeName","src":"25732:15:13","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"internal"}],"src":"25703:56:13"},"returnParameters":{"id":12751,"nodeType":"ParameterList","parameters":[],"src":"25768:0:13"},"scope":13658,"src":"25671:98:13","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":12753,"nodeType":"StructuredDocumentation","src":"25773:312:13","text":"@notice Sets the recipients in given expenditure slots. Can only be called by expenditure owner.\n @dev Can only be called while expenditure is in draft state.\n @param _id Id of the expenditure\n @param _slots Array of slots to set recipients\n @param _recipients Addresses of the recipients"},"functionSelector":"ceba22fe","id":12764,"implemented":false,"kind":"function","modifiers":[],"name":"setExpenditureRecipients","nameLocation":"26097:24:13","nodeType":"FunctionDefinition","parameters":{"id":12762,"nodeType":"ParameterList","parameters":[{"constant":false,"id":12755,"mutability":"mutable","name":"_id","nameLocation":"26130:3:13","nodeType":"VariableDeclaration","scope":12764,"src":"26122:11:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":12754,"name":"uint256","nodeType":"ElementaryTypeName","src":"26122:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":12758,"mutability":"mutable","name":"_slots","nameLocation":"26152:6:13","nodeType":"VariableDeclaration","scope":12764,"src":"26135:23:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":12756,"name":"uint256","nodeType":"ElementaryTypeName","src":"26135:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":12757,"nodeType":"ArrayTypeName","src":"26135:9:13","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":12761,"mutability":"mutable","name":"_recipients","nameLocation":"26185:11:13","nodeType":"VariableDeclaration","scope":12764,"src":"26160:36:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_payable_$dyn_memory_ptr","typeString":"address payable[]"},"typeName":{"baseType":{"id":12759,"name":"address","nodeType":"ElementaryTypeName","src":"26160:15:13","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":12760,"nodeType":"ArrayTypeName","src":"26160:17:13","typeDescriptions":{"typeIdentifier":"t_array$_t_address_payable_$dyn_storage_ptr","typeString":"address payable[]"}},"visibility":"internal"}],"src":"26121:76:13"},"returnParameters":{"id":12763,"nodeType":"ParameterList","parameters":[],"src":"26206:0:13"},"scope":13658,"src":"26088:119:13","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":12765,"nodeType":"StructuredDocumentation","src":"26211:372:13","text":"@notice @deprecated\n @notice Set the token payout on an expenditure slot. Can only be called by expenditure owner.\n @dev Can only be called while expenditure is in draft state.\n @param _id Id of the expenditure\n @param _slot Number of the slot\n @param _token Address of the token, `0x0` value indicates Ether\n @param _amount Payout amount"},"functionSelector":"476d1d05","id":12776,"implemented":false,"kind":"function","modifiers":[],"name":"setExpenditurePayout","nameLocation":"26595:20:13","nodeType":"FunctionDefinition","parameters":{"id":12774,"nodeType":"ParameterList","parameters":[{"constant":false,"id":12767,"mutability":"mutable","name":"_id","nameLocation":"26624:3:13","nodeType":"VariableDeclaration","scope":12776,"src":"26616:11:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":12766,"name":"uint256","nodeType":"ElementaryTypeName","src":"26616:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":12769,"mutability":"mutable","name":"_slot","nameLocation":"26637:5:13","nodeType":"VariableDeclaration","scope":12776,"src":"26629:13:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":12768,"name":"uint256","nodeType":"ElementaryTypeName","src":"26629:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":12771,"mutability":"mutable","name":"_token","nameLocation":"26652:6:13","nodeType":"VariableDeclaration","scope":12776,"src":"26644:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":12770,"name":"address","nodeType":"ElementaryTypeName","src":"26644:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":12773,"mutability":"mutable","name":"_amount","nameLocation":"26668:7:13","nodeType":"VariableDeclaration","scope":12776,"src":"26660:15:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":12772,"name":"uint256","nodeType":"ElementaryTypeName","src":"26660:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"26615:61:13"},"returnParameters":{"id":12775,"nodeType":"ParameterList","parameters":[],"src":"26685:0:13"},"scope":13658,"src":"26586:100:13","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":12777,"nodeType":"StructuredDocumentation","src":"26690:365:13","text":"@notice Set the token payouts in given expenditure slots. Can only be called by expenditure owner.\n @dev Can only be called while expenditure is in draft state.\n @param _id Id of the expenditure\n @param _slots Array of slots to set payouts\n @param _token Address of the token, `0x0` value indicates Ether\n @param _amounts Payout amounts"},"functionSelector":"fc9bdbfe","id":12790,"implemented":false,"kind":"function","modifiers":[],"name":"setExpenditurePayouts","nameLocation":"27067:21:13","nodeType":"FunctionDefinition","parameters":{"id":12788,"nodeType":"ParameterList","parameters":[{"constant":false,"id":12779,"mutability":"mutable","name":"_id","nameLocation":"27097:3:13","nodeType":"VariableDeclaration","scope":12790,"src":"27089:11:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":12778,"name":"uint256","nodeType":"ElementaryTypeName","src":"27089:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":12782,"mutability":"mutable","name":"_slots","nameLocation":"27119:6:13","nodeType":"VariableDeclaration","scope":12790,"src":"27102:23:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":12780,"name":"uint256","nodeType":"ElementaryTypeName","src":"27102:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":12781,"nodeType":"ArrayTypeName","src":"27102:9:13","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":12784,"mutability":"mutable","name":"_token","nameLocation":"27135:6:13","nodeType":"VariableDeclaration","scope":12790,"src":"27127:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":12783,"name":"address","nodeType":"ElementaryTypeName","src":"27127:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":12787,"mutability":"mutable","name":"_amounts","nameLocation":"27160:8:13","nodeType":"VariableDeclaration","scope":12790,"src":"27143:25:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":12785,"name":"uint256","nodeType":"ElementaryTypeName","src":"27143:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":12786,"nodeType":"ArrayTypeName","src":"27143:9:13","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"27088:81:13"},"returnParameters":{"id":12789,"nodeType":"ParameterList","parameters":[],"src":"27178:0:13"},"scope":13658,"src":"27058:121:13","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":12791,"nodeType":"StructuredDocumentation","src":"27183:489:13","text":"@notice Set the token payout in a given expenditure slot. Can only be called by an Arbitration user.\n @param _permissionDomainId The domainId in which I have the permission to take this action\n @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`\n @param _id Id of the expenditure\n @param _slot The slot to set the payout\n @param _token Address of the token, `0x0` value indicates Ether\n @param _amount Payout amount"},"functionSelector":"bae82ec9","id":12806,"implemented":false,"kind":"function","modifiers":[],"name":"setExpenditurePayout","nameLocation":"27684:20:13","nodeType":"FunctionDefinition","parameters":{"id":12804,"nodeType":"ParameterList","parameters":[{"constant":false,"id":12793,"mutability":"mutable","name":"_permissionDomainId","nameLocation":"27718:19:13","nodeType":"VariableDeclaration","scope":12806,"src":"27710:27:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":12792,"name":"uint256","nodeType":"ElementaryTypeName","src":"27710:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":12795,"mutability":"mutable","name":"_childSkillIndex","nameLocation":"27751:16:13","nodeType":"VariableDeclaration","scope":12806,"src":"27743:24:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":12794,"name":"uint256","nodeType":"ElementaryTypeName","src":"27743:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":12797,"mutability":"mutable","name":"_id","nameLocation":"27781:3:13","nodeType":"VariableDeclaration","scope":12806,"src":"27773:11:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":12796,"name":"uint256","nodeType":"ElementaryTypeName","src":"27773:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":12799,"mutability":"mutable","name":"_slot","nameLocation":"27798:5:13","nodeType":"VariableDeclaration","scope":12806,"src":"27790:13:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":12798,"name":"uint256","nodeType":"ElementaryTypeName","src":"27790:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":12801,"mutability":"mutable","name":"_token","nameLocation":"27817:6:13","nodeType":"VariableDeclaration","scope":12806,"src":"27809:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":12800,"name":"address","nodeType":"ElementaryTypeName","src":"27809:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":12803,"mutability":"mutable","name":"_amount","nameLocation":"27837:7:13","nodeType":"VariableDeclaration","scope":12806,"src":"27829:15:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":12802,"name":"uint256","nodeType":"ElementaryTypeName","src":"27829:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"27704:144:13"},"returnParameters":{"id":12805,"nodeType":"ParameterList","parameters":[],"src":"27857:0:13"},"scope":13658,"src":"27675:183:13","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":12807,"nodeType":"StructuredDocumentation","src":"27862:244:13","text":"@notice @deprecated\n @notice Sets the skill on an expenditure slot. Can only be called by expenditure owner.\n @param _id Expenditure identifier\n @param _slot Number of the slot\n @param _skillId Id of the new skill to set"},"functionSelector":"fa13ed72","id":12816,"implemented":false,"kind":"function","modifiers":[],"name":"setExpenditureSkill","nameLocation":"28118:19:13","nodeType":"FunctionDefinition","parameters":{"id":12814,"nodeType":"ParameterList","parameters":[{"constant":false,"id":12809,"mutability":"mutable","name":"_id","nameLocation":"28146:3:13","nodeType":"VariableDeclaration","scope":12816,"src":"28138:11:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":12808,"name":"uint256","nodeType":"ElementaryTypeName","src":"28138:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":12811,"mutability":"mutable","name":"_slot","nameLocation":"28159:5:13","nodeType":"VariableDeclaration","scope":12816,"src":"28151:13:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":12810,"name":"uint256","nodeType":"ElementaryTypeName","src":"28151:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":12813,"mutability":"mutable","name":"_skillId","nameLocation":"28174:8:13","nodeType":"VariableDeclaration","scope":12816,"src":"28166:16:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":12812,"name":"uint256","nodeType":"ElementaryTypeName","src":"28166:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"28137:46:13"},"returnParameters":{"id":12815,"nodeType":"ParameterList","parameters":[],"src":"28192:0:13"},"scope":13658,"src":"28109:84:13","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":12817,"nodeType":"StructuredDocumentation","src":"28197:232:13","text":"@notice Sets the skill on an expenditure slot. Can only be called by expenditure owner.\n @param _id Expenditure identifier\n @param _slots Array of slots to set skills\n @param _skillIds Ids of the new skills to set"},"functionSelector":"b58179f9","id":12828,"implemented":false,"kind":"function","modifiers":[],"name":"setExpenditureSkills","nameLocation":"28441:20:13","nodeType":"FunctionDefinition","parameters":{"id":12826,"nodeType":"ParameterList","parameters":[{"constant":false,"id":12819,"mutability":"mutable","name":"_id","nameLocation":"28470:3:13","nodeType":"VariableDeclaration","scope":12828,"src":"28462:11:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":12818,"name":"uint256","nodeType":"ElementaryTypeName","src":"28462:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":12822,"mutability":"mutable","name":"_slots","nameLocation":"28492:6:13","nodeType":"VariableDeclaration","scope":12828,"src":"28475:23:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":12820,"name":"uint256","nodeType":"ElementaryTypeName","src":"28475:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":12821,"nodeType":"ArrayTypeName","src":"28475:9:13","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":12825,"mutability":"mutable","name":"_skillIds","nameLocation":"28517:9:13","nodeType":"VariableDeclaration","scope":12828,"src":"28500:26:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":12823,"name":"uint256","nodeType":"ElementaryTypeName","src":"28500:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":12824,"nodeType":"ArrayTypeName","src":"28500:9:13","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"28461:66:13"},"returnParameters":{"id":12827,"nodeType":"ParameterList","parameters":[],"src":"28536:0:13"},"scope":13658,"src":"28432:105:13","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":12829,"nodeType":"StructuredDocumentation","src":"28541:265:13","text":"@notice @deprecated\n @notice Sets the claim delay on an expenditure slot. Can only be called by expenditure owner.\n @param _id Expenditure identifier\n @param _slot Number of the slot\n @param _claimDelay Duration of time (in seconds) to delay"},"functionSelector":"09895c21","id":12838,"implemented":false,"kind":"function","modifiers":[],"name":"setExpenditureClaimDelay","nameLocation":"28818:24:13","nodeType":"FunctionDefinition","parameters":{"id":12836,"nodeType":"ParameterList","parameters":[{"constant":false,"id":12831,"mutability":"mutable","name":"_id","nameLocation":"28851:3:13","nodeType":"VariableDeclaration","scope":12838,"src":"28843:11:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":12830,"name":"uint256","nodeType":"ElementaryTypeName","src":"28843:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":12833,"mutability":"mutable","name":"_slot","nameLocation":"28864:5:13","nodeType":"VariableDeclaration","scope":12838,"src":"28856:13:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":12832,"name":"uint256","nodeType":"ElementaryTypeName","src":"28856:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":12835,"mutability":"mutable","name":"_claimDelay","nameLocation":"28879:11:13","nodeType":"VariableDeclaration","scope":12838,"src":"28871:19:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":12834,"name":"uint256","nodeType":"ElementaryTypeName","src":"28871:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"28842:49:13"},"returnParameters":{"id":12837,"nodeType":"ParameterList","parameters":[],"src":"28900:0:13"},"scope":13658,"src":"28809:92:13","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":12839,"nodeType":"StructuredDocumentation","src":"28905:263:13","text":"@notice Sets the claim delays in given expenditure slots. Can only be called by expenditure owner.\n @param _id Expenditure identifier\n @param _slots Array of slots to set claim delays\n @param _claimDelays Durations of time (in seconds) to delay"},"functionSelector":"5bdb365d","id":12850,"implemented":false,"kind":"function","modifiers":[],"name":"setExpenditureClaimDelays","nameLocation":"29180:25:13","nodeType":"FunctionDefinition","parameters":{"id":12848,"nodeType":"ParameterList","parameters":[{"constant":false,"id":12841,"mutability":"mutable","name":"_id","nameLocation":"29214:3:13","nodeType":"VariableDeclaration","scope":12850,"src":"29206:11:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":12840,"name":"uint256","nodeType":"ElementaryTypeName","src":"29206:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":12844,"mutability":"mutable","name":"_slots","nameLocation":"29236:6:13","nodeType":"VariableDeclaration","scope":12850,"src":"29219:23:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":12842,"name":"uint256","nodeType":"ElementaryTypeName","src":"29219:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":12843,"nodeType":"ArrayTypeName","src":"29219:9:13","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":12847,"mutability":"mutable","name":"_claimDelays","nameLocation":"29261:12:13","nodeType":"VariableDeclaration","scope":12850,"src":"29244:29:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":12845,"name":"uint256","nodeType":"ElementaryTypeName","src":"29244:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":12846,"nodeType":"ArrayTypeName","src":"29244:9:13","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"29205:69:13"},"returnParameters":{"id":12849,"nodeType":"ParameterList","parameters":[],"src":"29283:0:13"},"scope":13658,"src":"29171:113:13","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":12851,"nodeType":"StructuredDocumentation","src":"29288:300:13","text":"@notice Sets the payout modifiers in given expenditure slots. Can only be called by expenditure owner.\n @param _id Expenditure identifier\n @param _slots Array of slots to set payout modifiers\n @param _payoutModifiers Values (between +/- WAD) to modify the payout & reputation bonus"},"functionSelector":"89126bb7","id":12862,"implemented":false,"kind":"function","modifiers":[],"name":"setExpenditurePayoutModifiers","nameLocation":"29600:29:13","nodeType":"FunctionDefinition","parameters":{"id":12860,"nodeType":"ParameterList","parameters":[{"constant":false,"id":12853,"mutability":"mutable","name":"_id","nameLocation":"29638:3:13","nodeType":"VariableDeclaration","scope":12862,"src":"29630:11:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":12852,"name":"uint256","nodeType":"ElementaryTypeName","src":"29630:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":12856,"mutability":"mutable","name":"_slots","nameLocation":"29660:6:13","nodeType":"VariableDeclaration","scope":12862,"src":"29643:23:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":12854,"name":"uint256","nodeType":"ElementaryTypeName","src":"29643:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":12855,"nodeType":"ArrayTypeName","src":"29643:9:13","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":12859,"mutability":"mutable","name":"_payoutModifiers","nameLocation":"29684:16:13","nodeType":"VariableDeclaration","scope":12862,"src":"29668:32:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_int256_$dyn_memory_ptr","typeString":"int256[]"},"typeName":{"baseType":{"id":12857,"name":"int256","nodeType":"ElementaryTypeName","src":"29668:6:13","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":12858,"nodeType":"ArrayTypeName","src":"29668:8:13","typeDescriptions":{"typeIdentifier":"t_array$_t_int256_$dyn_storage_ptr","typeString":"int256[]"}},"visibility":"internal"}],"src":"29629:72:13"},"returnParameters":{"id":12861,"nodeType":"ParameterList","parameters":[],"src":"29710:0:13"},"scope":13658,"src":"29591:120:13","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":12863,"nodeType":"StructuredDocumentation","src":"29715:883:13","text":"@notice Set many values of an expenditure simultaneously. Can only be called by expenditure owner.\n @param _id Expenditure identifier\n @param _recipientSlots Array of slots to set recipients\n @param _recipients Addresses of the recipients\n @param _skillIdSlots Array of slots to set skills\n @param _skillIds Ids of the new skills to set\n @param _claimDelaySlots Array of slots to set claim delays\n @param _claimDelays Durations of time (in seconds) to delay\n @param _payoutModifierSlots Array of slots to set payout modifiers\n @param _payoutModifiers Values (between +/- WAD) to modify the payout & reputation bonus\n @param _payoutTokens Addresses of the tokens, `0x0` value indicates Ether\n @param _payoutSlots 2-dimensional array of slots to set payouts\n @param _payoutValues 2-dimensional array of the payout amounts"},"functionSelector":"1c9f6c6d","id":12903,"implemented":false,"kind":"function","modifiers":[],"name":"setExpenditureValues","nameLocation":"30610:20:13","nodeType":"FunctionDefinition","parameters":{"id":12901,"nodeType":"ParameterList","parameters":[{"constant":false,"id":12865,"mutability":"mutable","name":"_id","nameLocation":"30644:3:13","nodeType":"VariableDeclaration","scope":12903,"src":"30636:11:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":12864,"name":"uint256","nodeType":"ElementaryTypeName","src":"30636:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":12868,"mutability":"mutable","name":"_recipientSlots","nameLocation":"30670:15:13","nodeType":"VariableDeclaration","scope":12903,"src":"30653:32:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":12866,"name":"uint256","nodeType":"ElementaryTypeName","src":"30653:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":12867,"nodeType":"ArrayTypeName","src":"30653:9:13","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":12871,"mutability":"mutable","name":"_recipients","nameLocation":"30716:11:13","nodeType":"VariableDeclaration","scope":12903,"src":"30691:36:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_payable_$dyn_memory_ptr","typeString":"address payable[]"},"typeName":{"baseType":{"id":12869,"name":"address","nodeType":"ElementaryTypeName","src":"30691:15:13","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":12870,"nodeType":"ArrayTypeName","src":"30691:17:13","typeDescriptions":{"typeIdentifier":"t_array$_t_address_payable_$dyn_storage_ptr","typeString":"address payable[]"}},"visibility":"internal"},{"constant":false,"id":12874,"mutability":"mutable","name":"_skillIdSlots","nameLocation":"30750:13:13","nodeType":"VariableDeclaration","scope":12903,"src":"30733:30:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":12872,"name":"uint256","nodeType":"ElementaryTypeName","src":"30733:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":12873,"nodeType":"ArrayTypeName","src":"30733:9:13","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":12877,"mutability":"mutable","name":"_skillIds","nameLocation":"30786:9:13","nodeType":"VariableDeclaration","scope":12903,"src":"30769:26:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":12875,"name":"uint256","nodeType":"ElementaryTypeName","src":"30769:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":12876,"nodeType":"ArrayTypeName","src":"30769:9:13","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":12880,"mutability":"mutable","name":"_claimDelaySlots","nameLocation":"30818:16:13","nodeType":"VariableDeclaration","scope":12903,"src":"30801:33:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":12878,"name":"uint256","nodeType":"ElementaryTypeName","src":"30801:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":12879,"nodeType":"ArrayTypeName","src":"30801:9:13","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":12883,"mutability":"mutable","name":"_claimDelays","nameLocation":"30857:12:13","nodeType":"VariableDeclaration","scope":12903,"src":"30840:29:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":12881,"name":"uint256","nodeType":"ElementaryTypeName","src":"30840:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":12882,"nodeType":"ArrayTypeName","src":"30840:9:13","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":12886,"mutability":"mutable","name":"_payoutModifierSlots","nameLocation":"30892:20:13","nodeType":"VariableDeclaration","scope":12903,"src":"30875:37:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":12884,"name":"uint256","nodeType":"ElementaryTypeName","src":"30875:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":12885,"nodeType":"ArrayTypeName","src":"30875:9:13","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":12889,"mutability":"mutable","name":"_payoutModifiers","nameLocation":"30934:16:13","nodeType":"VariableDeclaration","scope":12903,"src":"30918:32:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_int256_$dyn_memory_ptr","typeString":"int256[]"},"typeName":{"baseType":{"id":12887,"name":"int256","nodeType":"ElementaryTypeName","src":"30918:6:13","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":12888,"nodeType":"ArrayTypeName","src":"30918:8:13","typeDescriptions":{"typeIdentifier":"t_array$_t_int256_$dyn_storage_ptr","typeString":"int256[]"}},"visibility":"internal"},{"constant":false,"id":12892,"mutability":"mutable","name":"_payoutTokens","nameLocation":"30973:13:13","nodeType":"VariableDeclaration","scope":12903,"src":"30956:30:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":12890,"name":"address","nodeType":"ElementaryTypeName","src":"30956:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":12891,"nodeType":"ArrayTypeName","src":"30956:9:13","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"},{"constant":false,"id":12896,"mutability":"mutable","name":"_payoutSlots","nameLocation":"31011:12:13","nodeType":"VariableDeclaration","scope":12903,"src":"30992:31:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_array$_t_uint256_$dyn_memory_ptr_$dyn_memory_ptr","typeString":"uint256[][]"},"typeName":{"baseType":{"baseType":{"id":12893,"name":"uint256","nodeType":"ElementaryTypeName","src":"30992:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":12894,"nodeType":"ArrayTypeName","src":"30992:9:13","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"id":12895,"nodeType":"ArrayTypeName","src":"30992:11:13","typeDescriptions":{"typeIdentifier":"t_array$_t_array$_t_uint256_$dyn_storage_$dyn_storage_ptr","typeString":"uint256[][]"}},"visibility":"internal"},{"constant":false,"id":12900,"mutability":"mutable","name":"_payoutValues","nameLocation":"31048:13:13","nodeType":"VariableDeclaration","scope":12903,"src":"31029:32:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_array$_t_uint256_$dyn_memory_ptr_$dyn_memory_ptr","typeString":"uint256[][]"},"typeName":{"baseType":{"baseType":{"id":12897,"name":"uint256","nodeType":"ElementaryTypeName","src":"31029:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":12898,"nodeType":"ArrayTypeName","src":"31029:9:13","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"id":12899,"nodeType":"ArrayTypeName","src":"31029:11:13","typeDescriptions":{"typeIdentifier":"t_array$_t_array$_t_uint256_$dyn_storage_$dyn_storage_ptr","typeString":"uint256[][]"}},"visibility":"internal"}],"src":"30630:435:13"},"returnParameters":{"id":12902,"nodeType":"ParameterList","parameters":[],"src":"31074:0:13"},"scope":13658,"src":"30601:474:13","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":12904,"nodeType":"StructuredDocumentation","src":"31079:695:13","text":"@notice Set arbitrary state on an expenditure slot. Can only be called by Arbitration role.\n @param _permissionDomainId The domainId in which I have the permission to take this action\n @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`,\n (only used if `_permissionDomainId` is different to `_domainId`)\n @param _id Expenditure identifier\n @param _storageSlot Number of the top-level storage slot (25, 26, or 27)\n @param _mask Array of booleans indicated whether a key is a mapping (F) or an array index (T).\n @param _keys Array of additional keys (for mappings & arrays)\n @param _value Value to set at location"},"functionSelector":"c9a2ce7c","id":12923,"implemented":false,"kind":"function","modifiers":[],"name":"setExpenditureState","nameLocation":"31786:19:13","nodeType":"FunctionDefinition","parameters":{"id":12921,"nodeType":"ParameterList","parameters":[{"constant":false,"id":12906,"mutability":"mutable","name":"_permissionDomainId","nameLocation":"31819:19:13","nodeType":"VariableDeclaration","scope":12923,"src":"31811:27:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":12905,"name":"uint256","nodeType":"ElementaryTypeName","src":"31811:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":12908,"mutability":"mutable","name":"_childSkillIndex","nameLocation":"31852:16:13","nodeType":"VariableDeclaration","scope":12923,"src":"31844:24:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":12907,"name":"uint256","nodeType":"ElementaryTypeName","src":"31844:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":12910,"mutability":"mutable","name":"_id","nameLocation":"31882:3:13","nodeType":"VariableDeclaration","scope":12923,"src":"31874:11:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":12909,"name":"uint256","nodeType":"ElementaryTypeName","src":"31874:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":12912,"mutability":"mutable","name":"_storageSlot","nameLocation":"31899:12:13","nodeType":"VariableDeclaration","scope":12923,"src":"31891:20:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":12911,"name":"uint256","nodeType":"ElementaryTypeName","src":"31891:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":12915,"mutability":"mutable","name":"_mask","nameLocation":"31931:5:13","nodeType":"VariableDeclaration","scope":12923,"src":"31917:19:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[]"},"typeName":{"baseType":{"id":12913,"name":"bool","nodeType":"ElementaryTypeName","src":"31917:4:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":12914,"nodeType":"ArrayTypeName","src":"31917:6:13","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_storage_ptr","typeString":"bool[]"}},"visibility":"internal"},{"constant":false,"id":12918,"mutability":"mutable","name":"_keys","nameLocation":"31959:5:13","nodeType":"VariableDeclaration","scope":12923,"src":"31942:22:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":12916,"name":"bytes32","nodeType":"ElementaryTypeName","src":"31942:7:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":12917,"nodeType":"ArrayTypeName","src":"31942:9:13","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":12920,"mutability":"mutable","name":"_value","nameLocation":"31978:6:13","nodeType":"VariableDeclaration","scope":12923,"src":"31970:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":12919,"name":"bytes32","nodeType":"ElementaryTypeName","src":"31970:7:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"31805:185:13"},"returnParameters":{"id":12922,"nodeType":"ParameterList","parameters":[],"src":"31999:0:13"},"scope":13658,"src":"31777:223:13","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":12924,"nodeType":"StructuredDocumentation","src":"32004:251:13","text":"@notice Claim the payout for an expenditure slot. Here the network receives a fee from each payout.\n @param _id Expenditure identifier\n @param _slot Number of the slot\n @param _token Address of the token, `0x0` value indicates Ether"},"functionSelector":"2fe96899","id":12933,"implemented":false,"kind":"function","modifiers":[],"name":"claimExpenditurePayout","nameLocation":"32267:22:13","nodeType":"FunctionDefinition","parameters":{"id":12931,"nodeType":"ParameterList","parameters":[{"constant":false,"id":12926,"mutability":"mutable","name":"_id","nameLocation":"32298:3:13","nodeType":"VariableDeclaration","scope":12933,"src":"32290:11:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":12925,"name":"uint256","nodeType":"ElementaryTypeName","src":"32290:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":12928,"mutability":"mutable","name":"_slot","nameLocation":"32311:5:13","nodeType":"VariableDeclaration","scope":12933,"src":"32303:13:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":12927,"name":"uint256","nodeType":"ElementaryTypeName","src":"32303:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":12930,"mutability":"mutable","name":"_token","nameLocation":"32326:6:13","nodeType":"VariableDeclaration","scope":12933,"src":"32318:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":12929,"name":"address","nodeType":"ElementaryTypeName","src":"32318:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"32289:44:13"},"returnParameters":{"id":12932,"nodeType":"ParameterList","parameters":[],"src":"32342:0:13"},"scope":13658,"src":"32258:85:13","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":12934,"nodeType":"StructuredDocumentation","src":"32347:99:13","text":"@notice Get the number of expenditures in the colony.\n @return count The expenditure count"},"functionSelector":"7a4e6ff1","id":12939,"implemented":false,"kind":"function","modifiers":[],"name":"getExpenditureCount","nameLocation":"32458:19:13","nodeType":"FunctionDefinition","parameters":{"id":12935,"nodeType":"ParameterList","parameters":[],"src":"32477:2:13"},"returnParameters":{"id":12938,"nodeType":"ParameterList","parameters":[{"constant":false,"id":12937,"mutability":"mutable","name":"count","nameLocation":"32511:5:13","nodeType":"VariableDeclaration","scope":12939,"src":"32503:13:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":12936,"name":"uint256","nodeType":"ElementaryTypeName","src":"32503:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"32502:15:13"},"scope":13658,"src":"32449:69:13","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":12940,"nodeType":"StructuredDocumentation","src":"32522:126:13","text":"@notice Returns an existing expenditure.\n @param _id Expenditure identifier\n @return expenditure The expenditure"},"functionSelector":"e96aad86","id":12948,"implemented":false,"kind":"function","modifiers":[],"name":"getExpenditure","nameLocation":"32660:14:13","nodeType":"FunctionDefinition","parameters":{"id":12943,"nodeType":"ParameterList","parameters":[{"constant":false,"id":12942,"mutability":"mutable","name":"_id","nameLocation":"32683:3:13","nodeType":"VariableDeclaration","scope":12948,"src":"32675:11:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":12941,"name":"uint256","nodeType":"ElementaryTypeName","src":"32675:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"32674:13:13"},"returnParameters":{"id":12947,"nodeType":"ParameterList","parameters":[{"constant":false,"id":12946,"mutability":"mutable","name":"expenditure","nameLocation":"32730:11:13","nodeType":"VariableDeclaration","scope":12948,"src":"32711:30:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Expenditure_$3012_memory_ptr","typeString":"struct ColonyDataTypes.Expenditure"},"typeName":{"id":12945,"nodeType":"UserDefinedTypeName","pathNode":{"id":12944,"name":"Expenditure","nameLocations":["32711:11:13"],"nodeType":"IdentifierPath","referencedDeclaration":3012,"src":"32711:11:13"},"referencedDeclaration":3012,"src":"32711:11:13","typeDescriptions":{"typeIdentifier":"t_struct$_Expenditure_$3012_storage_ptr","typeString":"struct ColonyDataTypes.Expenditure"}},"visibility":"internal"}],"src":"32710:32:13"},"scope":13658,"src":"32651:92:13","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":12949,"nodeType":"StructuredDocumentation","src":"32747:176:13","text":"@notice Returns an existing expenditure slot.\n @param _id Expenditure identifier\n @param _slot Expenditure slot\n @return expenditureSlot The expenditure slot"},"functionSelector":"994b2281","id":12959,"implemented":false,"kind":"function","modifiers":[],"name":"getExpenditureSlot","nameLocation":"32935:18:13","nodeType":"FunctionDefinition","parameters":{"id":12954,"nodeType":"ParameterList","parameters":[{"constant":false,"id":12951,"mutability":"mutable","name":"_id","nameLocation":"32962:3:13","nodeType":"VariableDeclaration","scope":12959,"src":"32954:11:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":12950,"name":"uint256","nodeType":"ElementaryTypeName","src":"32954:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":12953,"mutability":"mutable","name":"_slot","nameLocation":"32975:5:13","nodeType":"VariableDeclaration","scope":12959,"src":"32967:13:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":12952,"name":"uint256","nodeType":"ElementaryTypeName","src":"32967:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"32953:28:13"},"returnParameters":{"id":12958,"nodeType":"ParameterList","parameters":[{"constant":false,"id":12957,"mutability":"mutable","name":"expenditureSlot","nameLocation":"33028:15:13","nodeType":"VariableDeclaration","scope":12959,"src":"33005:38:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_ExpenditureSlot_$3022_memory_ptr","typeString":"struct ColonyDataTypes.ExpenditureSlot"},"typeName":{"id":12956,"nodeType":"UserDefinedTypeName","pathNode":{"id":12955,"name":"ExpenditureSlot","nameLocations":["33005:15:13"],"nodeType":"IdentifierPath","referencedDeclaration":3022,"src":"33005:15:13"},"referencedDeclaration":3022,"src":"33005:15:13","typeDescriptions":{"typeIdentifier":"t_struct$_ExpenditureSlot_$3022_storage_ptr","typeString":"struct ColonyDataTypes.ExpenditureSlot"}},"visibility":"internal"}],"src":"33004:40:13"},"scope":13658,"src":"32926:119:13","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":12960,"nodeType":"StructuredDocumentation","src":"33049:243:13","text":"@notice Returns an existing expenditure slot's payout for a token.\n @param _id Expenditure identifier\n @param _slot Expenditure slot\n @param _token Token address\n @return amount Amount of the payout for that slot/token."},"functionSelector":"29abcdce","id":12971,"implemented":false,"kind":"function","modifiers":[],"name":"getExpenditureSlotPayout","nameLocation":"33304:24:13","nodeType":"FunctionDefinition","parameters":{"id":12967,"nodeType":"ParameterList","parameters":[{"constant":false,"id":12962,"mutability":"mutable","name":"_id","nameLocation":"33337:3:13","nodeType":"VariableDeclaration","scope":12971,"src":"33329:11:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":12961,"name":"uint256","nodeType":"ElementaryTypeName","src":"33329:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":12964,"mutability":"mutable","name":"_slot","nameLocation":"33350:5:13","nodeType":"VariableDeclaration","scope":12971,"src":"33342:13:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":12963,"name":"uint256","nodeType":"ElementaryTypeName","src":"33342:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":12966,"mutability":"mutable","name":"_token","nameLocation":"33365:6:13","nodeType":"VariableDeclaration","scope":12971,"src":"33357:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":12965,"name":"address","nodeType":"ElementaryTypeName","src":"33357:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"33328:44:13"},"returnParameters":{"id":12970,"nodeType":"ParameterList","parameters":[{"constant":false,"id":12969,"mutability":"mutable","name":"amount","nameLocation":"33404:6:13","nodeType":"VariableDeclaration","scope":12971,"src":"33396:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":12968,"name":"uint256","nodeType":"ElementaryTypeName","src":"33396:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"33395:16:13"},"scope":13658,"src":"33295:117:13","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":12972,"nodeType":"StructuredDocumentation","src":"33454:697:13","text":"@notice Add a new payment in the colony. Secured function to authorised members.\n @param _permissionDomainId The domainId in which I have the permission to take this action\n @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`,\n (only used if `_permissionDomainId` is different to `_domainId`)\n @param _recipient Address of the payment recipient\n @param _token Address of the token, `0x0` value indicates Ether\n @param _amount Payout amount\n @param _domainId The domain where the payment belongs\n @param _skillId The skill associated with the payment\n @return paymentId Identifier of the newly created payment"},"functionSelector":"4f8df643","id":12991,"implemented":false,"kind":"function","modifiers":[],"name":"addPayment","nameLocation":"34163:10:13","nodeType":"FunctionDefinition","parameters":{"id":12987,"nodeType":"ParameterList","parameters":[{"constant":false,"id":12974,"mutability":"mutable","name":"_permissionDomainId","nameLocation":"34187:19:13","nodeType":"VariableDeclaration","scope":12991,"src":"34179:27:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":12973,"name":"uint256","nodeType":"ElementaryTypeName","src":"34179:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":12976,"mutability":"mutable","name":"_childSkillIndex","nameLocation":"34220:16:13","nodeType":"VariableDeclaration","scope":12991,"src":"34212:24:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":12975,"name":"uint256","nodeType":"ElementaryTypeName","src":"34212:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":12978,"mutability":"mutable","name":"_recipient","nameLocation":"34258:10:13","nodeType":"VariableDeclaration","scope":12991,"src":"34242:26:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":12977,"name":"address","nodeType":"ElementaryTypeName","src":"34242:15:13","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"internal"},{"constant":false,"id":12980,"mutability":"mutable","name":"_token","nameLocation":"34282:6:13","nodeType":"VariableDeclaration","scope":12991,"src":"34274:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":12979,"name":"address","nodeType":"ElementaryTypeName","src":"34274:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":12982,"mutability":"mutable","name":"_amount","nameLocation":"34302:7:13","nodeType":"VariableDeclaration","scope":12991,"src":"34294:15:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":12981,"name":"uint256","nodeType":"ElementaryTypeName","src":"34294:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":12984,"mutability":"mutable","name":"_domainId","nameLocation":"34323:9:13","nodeType":"VariableDeclaration","scope":12991,"src":"34315:17:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":12983,"name":"uint256","nodeType":"ElementaryTypeName","src":"34315:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":12986,"mutability":"mutable","name":"_skillId","nameLocation":"34346:8:13","nodeType":"VariableDeclaration","scope":12991,"src":"34338:16:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":12985,"name":"uint256","nodeType":"ElementaryTypeName","src":"34338:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"34173:182:13"},"returnParameters":{"id":12990,"nodeType":"ParameterList","parameters":[{"constant":false,"id":12989,"mutability":"mutable","name":"paymentId","nameLocation":"34386:9:13","nodeType":"VariableDeclaration","scope":12991,"src":"34378:17:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":12988,"name":"uint256","nodeType":"ElementaryTypeName","src":"34378:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"34377:19:13"},"scope":13658,"src":"34154:243:13","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":12992,"nodeType":"StructuredDocumentation","src":"34401:404:13","text":"@notice Finalizes the payment and logs the reputation log updates.\n Allowed to be called once after payment is fully funded. Secured function to authorised members.\n @param _permissionDomainId The domainId in which I have the permission to take this action\n @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`\n @param _id Payment identifier"},"functionSelector":"d961a420","id":13001,"implemented":false,"kind":"function","modifiers":[],"name":"finalizePayment","nameLocation":"34817:15:13","nodeType":"FunctionDefinition","parameters":{"id":12999,"nodeType":"ParameterList","parameters":[{"constant":false,"id":12994,"mutability":"mutable","name":"_permissionDomainId","nameLocation":"34841:19:13","nodeType":"VariableDeclaration","scope":13001,"src":"34833:27:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":12993,"name":"uint256","nodeType":"ElementaryTypeName","src":"34833:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":12996,"mutability":"mutable","name":"_childSkillIndex","nameLocation":"34870:16:13","nodeType":"VariableDeclaration","scope":13001,"src":"34862:24:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":12995,"name":"uint256","nodeType":"ElementaryTypeName","src":"34862:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":12998,"mutability":"mutable","name":"_id","nameLocation":"34896:3:13","nodeType":"VariableDeclaration","scope":13001,"src":"34888:11:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":12997,"name":"uint256","nodeType":"ElementaryTypeName","src":"34888:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"34832:68:13"},"returnParameters":{"id":13000,"nodeType":"ParameterList","parameters":[],"src":"34909:0:13"},"scope":13658,"src":"34808:102:13","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":13002,"nodeType":"StructuredDocumentation","src":"34914:382:13","text":"@notice Sets the recipient on an existing payment. Secured function to authorised members.\n @param _permissionDomainId The domainId in which I have the permission to take this action\n @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`\n @param _id Payment identifier\n @param _recipient Address of the payment recipient"},"functionSelector":"8904ba90","id":13013,"implemented":false,"kind":"function","modifiers":[],"name":"setPaymentRecipient","nameLocation":"35308:19:13","nodeType":"FunctionDefinition","parameters":{"id":13011,"nodeType":"ParameterList","parameters":[{"constant":false,"id":13004,"mutability":"mutable","name":"_permissionDomainId","nameLocation":"35336:19:13","nodeType":"VariableDeclaration","scope":13013,"src":"35328:27:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":13003,"name":"uint256","nodeType":"ElementaryTypeName","src":"35328:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":13006,"mutability":"mutable","name":"_childSkillIndex","nameLocation":"35365:16:13","nodeType":"VariableDeclaration","scope":13013,"src":"35357:24:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":13005,"name":"uint256","nodeType":"ElementaryTypeName","src":"35357:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":13008,"mutability":"mutable","name":"_id","nameLocation":"35391:3:13","nodeType":"VariableDeclaration","scope":13013,"src":"35383:11:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":13007,"name":"uint256","nodeType":"ElementaryTypeName","src":"35383:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":13010,"mutability":"mutable","name":"_recipient","nameLocation":"35412:10:13","nodeType":"VariableDeclaration","scope":13013,"src":"35396:26:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":13009,"name":"address","nodeType":"ElementaryTypeName","src":"35396:15:13","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"internal"}],"src":"35327:96:13"},"returnParameters":{"id":13012,"nodeType":"ParameterList","parameters":[],"src":"35432:0:13"},"scope":13658,"src":"35299:134:13","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":13014,"nodeType":"StructuredDocumentation","src":"35437:370:13","text":"@notice Sets the skill on an existing payment. Secured function to authorised members.\n @param _permissionDomainId The domainId in which I have the permission to take this action\n @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`\n @param _id Payment identifier\n @param _skillId Id of the new skill to set"},"functionSelector":"255fc39c","id":13025,"implemented":false,"kind":"function","modifiers":[],"name":"setPaymentSkill","nameLocation":"35819:15:13","nodeType":"FunctionDefinition","parameters":{"id":13023,"nodeType":"ParameterList","parameters":[{"constant":false,"id":13016,"mutability":"mutable","name":"_permissionDomainId","nameLocation":"35843:19:13","nodeType":"VariableDeclaration","scope":13025,"src":"35835:27:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":13015,"name":"uint256","nodeType":"ElementaryTypeName","src":"35835:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":13018,"mutability":"mutable","name":"_childSkillIndex","nameLocation":"35872:16:13","nodeType":"VariableDeclaration","scope":13025,"src":"35864:24:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":13017,"name":"uint256","nodeType":"ElementaryTypeName","src":"35864:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":13020,"mutability":"mutable","name":"_id","nameLocation":"35898:3:13","nodeType":"VariableDeclaration","scope":13025,"src":"35890:11:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":13019,"name":"uint256","nodeType":"ElementaryTypeName","src":"35890:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":13022,"mutability":"mutable","name":"_skillId","nameLocation":"35911:8:13","nodeType":"VariableDeclaration","scope":13025,"src":"35903:16:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":13021,"name":"uint256","nodeType":"ElementaryTypeName","src":"35903:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"35834:86:13"},"returnParameters":{"id":13024,"nodeType":"ParameterList","parameters":[],"src":"35929:0:13"},"scope":13658,"src":"35810:120:13","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":13026,"nodeType":"StructuredDocumentation","src":"35934:445:13","text":"@notice Sets the payout for a given token on an existing payment. Secured function to authorised members.\n @param _permissionDomainId The domainId in which I have the permission to take this action\n @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`\n @param _id Payment identifier\n @param _token Address of the token, `0x0` value indicates Ether\n @param _amount Payout amount"},"functionSelector":"54a9a082","id":13039,"implemented":false,"kind":"function","modifiers":[],"name":"setPaymentPayout","nameLocation":"36391:16:13","nodeType":"FunctionDefinition","parameters":{"id":13037,"nodeType":"ParameterList","parameters":[{"constant":false,"id":13028,"mutability":"mutable","name":"_permissionDomainId","nameLocation":"36416:19:13","nodeType":"VariableDeclaration","scope":13039,"src":"36408:27:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":13027,"name":"uint256","nodeType":"ElementaryTypeName","src":"36408:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":13030,"mutability":"mutable","name":"_childSkillIndex","nameLocation":"36445:16:13","nodeType":"VariableDeclaration","scope":13039,"src":"36437:24:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":13029,"name":"uint256","nodeType":"ElementaryTypeName","src":"36437:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":13032,"mutability":"mutable","name":"_id","nameLocation":"36471:3:13","nodeType":"VariableDeclaration","scope":13039,"src":"36463:11:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":13031,"name":"uint256","nodeType":"ElementaryTypeName","src":"36463:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":13034,"mutability":"mutable","name":"_token","nameLocation":"36484:6:13","nodeType":"VariableDeclaration","scope":13039,"src":"36476:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":13033,"name":"address","nodeType":"ElementaryTypeName","src":"36476:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":13036,"mutability":"mutable","name":"_amount","nameLocation":"36500:7:13","nodeType":"VariableDeclaration","scope":13039,"src":"36492:15:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":13035,"name":"uint256","nodeType":"ElementaryTypeName","src":"36492:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"36407:101:13"},"returnParameters":{"id":13038,"nodeType":"ParameterList","parameters":[],"src":"36517:0:13"},"scope":13658,"src":"36382:136:13","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":13040,"nodeType":"StructuredDocumentation","src":"36522:124:13","text":"@notice Returns an exiting payment.\n @param _id Payment identifier\n @return payment The Payment data structure"},"functionSelector":"3280a836","id":13048,"implemented":false,"kind":"function","modifiers":[],"name":"getPayment","nameLocation":"36658:10:13","nodeType":"FunctionDefinition","parameters":{"id":13043,"nodeType":"ParameterList","parameters":[{"constant":false,"id":13042,"mutability":"mutable","name":"_id","nameLocation":"36677:3:13","nodeType":"VariableDeclaration","scope":13048,"src":"36669:11:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":13041,"name":"uint256","nodeType":"ElementaryTypeName","src":"36669:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"36668:13:13"},"returnParameters":{"id":13047,"nodeType":"ParameterList","parameters":[{"constant":false,"id":13046,"mutability":"mutable","name":"payment","nameLocation":"36720:7:13","nodeType":"VariableDeclaration","scope":13048,"src":"36705:22:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Payment_$3039_memory_ptr","typeString":"struct ColonyDataTypes.Payment"},"typeName":{"id":13045,"nodeType":"UserDefinedTypeName","pathNode":{"id":13044,"name":"Payment","nameLocations":["36705:7:13"],"nodeType":"IdentifierPath","referencedDeclaration":3039,"src":"36705:7:13"},"referencedDeclaration":3039,"src":"36705:7:13","typeDescriptions":{"typeIdentifier":"t_struct$_Payment_$3039_storage_ptr","typeString":"struct ColonyDataTypes.Payment"}},"visibility":"internal"}],"src":"36704:24:13"},"scope":13658,"src":"36649:80:13","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":13049,"nodeType":"StructuredDocumentation","src":"36733:355:13","text":"@notice Claim the payout in `_token` denomination for payment `_id`. Here the network receives its fee from each payout.\n Same as for tasks, ether fees go straight to the Meta Colony whereas Token fees go to the Network to be auctioned off.\n @param _id Payment identifier\n @param _token Address of the token, `0x0` value indicates Ether"},"functionSelector":"0f4c52f3","id":13056,"implemented":false,"kind":"function","modifiers":[],"name":"claimPayment","nameLocation":"37100:12:13","nodeType":"FunctionDefinition","parameters":{"id":13054,"nodeType":"ParameterList","parameters":[{"constant":false,"id":13051,"mutability":"mutable","name":"_id","nameLocation":"37121:3:13","nodeType":"VariableDeclaration","scope":13056,"src":"37113:11:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":13050,"name":"uint256","nodeType":"ElementaryTypeName","src":"37113:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":13053,"mutability":"mutable","name":"_token","nameLocation":"37134:6:13","nodeType":"VariableDeclaration","scope":13056,"src":"37126:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":13052,"name":"address","nodeType":"ElementaryTypeName","src":"37126:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"37112:29:13"},"returnParameters":{"id":13055,"nodeType":"ParameterList","parameters":[],"src":"37150:0:13"},"scope":13658,"src":"37091:60:13","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":13057,"nodeType":"StructuredDocumentation","src":"37155:91:13","text":"@notice Get the number of payments in the colony.\n @return count The payment count"},"functionSelector":"af32a03f","id":13062,"implemented":false,"kind":"function","modifiers":[],"name":"getPaymentCount","nameLocation":"37258:15:13","nodeType":"FunctionDefinition","parameters":{"id":13058,"nodeType":"ParameterList","parameters":[],"src":"37273:2:13"},"returnParameters":{"id":13061,"nodeType":"ParameterList","parameters":[{"constant":false,"id":13060,"mutability":"mutable","name":"count","nameLocation":"37307:5:13","nodeType":"VariableDeclaration","scope":13062,"src":"37299:13:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":13059,"name":"uint256","nodeType":"ElementaryTypeName","src":"37299:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"37298:15:13"},"scope":13658,"src":"37249:65:13","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":13063,"nodeType":"StructuredDocumentation","src":"37353:581:13","text":"@notice Make a new task in the colony. Secured function to authorised members.\n @param _permissionDomainId The domainId in which I have the permission to take this action\n @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`\n @param _specificationHash Database identifier where the task specification is stored\n @param _domainId The domain where the task belongs\n @param _skillId The skill associated with the task, can set to `0` for no-op\n @param _dueDate The due date of the task, can set to `0` for no-op"},"functionSelector":"663cb633","id":13078,"implemented":false,"kind":"function","modifiers":[],"name":"makeTask","nameLocation":"37946:8:13","nodeType":"FunctionDefinition","parameters":{"id":13076,"nodeType":"ParameterList","parameters":[{"constant":false,"id":13065,"mutability":"mutable","name":"_permissionDomainId","nameLocation":"37968:19:13","nodeType":"VariableDeclaration","scope":13078,"src":"37960:27:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":13064,"name":"uint256","nodeType":"ElementaryTypeName","src":"37960:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":13067,"mutability":"mutable","name":"_childSkillIndex","nameLocation":"38001:16:13","nodeType":"VariableDeclaration","scope":13078,"src":"37993:24:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":13066,"name":"uint256","nodeType":"ElementaryTypeName","src":"37993:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":13069,"mutability":"mutable","name":"_specificationHash","nameLocation":"38031:18:13","nodeType":"VariableDeclaration","scope":13078,"src":"38023:26:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":13068,"name":"bytes32","nodeType":"ElementaryTypeName","src":"38023:7:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":13071,"mutability":"mutable","name":"_domainId","nameLocation":"38063:9:13","nodeType":"VariableDeclaration","scope":13078,"src":"38055:17:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":13070,"name":"uint256","nodeType":"ElementaryTypeName","src":"38055:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":13073,"mutability":"mutable","name":"_skillId","nameLocation":"38086:8:13","nodeType":"VariableDeclaration","scope":13078,"src":"38078:16:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":13072,"name":"uint256","nodeType":"ElementaryTypeName","src":"38078:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":13075,"mutability":"mutable","name":"_dueDate","nameLocation":"38108:8:13","nodeType":"VariableDeclaration","scope":13078,"src":"38100:16:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":13074,"name":"uint256","nodeType":"ElementaryTypeName","src":"38100:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"37954:163:13"},"returnParameters":{"id":13077,"nodeType":"ParameterList","parameters":[],"src":"38126:0:13"},"scope":13658,"src":"37937:190:13","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":13079,"nodeType":"StructuredDocumentation","src":"38131:85:13","text":"@notice Get the number of tasks in the colony.\n @return count The task count"},"functionSelector":"c17a340e","id":13084,"implemented":false,"kind":"function","modifiers":[],"name":"getTaskCount","nameLocation":"38228:12:13","nodeType":"FunctionDefinition","parameters":{"id":13080,"nodeType":"ParameterList","parameters":[],"src":"38240:2:13"},"returnParameters":{"id":13083,"nodeType":"ParameterList","parameters":[{"constant":false,"id":13082,"mutability":"mutable","name":"count","nameLocation":"38274:5:13","nodeType":"VariableDeclaration","scope":13084,"src":"38266:13:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":13081,"name":"uint256","nodeType":"ElementaryTypeName","src":"38266:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"38265:15:13"},"scope":13658,"src":"38219:62:13","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":13085,"nodeType":"StructuredDocumentation","src":"38285:195:13","text":"@notice Starts from 0 and is incremented on every co-reviewed task change via `executeTaskChange` call.\n @param _id Id of the task\n @return nonce The current task change nonce value"},"functionSelector":"ce7cee49","id":13092,"implemented":false,"kind":"function","modifiers":[],"name":"getTaskChangeNonce","nameLocation":"38492:18:13","nodeType":"FunctionDefinition","parameters":{"id":13088,"nodeType":"ParameterList","parameters":[{"constant":false,"id":13087,"mutability":"mutable","name":"_id","nameLocation":"38519:3:13","nodeType":"VariableDeclaration","scope":13092,"src":"38511:11:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":13086,"name":"uint256","nodeType":"ElementaryTypeName","src":"38511:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"38510:13:13"},"returnParameters":{"id":13091,"nodeType":"ParameterList","parameters":[{"constant":false,"id":13090,"mutability":"mutable","name":"nonce","nameLocation":"38555:5:13","nodeType":"VariableDeclaration","scope":13092,"src":"38547:13:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":13089,"name":"uint256","nodeType":"ElementaryTypeName","src":"38547:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"38546:15:13"},"scope":13658,"src":"38483:79:13","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":13093,"nodeType":"StructuredDocumentation","src":"38566:947:13","text":"@notice Executes a task update transaction `_data` which is approved and signed by two of its roles (e.g. manager and worker)\n using the detached signatures for these users.\n @dev The Colony functions which require approval and the task roles to review these are set in `IColony.initialiseColony` at colony creation.\n Upon successful execution the `taskChangeNonces` entry for the task is incremented.\n @param _sigV recovery id\n @param _sigR r output of the ECDSA signature of the transaction\n @param _sigS s output of the ECDSA signature of the transaction\n @param _mode How the signature was generated - 0 for Geth-style (usual), 1 for Trezor-style (only Trezor does this)\n @param _value The transaction value, i.e. number of wei to be sent when the transaction is executed\n Currently we only accept 0 value transactions but this is kept as a future option\n @param _data The transaction data"},"functionSelector":"74a2200e","id":13112,"implemented":false,"kind":"function","modifiers":[],"name":"executeTaskChange","nameLocation":"39525:17:13","nodeType":"FunctionDefinition","parameters":{"id":13110,"nodeType":"ParameterList","parameters":[{"constant":false,"id":13096,"mutability":"mutable","name":"_sigV","nameLocation":"39563:5:13","nodeType":"VariableDeclaration","scope":13112,"src":"39548:20:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint8_$dyn_memory_ptr","typeString":"uint8[]"},"typeName":{"baseType":{"id":13094,"name":"uint8","nodeType":"ElementaryTypeName","src":"39548:5:13","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"id":13095,"nodeType":"ArrayTypeName","src":"39548:7:13","typeDescriptions":{"typeIdentifier":"t_array$_t_uint8_$dyn_storage_ptr","typeString":"uint8[]"}},"visibility":"internal"},{"constant":false,"id":13099,"mutability":"mutable","name":"_sigR","nameLocation":"39591:5:13","nodeType":"VariableDeclaration","scope":13112,"src":"39574:22:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":13097,"name":"bytes32","nodeType":"ElementaryTypeName","src":"39574:7:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":13098,"nodeType":"ArrayTypeName","src":"39574:9:13","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":13102,"mutability":"mutable","name":"_sigS","nameLocation":"39619:5:13","nodeType":"VariableDeclaration","scope":13112,"src":"39602:22:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":13100,"name":"bytes32","nodeType":"ElementaryTypeName","src":"39602:7:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":13101,"nodeType":"ArrayTypeName","src":"39602:9:13","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":13105,"mutability":"mutable","name":"_mode","nameLocation":"39645:5:13","nodeType":"VariableDeclaration","scope":13112,"src":"39630:20:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint8_$dyn_memory_ptr","typeString":"uint8[]"},"typeName":{"baseType":{"id":13103,"name":"uint8","nodeType":"ElementaryTypeName","src":"39630:5:13","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"id":13104,"nodeType":"ArrayTypeName","src":"39630:7:13","typeDescriptions":{"typeIdentifier":"t_array$_t_uint8_$dyn_storage_ptr","typeString":"uint8[]"}},"visibility":"internal"},{"constant":false,"id":13107,"mutability":"mutable","name":"_value","nameLocation":"39664:6:13","nodeType":"VariableDeclaration","scope":13112,"src":"39656:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":13106,"name":"uint256","nodeType":"ElementaryTypeName","src":"39656:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":13109,"mutability":"mutable","name":"_data","nameLocation":"39689:5:13","nodeType":"VariableDeclaration","scope":13112,"src":"39676:18:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":13108,"name":"bytes","nodeType":"ElementaryTypeName","src":"39676:5:13","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"39542:158:13"},"returnParameters":{"id":13111,"nodeType":"ParameterList","parameters":[],"src":"39709:0:13"},"scope":13658,"src":"39516:194:13","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":13113,"nodeType":"StructuredDocumentation","src":"39714:868:13","text":"@notice Executes a task role update transaction `_data` which is approved and signed by two of addresses.\n depending of which function we are calling. Allowed functions are `setTaskManagerRole`, `setTaskEvaluatorRole` and `setTaskWorkerRole`.\n Upon successful execution the `taskChangeNonces` entry for the task is incremented.\n @param _sigV recovery id\n @param _sigR r output of the ECDSA signature of the transaction\n @param _sigS s output of the ECDSA signature of the transaction\n @param _mode How the signature was generated - 0 for Geth-style (usual), 1 for Trezor-style (only Trezor does this)\n @param _value The transaction value, i.e. number of wei to be sent when the transaction is executed\n Currently we only accept 0 value transactions but this is kept as a future option\n @param _data The transaction data"},"functionSelector":"24aa4948","id":13132,"implemented":false,"kind":"function","modifiers":[],"name":"executeTaskRoleAssignment","nameLocation":"40594:25:13","nodeType":"FunctionDefinition","parameters":{"id":13130,"nodeType":"ParameterList","parameters":[{"constant":false,"id":13116,"mutability":"mutable","name":"_sigV","nameLocation":"40640:5:13","nodeType":"VariableDeclaration","scope":13132,"src":"40625:20:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint8_$dyn_memory_ptr","typeString":"uint8[]"},"typeName":{"baseType":{"id":13114,"name":"uint8","nodeType":"ElementaryTypeName","src":"40625:5:13","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"id":13115,"nodeType":"ArrayTypeName","src":"40625:7:13","typeDescriptions":{"typeIdentifier":"t_array$_t_uint8_$dyn_storage_ptr","typeString":"uint8[]"}},"visibility":"internal"},{"constant":false,"id":13119,"mutability":"mutable","name":"_sigR","nameLocation":"40668:5:13","nodeType":"VariableDeclaration","scope":13132,"src":"40651:22:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":13117,"name":"bytes32","nodeType":"ElementaryTypeName","src":"40651:7:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":13118,"nodeType":"ArrayTypeName","src":"40651:9:13","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":13122,"mutability":"mutable","name":"_sigS","nameLocation":"40696:5:13","nodeType":"VariableDeclaration","scope":13132,"src":"40679:22:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":13120,"name":"bytes32","nodeType":"ElementaryTypeName","src":"40679:7:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":13121,"nodeType":"ArrayTypeName","src":"40679:9:13","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":13125,"mutability":"mutable","name":"_mode","nameLocation":"40722:5:13","nodeType":"VariableDeclaration","scope":13132,"src":"40707:20:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint8_$dyn_memory_ptr","typeString":"uint8[]"},"typeName":{"baseType":{"id":13123,"name":"uint8","nodeType":"ElementaryTypeName","src":"40707:5:13","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"id":13124,"nodeType":"ArrayTypeName","src":"40707:7:13","typeDescriptions":{"typeIdentifier":"t_array$_t_uint8_$dyn_storage_ptr","typeString":"uint8[]"}},"visibility":"internal"},{"constant":false,"id":13127,"mutability":"mutable","name":"_value","nameLocation":"40741:6:13","nodeType":"VariableDeclaration","scope":13132,"src":"40733:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":13126,"name":"uint256","nodeType":"ElementaryTypeName","src":"40733:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":13129,"mutability":"mutable","name":"_data","nameLocation":"40766:5:13","nodeType":"VariableDeclaration","scope":13132,"src":"40753:18:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":13128,"name":"bytes","nodeType":"ElementaryTypeName","src":"40753:5:13","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"40619:158:13"},"returnParameters":{"id":13131,"nodeType":"ParameterList","parameters":[],"src":"40786:0:13"},"scope":13658,"src":"40585:202:13","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":13133,"nodeType":"StructuredDocumentation","src":"40791:717:13","text":"@notice Submit a hashed secret of the rating for work in task `_id` which was performed by user with task role id `_role`.\n Allowed within 5 days period starting which whichever is first from either the deliverable being submitted or the dueDate been reached.\n Allowed only for evaluator to rate worker and for worker to rate manager performance.\n Once submitted ratings can not be changed or overwritten.\n @param _id Id of the task\n @param _role Id of the role, as defined in TaskRole enum\n @param _ratingSecret `keccak256` hash of a salt and 0-50 rating score (in increments of 10, .e.g 0, 10, 20, 30, 40 or 50).\n Can be generated via `IColony.generateSecret` helper function."},"functionSelector":"3feb369c","id":13142,"implemented":false,"kind":"function","modifiers":[],"name":"submitTaskWorkRating","nameLocation":"41520:20:13","nodeType":"FunctionDefinition","parameters":{"id":13140,"nodeType":"ParameterList","parameters":[{"constant":false,"id":13135,"mutability":"mutable","name":"_id","nameLocation":"41549:3:13","nodeType":"VariableDeclaration","scope":13142,"src":"41541:11:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":13134,"name":"uint256","nodeType":"ElementaryTypeName","src":"41541:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":13137,"mutability":"mutable","name":"_role","nameLocation":"41560:5:13","nodeType":"VariableDeclaration","scope":13142,"src":"41554:11:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":13136,"name":"uint8","nodeType":"ElementaryTypeName","src":"41554:5:13","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":13139,"mutability":"mutable","name":"_ratingSecret","nameLocation":"41575:13:13","nodeType":"VariableDeclaration","scope":13142,"src":"41567:21:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":13138,"name":"bytes32","nodeType":"ElementaryTypeName","src":"41567:7:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"41540:49:13"},"returnParameters":{"id":13141,"nodeType":"ParameterList","parameters":[],"src":"41598:0:13"},"scope":13658,"src":"41511:88:13","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":13143,"nodeType":"StructuredDocumentation","src":"41603:777:13","text":"@notice Reveal the secret rating submitted in `IColony.submitTaskWorkRating` for task `_id` and task role with id `_role`.\n Allowed within 5 days period starting which whichever is first from either both rating secrets being submitted\n (via `IColony.submitTaskWorkRating`) or the 5 day rating period expiring.\n @dev Compares the `keccak256(_salt, _rating)` output with the previously submitted rating secret and if they match,\n sets the task role properties `rated` to `true` and `rating` to `_rating`.\n @param _id Id of the task\n @param _role Id of the role, as defined in TaskRole enum\n @param _rating 0-50 rating score (in increments of 10, .e.g 0, 10, 20, 30, 40 or 50)\n @param _salt Salt value used to generate the rating secret"},"functionSelector":"934a1dc7","id":13154,"implemented":false,"kind":"function","modifiers":[],"name":"revealTaskWorkRating","nameLocation":"42392:20:13","nodeType":"FunctionDefinition","parameters":{"id":13152,"nodeType":"ParameterList","parameters":[{"constant":false,"id":13145,"mutability":"mutable","name":"_id","nameLocation":"42421:3:13","nodeType":"VariableDeclaration","scope":13154,"src":"42413:11:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":13144,"name":"uint256","nodeType":"ElementaryTypeName","src":"42413:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":13147,"mutability":"mutable","name":"_role","nameLocation":"42432:5:13","nodeType":"VariableDeclaration","scope":13154,"src":"42426:11:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":13146,"name":"uint8","nodeType":"ElementaryTypeName","src":"42426:5:13","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":13149,"mutability":"mutable","name":"_rating","nameLocation":"42445:7:13","nodeType":"VariableDeclaration","scope":13154,"src":"42439:13:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":13148,"name":"uint8","nodeType":"ElementaryTypeName","src":"42439:5:13","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":13151,"mutability":"mutable","name":"_salt","nameLocation":"42462:5:13","nodeType":"VariableDeclaration","scope":13154,"src":"42454:13:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":13150,"name":"bytes32","nodeType":"ElementaryTypeName","src":"42454:7:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"42412:56:13"},"returnParameters":{"id":13153,"nodeType":"ParameterList","parameters":[],"src":"42477:0:13"},"scope":13658,"src":"42383:95:13","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":13155,"nodeType":"StructuredDocumentation","src":"42482:255:13","text":"@notice Helper function used to generage consistently the rating secret using salt value `_salt` and value to hide `_value`\n @param _salt Salt value\n @param _value Value to hide\n @return secret `keccak256` hash of joint _salt and _value"},"functionSelector":"1ae3aaa4","id":13164,"implemented":false,"kind":"function","modifiers":[],"name":"generateSecret","nameLocation":"42749:14:13","nodeType":"FunctionDefinition","parameters":{"id":13160,"nodeType":"ParameterList","parameters":[{"constant":false,"id":13157,"mutability":"mutable","name":"_salt","nameLocation":"42772:5:13","nodeType":"VariableDeclaration","scope":13164,"src":"42764:13:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":13156,"name":"bytes32","nodeType":"ElementaryTypeName","src":"42764:7:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":13159,"mutability":"mutable","name":"_value","nameLocation":"42787:6:13","nodeType":"VariableDeclaration","scope":13164,"src":"42779:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":13158,"name":"uint256","nodeType":"ElementaryTypeName","src":"42779:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"42763:31:13"},"returnParameters":{"id":13163,"nodeType":"ParameterList","parameters":[{"constant":false,"id":13162,"mutability":"mutable","name":"secret","nameLocation":"42826:6:13","nodeType":"VariableDeclaration","scope":13164,"src":"42818:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":13161,"name":"bytes32","nodeType":"ElementaryTypeName","src":"42818:7:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"42817:16:13"},"scope":13658,"src":"42740:94:13","stateMutability":"pure","virtual":false,"visibility":"external"},{"documentation":{"id":13165,"nodeType":"StructuredDocumentation","src":"42838:226:13","text":"@notice Get the `ColonyStorage.RatingSecrets` information for task `_id`.\n @param _id Id of the task\n @return nSecrets Number of secrets\n @return lastSubmittedAt Timestamp of the last submitted rating secret"},"functionSelector":"01f8fb15","id":13174,"implemented":false,"kind":"function","modifiers":[],"name":"getTaskWorkRatingSecretsInfo","nameLocation":"43076:28:13","nodeType":"FunctionDefinition","parameters":{"id":13168,"nodeType":"ParameterList","parameters":[{"constant":false,"id":13167,"mutability":"mutable","name":"_id","nameLocation":"43113:3:13","nodeType":"VariableDeclaration","scope":13174,"src":"43105:11:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":13166,"name":"uint256","nodeType":"ElementaryTypeName","src":"43105:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"43104:13:13"},"returnParameters":{"id":13173,"nodeType":"ParameterList","parameters":[{"constant":false,"id":13170,"mutability":"mutable","name":"nSecrets","nameLocation":"43149:8:13","nodeType":"VariableDeclaration","scope":13174,"src":"43141:16:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":13169,"name":"uint256","nodeType":"ElementaryTypeName","src":"43141:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":13172,"mutability":"mutable","name":"lastSubmittedAt","nameLocation":"43167:15:13","nodeType":"VariableDeclaration","scope":13174,"src":"43159:23:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":13171,"name":"uint256","nodeType":"ElementaryTypeName","src":"43159:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"43140:43:13"},"scope":13658,"src":"43067:117:13","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":13175,"nodeType":"StructuredDocumentation","src":"43188:220:13","text":"@notice Get the rating secret submitted for role `_role` in task `_id`\n @param _id Id of the task\n @param _role Id of the role, as defined in TaskRole enum\n @return secret Rating secret `bytes32` value"},"functionSelector":"ad4e908c","id":13184,"implemented":false,"kind":"function","modifiers":[],"name":"getTaskWorkRatingSecret","nameLocation":"43420:23:13","nodeType":"FunctionDefinition","parameters":{"id":13180,"nodeType":"ParameterList","parameters":[{"constant":false,"id":13177,"mutability":"mutable","name":"_id","nameLocation":"43452:3:13","nodeType":"VariableDeclaration","scope":13184,"src":"43444:11:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":13176,"name":"uint256","nodeType":"ElementaryTypeName","src":"43444:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":13179,"mutability":"mutable","name":"_role","nameLocation":"43463:5:13","nodeType":"VariableDeclaration","scope":13184,"src":"43457:11:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":13178,"name":"uint8","nodeType":"ElementaryTypeName","src":"43457:5:13","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"43443:26:13"},"returnParameters":{"id":13183,"nodeType":"ParameterList","parameters":[{"constant":false,"id":13182,"mutability":"mutable","name":"secret","nameLocation":"43501:6:13","nodeType":"VariableDeclaration","scope":13184,"src":"43493:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":13181,"name":"bytes32","nodeType":"ElementaryTypeName","src":"43493:7:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"43492:16:13"},"scope":13658,"src":"43411:98:13","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":13185,"nodeType":"StructuredDocumentation","src":"43513:665:13","text":"@notice Assigning manager role.\n Current manager and user we want to assign role to both need to agree.\n User we want to set here also needs to be an admin.\n Note that the domain proof data comes at the end here to not interfere with the assembly argument unpacking.\n @dev This function can only be called through `executeTaskRoleAssignment`.\n @param _id Id of the task\n @param _user Address of the user we want to give a manager role to\n @param _permissionDomainId The domain ID in which _user has the Administration permission\n @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`"},"functionSelector":"b35383e3","id":13196,"implemented":false,"kind":"function","modifiers":[],"name":"setTaskManagerRole","nameLocation":"44190:18:13","nodeType":"FunctionDefinition","parameters":{"id":13194,"nodeType":"ParameterList","parameters":[{"constant":false,"id":13187,"mutability":"mutable","name":"_id","nameLocation":"44217:3:13","nodeType":"VariableDeclaration","scope":13196,"src":"44209:11:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":13186,"name":"uint256","nodeType":"ElementaryTypeName","src":"44209:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":13189,"mutability":"mutable","name":"_user","nameLocation":"44238:5:13","nodeType":"VariableDeclaration","scope":13196,"src":"44222:21:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":13188,"name":"address","nodeType":"ElementaryTypeName","src":"44222:15:13","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"internal"},{"constant":false,"id":13191,"mutability":"mutable","name":"_permissionDomainId","nameLocation":"44253:19:13","nodeType":"VariableDeclaration","scope":13196,"src":"44245:27:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":13190,"name":"uint256","nodeType":"ElementaryTypeName","src":"44245:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":13193,"mutability":"mutable","name":"_childSkillIndex","nameLocation":"44282:16:13","nodeType":"VariableDeclaration","scope":13196,"src":"44274:24:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":13192,"name":"uint256","nodeType":"ElementaryTypeName","src":"44274:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"44208:91:13"},"returnParameters":{"id":13195,"nodeType":"ParameterList","parameters":[],"src":"44308:0:13"},"scope":13658,"src":"44181:128:13","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":13197,"nodeType":"StructuredDocumentation","src":"44313:482:13","text":"@notice Assigning evaluator role.\n Can only be set if there is no one currently assigned to be an evaluator.\n Manager of the task and user we want to assign role to both need to agree.\n Managers can assign themselves to this role, if there is no one currently assigned to it.\n @dev This function can only be called through `executeTaskRoleAssignment`.\n @param _id Id of the task\n @param _user Address of the user we want to give a evaluator role to"},"functionSelector":"e104695a","id":13204,"implemented":false,"kind":"function","modifiers":[],"name":"setTaskEvaluatorRole","nameLocation":"44807:20:13","nodeType":"FunctionDefinition","parameters":{"id":13202,"nodeType":"ParameterList","parameters":[{"constant":false,"id":13199,"mutability":"mutable","name":"_id","nameLocation":"44836:3:13","nodeType":"VariableDeclaration","scope":13204,"src":"44828:11:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":13198,"name":"uint256","nodeType":"ElementaryTypeName","src":"44828:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":13201,"mutability":"mutable","name":"_user","nameLocation":"44857:5:13","nodeType":"VariableDeclaration","scope":13204,"src":"44841:21:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":13200,"name":"address","nodeType":"ElementaryTypeName","src":"44841:15:13","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"internal"}],"src":"44827:36:13"},"returnParameters":{"id":13203,"nodeType":"ParameterList","parameters":[],"src":"44872:0:13"},"scope":13658,"src":"44798:75:13","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":13205,"nodeType":"StructuredDocumentation","src":"44877:376:13","text":"@notice Assigning worker role.\n Can only be set if there is no one currently assigned to be a worker.\n Manager of the task and user we want to assign role to both need to agree.\n @dev This function can only be called through `executeTaskRoleAssignment`.\n @param _id Id of the task\n @param _user Address of the user we want to give a worker role to"},"functionSelector":"74773439","id":13212,"implemented":false,"kind":"function","modifiers":[],"name":"setTaskWorkerRole","nameLocation":"45265:17:13","nodeType":"FunctionDefinition","parameters":{"id":13210,"nodeType":"ParameterList","parameters":[{"constant":false,"id":13207,"mutability":"mutable","name":"_id","nameLocation":"45291:3:13","nodeType":"VariableDeclaration","scope":13212,"src":"45283:11:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":13206,"name":"uint256","nodeType":"ElementaryTypeName","src":"45283:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":13209,"mutability":"mutable","name":"_user","nameLocation":"45312:5:13","nodeType":"VariableDeclaration","scope":13212,"src":"45296:21:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":13208,"name":"address","nodeType":"ElementaryTypeName","src":"45296:15:13","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"internal"}],"src":"45282:36:13"},"returnParameters":{"id":13211,"nodeType":"ParameterList","parameters":[],"src":"45327:0:13"},"scope":13658,"src":"45256:72:13","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":13213,"nodeType":"StructuredDocumentation","src":"45332:131:13","text":"@notice Removing evaluator role.\n Agreed between manager and currently assigned evaluator.\n @param _id Id of the task"},"functionSelector":"a1c60e63","id":13218,"implemented":false,"kind":"function","modifiers":[],"name":"removeTaskEvaluatorRole","nameLocation":"45475:23:13","nodeType":"FunctionDefinition","parameters":{"id":13216,"nodeType":"ParameterList","parameters":[{"constant":false,"id":13215,"mutability":"mutable","name":"_id","nameLocation":"45507:3:13","nodeType":"VariableDeclaration","scope":13218,"src":"45499:11:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":13214,"name":"uint256","nodeType":"ElementaryTypeName","src":"45499:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"45498:13:13"},"returnParameters":{"id":13217,"nodeType":"ParameterList","parameters":[],"src":"45520:0:13"},"scope":13658,"src":"45466:55:13","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":13219,"nodeType":"StructuredDocumentation","src":"45525:125:13","text":"@notice Removing worker role.\n Agreed between manager and currently assigned worker.\n @param _id Id of the task"},"functionSelector":"46889ecb","id":13224,"implemented":false,"kind":"function","modifiers":[],"name":"removeTaskWorkerRole","nameLocation":"45662:20:13","nodeType":"FunctionDefinition","parameters":{"id":13222,"nodeType":"ParameterList","parameters":[{"constant":false,"id":13221,"mutability":"mutable","name":"_id","nameLocation":"45691:3:13","nodeType":"VariableDeclaration","scope":13224,"src":"45683:11:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":13220,"name":"uint256","nodeType":"ElementaryTypeName","src":"45683:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"45682:13:13"},"returnParameters":{"id":13223,"nodeType":"ParameterList","parameters":[],"src":"45704:0:13"},"scope":13658,"src":"45653:52:13","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":13225,"nodeType":"StructuredDocumentation","src":"45709:308:13","text":"@notice Set the skill for task `_id`.\n @dev Currently we only allow one skill per task although we have provisioned for an array of skills in `Task` struct.\n Allowed before a task is finalized.\n @param _id Id of the task\n @param _skillId Id of the skill which has to be a global skill"},"functionSelector":"b8984c5a","id":13232,"implemented":false,"kind":"function","modifiers":[],"name":"setTaskSkill","nameLocation":"46029:12:13","nodeType":"FunctionDefinition","parameters":{"id":13230,"nodeType":"ParameterList","parameters":[{"constant":false,"id":13227,"mutability":"mutable","name":"_id","nameLocation":"46050:3:13","nodeType":"VariableDeclaration","scope":13232,"src":"46042:11:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":13226,"name":"uint256","nodeType":"ElementaryTypeName","src":"46042:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":13229,"mutability":"mutable","name":"_skillId","nameLocation":"46063:8:13","nodeType":"VariableDeclaration","scope":13232,"src":"46055:16:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":13228,"name":"uint256","nodeType":"ElementaryTypeName","src":"46055:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"46041:31:13"},"returnParameters":{"id":13231,"nodeType":"ParameterList","parameters":[],"src":"46081:0:13"},"scope":13658,"src":"46020:62:13","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":13233,"nodeType":"StructuredDocumentation","src":"46086:264:13","text":"@notice Set the hash for the task brief, aka task work specification, which identifies the task brief content in ddb.\n Allowed before a task is finalized.\n @param _id Id of the task\n @param _specificationHash Unique hash of the task brief in ddb"},"functionSelector":"da4db249","id":13240,"implemented":false,"kind":"function","modifiers":[],"name":"setTaskBrief","nameLocation":"46362:12:13","nodeType":"FunctionDefinition","parameters":{"id":13238,"nodeType":"ParameterList","parameters":[{"constant":false,"id":13235,"mutability":"mutable","name":"_id","nameLocation":"46383:3:13","nodeType":"VariableDeclaration","scope":13240,"src":"46375:11:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":13234,"name":"uint256","nodeType":"ElementaryTypeName","src":"46375:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":13237,"mutability":"mutable","name":"_specificationHash","nameLocation":"46396:18:13","nodeType":"VariableDeclaration","scope":13240,"src":"46388:26:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":13236,"name":"bytes32","nodeType":"ElementaryTypeName","src":"46388:7:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"46374:41:13"},"returnParameters":{"id":13239,"nodeType":"ParameterList","parameters":[],"src":"46424:0:13"},"scope":13658,"src":"46353:72:13","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":13241,"nodeType":"StructuredDocumentation","src":"46429:170:13","text":"@notice Set the due date on task `_id`. Allowed before a task is finalized.\n @param _id Id of the task\n @param _dueDate Due date as seconds since unix epoch"},"functionSelector":"cae960fe","id":13248,"implemented":false,"kind":"function","modifiers":[],"name":"setTaskDueDate","nameLocation":"46611:14:13","nodeType":"FunctionDefinition","parameters":{"id":13246,"nodeType":"ParameterList","parameters":[{"constant":false,"id":13243,"mutability":"mutable","name":"_id","nameLocation":"46634:3:13","nodeType":"VariableDeclaration","scope":13248,"src":"46626:11:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":13242,"name":"uint256","nodeType":"ElementaryTypeName","src":"46626:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":13245,"mutability":"mutable","name":"_dueDate","nameLocation":"46647:8:13","nodeType":"VariableDeclaration","scope":13248,"src":"46639:16:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":13244,"name":"uint256","nodeType":"ElementaryTypeName","src":"46639:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"46625:31:13"},"returnParameters":{"id":13247,"nodeType":"ParameterList","parameters":[],"src":"46665:0:13"},"scope":13658,"src":"46602:64:13","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":13249,"nodeType":"StructuredDocumentation","src":"46670:409:13","text":"@notice Submit the task deliverable, i.e. the output of the work performed for task `_id`.\n Submission is allowed only to the assigned worker before the task due date. Submissions cannot be overwritten.\n @dev Set the `task.deliverableHash` and `task.completionTimestamp` properties.\n @param _id Id of the task\n @param _deliverableHash Unique hash of the task deliverable content in ddb"},"functionSelector":"50030964","id":13256,"implemented":false,"kind":"function","modifiers":[],"name":"submitTaskDeliverable","nameLocation":"47091:21:13","nodeType":"FunctionDefinition","parameters":{"id":13254,"nodeType":"ParameterList","parameters":[{"constant":false,"id":13251,"mutability":"mutable","name":"_id","nameLocation":"47121:3:13","nodeType":"VariableDeclaration","scope":13256,"src":"47113:11:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":13250,"name":"uint256","nodeType":"ElementaryTypeName","src":"47113:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":13253,"mutability":"mutable","name":"_deliverableHash","nameLocation":"47134:16:13","nodeType":"VariableDeclaration","scope":13256,"src":"47126:24:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":13252,"name":"bytes32","nodeType":"ElementaryTypeName","src":"47126:7:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"47112:39:13"},"returnParameters":{"id":13255,"nodeType":"ParameterList","parameters":[],"src":"47160:0:13"},"scope":13658,"src":"47082:79:13","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":13257,"nodeType":"StructuredDocumentation","src":"47165:331:13","text":"@notice Submit the task deliverable for Worker and rating for Manager.\n @dev Internally call `submitTaskDeliverable` and `submitTaskWorkRating` in sequence.\n @param _id Id of the task\n @param _deliverableHash Unique hash of the task deliverable content in ddb\n @param _ratingSecret Rating secret for manager"},"functionSelector":"194f523d","id":13266,"implemented":false,"kind":"function","modifiers":[],"name":"submitTaskDeliverableAndRating","nameLocation":"47508:30:13","nodeType":"FunctionDefinition","parameters":{"id":13264,"nodeType":"ParameterList","parameters":[{"constant":false,"id":13259,"mutability":"mutable","name":"_id","nameLocation":"47547:3:13","nodeType":"VariableDeclaration","scope":13266,"src":"47539:11:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":13258,"name":"uint256","nodeType":"ElementaryTypeName","src":"47539:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":13261,"mutability":"mutable","name":"_deliverableHash","nameLocation":"47560:16:13","nodeType":"VariableDeclaration","scope":13266,"src":"47552:24:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":13260,"name":"bytes32","nodeType":"ElementaryTypeName","src":"47552:7:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":13263,"mutability":"mutable","name":"_ratingSecret","nameLocation":"47586:13:13","nodeType":"VariableDeclaration","scope":13266,"src":"47578:21:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":13262,"name":"bytes32","nodeType":"ElementaryTypeName","src":"47578:7:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"47538:62:13"},"returnParameters":{"id":13265,"nodeType":"ParameterList","parameters":[],"src":"47609:0:13"},"scope":13658,"src":"47499:111:13","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":13267,"nodeType":"StructuredDocumentation","src":"47614:290:13","text":"@notice Called after task work rating is complete which closes the task and logs the respective reputation log updates.\n Allowed to be called once per task. Secured function to authorised members.\n @dev Set the `task.finalized` property to true\n @param _id Id of the task"},"functionSelector":"88488c33","id":13272,"implemented":false,"kind":"function","modifiers":[],"name":"finalizeTask","nameLocation":"47916:12:13","nodeType":"FunctionDefinition","parameters":{"id":13270,"nodeType":"ParameterList","parameters":[{"constant":false,"id":13269,"mutability":"mutable","name":"_id","nameLocation":"47937:3:13","nodeType":"VariableDeclaration","scope":13272,"src":"47929:11:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":13268,"name":"uint256","nodeType":"ElementaryTypeName","src":"47929:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"47928:13:13"},"returnParameters":{"id":13271,"nodeType":"ParameterList","parameters":[],"src":"47950:0:13"},"scope":13658,"src":"47907:44:13","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":13273,"nodeType":"StructuredDocumentation","src":"47955:296:13","text":"@notice Cancel a task at any point before it is finalized. Secured function to authorised members.\n Any funds assigned to its funding pot can be moved back to the domain via `IColony.moveFundsBetweenPots`.\n @dev Set the `task.status` property to `1`.\n @param _id Id of the task"},"functionSelector":"7eec20a8","id":13278,"implemented":false,"kind":"function","modifiers":[],"name":"cancelTask","nameLocation":"48263:10:13","nodeType":"FunctionDefinition","parameters":{"id":13276,"nodeType":"ParameterList","parameters":[{"constant":false,"id":13275,"mutability":"mutable","name":"_id","nameLocation":"48282:3:13","nodeType":"VariableDeclaration","scope":13278,"src":"48274:11:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":13274,"name":"uint256","nodeType":"ElementaryTypeName","src":"48274:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"48273:13:13"},"returnParameters":{"id":13277,"nodeType":"ParameterList","parameters":[],"src":"48295:0:13"},"scope":13658,"src":"48254:42:13","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":13279,"nodeType":"StructuredDocumentation","src":"48300:303:13","text":"@notice Mark a task as complete after the due date has passed.\n This allows the task to be rated and finalized (and funds recovered) even in the presence of a worker who has disappeared.\n Note that if the due date was not set, then this function will throw.\n @param _id Id of the task"},"functionSelector":"e1e29558","id":13284,"implemented":false,"kind":"function","modifiers":[],"name":"completeTask","nameLocation":"48615:12:13","nodeType":"FunctionDefinition","parameters":{"id":13282,"nodeType":"ParameterList","parameters":[{"constant":false,"id":13281,"mutability":"mutable","name":"_id","nameLocation":"48636:3:13","nodeType":"VariableDeclaration","scope":13284,"src":"48628:11:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":13280,"name":"uint256","nodeType":"ElementaryTypeName","src":"48628:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"48627:13:13"},"returnParameters":{"id":13283,"nodeType":"ParameterList","parameters":[],"src":"48649:0:13"},"scope":13658,"src":"48606:44:13","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":13285,"nodeType":"StructuredDocumentation","src":"48654:541:13","text":"@notice Get a task with id `_id`\n @param _id Id of the task\n @return specificationHash Task brief hash\n @return deliverableHash Task deliverable hash\n @return status TaskStatus property. 0 - Active. 1 - Cancelled. 2 - Finalized\n @return dueDate Due date\n @return fundingPotId Id of funding pot for task\n @return completionTimestamp Task completion timestamp\n @return domainId Task domain id, default is root colony domain with id 1\n @return skillIds Array of global skill ids assigned to task"},"functionSelector":"1d65e77e","id":13308,"implemented":false,"kind":"function","modifiers":[],"name":"getTask","nameLocation":"49207:7:13","nodeType":"FunctionDefinition","parameters":{"id":13288,"nodeType":"ParameterList","parameters":[{"constant":false,"id":13287,"mutability":"mutable","name":"_id","nameLocation":"49223:3:13","nodeType":"VariableDeclaration","scope":13308,"src":"49215:11:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":13286,"name":"uint256","nodeType":"ElementaryTypeName","src":"49215:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"49214:13:13"},"returnParameters":{"id":13307,"nodeType":"ParameterList","parameters":[{"constant":false,"id":13290,"mutability":"mutable","name":"specificationHash","nameLocation":"49264:17:13","nodeType":"VariableDeclaration","scope":13308,"src":"49256:25:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":13289,"name":"bytes32","nodeType":"ElementaryTypeName","src":"49256:7:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":13292,"mutability":"mutable","name":"deliverableHash","nameLocation":"49295:15:13","nodeType":"VariableDeclaration","scope":13308,"src":"49287:23:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":13291,"name":"bytes32","nodeType":"ElementaryTypeName","src":"49287:7:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":13295,"mutability":"mutable","name":"status","nameLocation":"49327:6:13","nodeType":"VariableDeclaration","scope":13308,"src":"49316:17:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_TaskStatus_$3082","typeString":"enum ColonyDataTypes.TaskStatus"},"typeName":{"id":13294,"nodeType":"UserDefinedTypeName","pathNode":{"id":13293,"name":"TaskStatus","nameLocations":["49316:10:13"],"nodeType":"IdentifierPath","referencedDeclaration":3082,"src":"49316:10:13"},"referencedDeclaration":3082,"src":"49316:10:13","typeDescriptions":{"typeIdentifier":"t_enum$_TaskStatus_$3082","typeString":"enum ColonyDataTypes.TaskStatus"}},"visibility":"internal"},{"constant":false,"id":13297,"mutability":"mutable","name":"dueDate","nameLocation":"49347:7:13","nodeType":"VariableDeclaration","scope":13308,"src":"49339:15:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":13296,"name":"uint256","nodeType":"ElementaryTypeName","src":"49339:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":13299,"mutability":"mutable","name":"fundingPotId","nameLocation":"49368:12:13","nodeType":"VariableDeclaration","scope":13308,"src":"49360:20:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":13298,"name":"uint256","nodeType":"ElementaryTypeName","src":"49360:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":13301,"mutability":"mutable","name":"completionTimestamp","nameLocation":"49394:19:13","nodeType":"VariableDeclaration","scope":13308,"src":"49386:27:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":13300,"name":"uint256","nodeType":"ElementaryTypeName","src":"49386:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":13303,"mutability":"mutable","name":"domainId","nameLocation":"49427:8:13","nodeType":"VariableDeclaration","scope":13308,"src":"49419:16:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":13302,"name":"uint256","nodeType":"ElementaryTypeName","src":"49419:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":13306,"mutability":"mutable","name":"skillIds","nameLocation":"49458:8:13","nodeType":"VariableDeclaration","scope":13308,"src":"49441:25:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":13304,"name":"uint256","nodeType":"ElementaryTypeName","src":"49441:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":13305,"nodeType":"ArrayTypeName","src":"49441:9:13","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"49250:222:13"},"scope":13658,"src":"49198:275:13","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":13309,"nodeType":"StructuredDocumentation","src":"49477:197:13","text":"@notice Get the `Role` properties back for role `_role` in task `_id`.\n @param _id Id of the task\n @param _role Id of the role, as defined in TaskRole enum\n @return role The Role"},"functionSelector":"1e8954de","id":13319,"implemented":false,"kind":"function","modifiers":[],"name":"getTaskRole","nameLocation":"49686:11:13","nodeType":"FunctionDefinition","parameters":{"id":13314,"nodeType":"ParameterList","parameters":[{"constant":false,"id":13311,"mutability":"mutable","name":"_id","nameLocation":"49706:3:13","nodeType":"VariableDeclaration","scope":13319,"src":"49698:11:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":13310,"name":"uint256","nodeType":"ElementaryTypeName","src":"49698:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":13313,"mutability":"mutable","name":"_role","nameLocation":"49717:5:13","nodeType":"VariableDeclaration","scope":13319,"src":"49711:11:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":13312,"name":"uint8","nodeType":"ElementaryTypeName","src":"49711:5:13","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"49697:26:13"},"returnParameters":{"id":13318,"nodeType":"ParameterList","parameters":[{"constant":false,"id":13317,"mutability":"mutable","name":"role","nameLocation":"49759:4:13","nodeType":"VariableDeclaration","scope":13319,"src":"49747:16:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Role_$3099_memory_ptr","typeString":"struct ColonyDataTypes.Role"},"typeName":{"id":13316,"nodeType":"UserDefinedTypeName","pathNode":{"id":13315,"name":"Role","nameLocations":["49747:4:13"],"nodeType":"IdentifierPath","referencedDeclaration":3099,"src":"49747:4:13"},"referencedDeclaration":3099,"src":"49747:4:13","typeDescriptions":{"typeIdentifier":"t_struct$_Role_$3099_storage_ptr","typeString":"struct ColonyDataTypes.Role"}},"visibility":"internal"}],"src":"49746:18:13"},"scope":13658,"src":"49677:88:13","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":13320,"nodeType":"StructuredDocumentation","src":"49769:155:13","text":"@notice Set the reward inverse to pay out from revenue. e.g. if the fee is 1% (or 0.01), set 100.\n @param _rewardInverse The inverse of the reward"},"functionSelector":"2b949c99","id":13325,"implemented":false,"kind":"function","modifiers":[],"name":"setRewardInverse","nameLocation":"49936:16:13","nodeType":"FunctionDefinition","parameters":{"id":13323,"nodeType":"ParameterList","parameters":[{"constant":false,"id":13322,"mutability":"mutable","name":"_rewardInverse","nameLocation":"49961:14:13","nodeType":"VariableDeclaration","scope":13325,"src":"49953:22:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":13321,"name":"uint256","nodeType":"ElementaryTypeName","src":"49953:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"49952:24:13"},"returnParameters":{"id":13324,"nodeType":"ParameterList","parameters":[],"src":"49985:0:13"},"scope":13658,"src":"49927:59:13","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":13326,"nodeType":"StructuredDocumentation","src":"49990:157:13","text":"@notice Return 1 / the reward to pay out from revenue. e.g. if the fee is 1% (or 0.01), return 100.\n @return rewardInverse The inverse of the reward"},"functionSelector":"4cb164c7","id":13331,"implemented":false,"kind":"function","modifiers":[],"name":"getRewardInverse","nameLocation":"50159:16:13","nodeType":"FunctionDefinition","parameters":{"id":13327,"nodeType":"ParameterList","parameters":[],"src":"50175:2:13"},"returnParameters":{"id":13330,"nodeType":"ParameterList","parameters":[{"constant":false,"id":13329,"mutability":"mutable","name":"rewardInverse","nameLocation":"50209:13:13","nodeType":"VariableDeclaration","scope":13331,"src":"50201:21:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":13328,"name":"uint256","nodeType":"ElementaryTypeName","src":"50201:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"50200:23:13"},"scope":13658,"src":"50150:74:13","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":13332,"nodeType":"StructuredDocumentation","src":"50228:286:13","text":"@notice Get payout amount in `_token` denomination for role `_role` in task `_id`.\n @param _id Id of the task\n @param _role Id of the role, as defined in TaskRole enum\n @param _token Address of the token, `0x0` value indicates Ether\n @return amount Payout amount"},"functionSelector":"057dda2c","id":13343,"implemented":false,"kind":"function","modifiers":[],"name":"getTaskPayout","nameLocation":"50526:13:13","nodeType":"FunctionDefinition","parameters":{"id":13339,"nodeType":"ParameterList","parameters":[{"constant":false,"id":13334,"mutability":"mutable","name":"_id","nameLocation":"50548:3:13","nodeType":"VariableDeclaration","scope":13343,"src":"50540:11:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":13333,"name":"uint256","nodeType":"ElementaryTypeName","src":"50540:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":13336,"mutability":"mutable","name":"_role","nameLocation":"50559:5:13","nodeType":"VariableDeclaration","scope":13343,"src":"50553:11:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":13335,"name":"uint8","nodeType":"ElementaryTypeName","src":"50553:5:13","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":13338,"mutability":"mutable","name":"_token","nameLocation":"50574:6:13","nodeType":"VariableDeclaration","scope":13343,"src":"50566:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":13337,"name":"address","nodeType":"ElementaryTypeName","src":"50566:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"50539:42:13"},"returnParameters":{"id":13342,"nodeType":"ParameterList","parameters":[{"constant":false,"id":13341,"mutability":"mutable","name":"amount","nameLocation":"50613:6:13","nodeType":"VariableDeclaration","scope":13343,"src":"50605:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":13340,"name":"uint256","nodeType":"ElementaryTypeName","src":"50605:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"50604:16:13"},"scope":13658,"src":"50517:104:13","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":13344,"nodeType":"StructuredDocumentation","src":"50625:208:13","text":"@notice Set `_token` payout for manager in task `_id` to `_amount`.\n @param _id Id of the task\n @param _token Address of the token, `0x0` value indicates Ether\n @param _amount Payout amount"},"functionSelector":"6aaf4a77","id":13353,"implemented":false,"kind":"function","modifiers":[],"name":"setTaskManagerPayout","nameLocation":"50845:20:13","nodeType":"FunctionDefinition","parameters":{"id":13351,"nodeType":"ParameterList","parameters":[{"constant":false,"id":13346,"mutability":"mutable","name":"_id","nameLocation":"50874:3:13","nodeType":"VariableDeclaration","scope":13353,"src":"50866:11:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":13345,"name":"uint256","nodeType":"ElementaryTypeName","src":"50866:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":13348,"mutability":"mutable","name":"_token","nameLocation":"50887:6:13","nodeType":"VariableDeclaration","scope":13353,"src":"50879:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":13347,"name":"address","nodeType":"ElementaryTypeName","src":"50879:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":13350,"mutability":"mutable","name":"_amount","nameLocation":"50903:7:13","nodeType":"VariableDeclaration","scope":13353,"src":"50895:15:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":13349,"name":"uint256","nodeType":"ElementaryTypeName","src":"50895:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"50865:46:13"},"returnParameters":{"id":13352,"nodeType":"ParameterList","parameters":[],"src":"50920:0:13"},"scope":13658,"src":"50836:85:13","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":13354,"nodeType":"StructuredDocumentation","src":"50925:210:13","text":"@notice Set `_token` payout for evaluator in task `_id` to `_amount`.\n @param _id Id of the task\n @param _token Address of the token, `0x0` value indicates Ether\n @param _amount Payout amount"},"functionSelector":"6fb0794f","id":13363,"implemented":false,"kind":"function","modifiers":[],"name":"setTaskEvaluatorPayout","nameLocation":"51147:22:13","nodeType":"FunctionDefinition","parameters":{"id":13361,"nodeType":"ParameterList","parameters":[{"constant":false,"id":13356,"mutability":"mutable","name":"_id","nameLocation":"51178:3:13","nodeType":"VariableDeclaration","scope":13363,"src":"51170:11:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":13355,"name":"uint256","nodeType":"ElementaryTypeName","src":"51170:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":13358,"mutability":"mutable","name":"_token","nameLocation":"51191:6:13","nodeType":"VariableDeclaration","scope":13363,"src":"51183:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":13357,"name":"address","nodeType":"ElementaryTypeName","src":"51183:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":13360,"mutability":"mutable","name":"_amount","nameLocation":"51207:7:13","nodeType":"VariableDeclaration","scope":13363,"src":"51199:15:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":13359,"name":"uint256","nodeType":"ElementaryTypeName","src":"51199:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"51169:46:13"},"returnParameters":{"id":13362,"nodeType":"ParameterList","parameters":[],"src":"51224:0:13"},"scope":13658,"src":"51138:87:13","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":13364,"nodeType":"StructuredDocumentation","src":"51229:207:13","text":"@notice Set `_token` payout for worker in task `_id` to `_amount`.\n @param _id Id of the task\n @param _token Address of the token, `0x0` value indicates Ether\n @param _amount Payout amount"},"functionSelector":"2cf62b39","id":13373,"implemented":false,"kind":"function","modifiers":[],"name":"setTaskWorkerPayout","nameLocation":"51448:19:13","nodeType":"FunctionDefinition","parameters":{"id":13371,"nodeType":"ParameterList","parameters":[{"constant":false,"id":13366,"mutability":"mutable","name":"_id","nameLocation":"51476:3:13","nodeType":"VariableDeclaration","scope":13373,"src":"51468:11:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":13365,"name":"uint256","nodeType":"ElementaryTypeName","src":"51468:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":13368,"mutability":"mutable","name":"_token","nameLocation":"51489:6:13","nodeType":"VariableDeclaration","scope":13373,"src":"51481:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":13367,"name":"address","nodeType":"ElementaryTypeName","src":"51481:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":13370,"mutability":"mutable","name":"_amount","nameLocation":"51505:7:13","nodeType":"VariableDeclaration","scope":13373,"src":"51497:15:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":13369,"name":"uint256","nodeType":"ElementaryTypeName","src":"51497:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"51467:46:13"},"returnParameters":{"id":13372,"nodeType":"ParameterList","parameters":[],"src":"51522:0:13"},"scope":13658,"src":"51439:84:13","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":13374,"nodeType":"StructuredDocumentation","src":"51527:454:13","text":"@notice Set `_token` payout for all roles in task `_id` to the respective amounts.\n @dev Can only call if evaluator and worker are unassigned or manager, otherwise need signature.\n @param _id Id of the task\n @param _token Address of the token, `0x0` value indicates Ether\n @param _managerAmount Payout amount for manager\n @param _evaluatorAmount Payout amount for evaluator\n @param _workerAmount Payout amount for worker"},"functionSelector":"5dbe69b4","id":13387,"implemented":false,"kind":"function","modifiers":[],"name":"setAllTaskPayouts","nameLocation":"51993:17:13","nodeType":"FunctionDefinition","parameters":{"id":13385,"nodeType":"ParameterList","parameters":[{"constant":false,"id":13376,"mutability":"mutable","name":"_id","nameLocation":"52019:3:13","nodeType":"VariableDeclaration","scope":13387,"src":"52011:11:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":13375,"name":"uint256","nodeType":"ElementaryTypeName","src":"52011:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":13378,"mutability":"mutable","name":"_token","nameLocation":"52032:6:13","nodeType":"VariableDeclaration","scope":13387,"src":"52024:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":13377,"name":"address","nodeType":"ElementaryTypeName","src":"52024:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":13380,"mutability":"mutable","name":"_managerAmount","nameLocation":"52048:14:13","nodeType":"VariableDeclaration","scope":13387,"src":"52040:22:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":13379,"name":"uint256","nodeType":"ElementaryTypeName","src":"52040:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":13382,"mutability":"mutable","name":"_evaluatorAmount","nameLocation":"52072:16:13","nodeType":"VariableDeclaration","scope":13387,"src":"52064:24:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":13381,"name":"uint256","nodeType":"ElementaryTypeName","src":"52064:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":13384,"mutability":"mutable","name":"_workerAmount","nameLocation":"52098:13:13","nodeType":"VariableDeclaration","scope":13387,"src":"52090:21:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":13383,"name":"uint256","nodeType":"ElementaryTypeName","src":"52090:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"52010:102:13"},"returnParameters":{"id":13386,"nodeType":"ParameterList","parameters":[],"src":"52121:0:13"},"scope":13658,"src":"51984:138:13","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":13388,"nodeType":"StructuredDocumentation","src":"52126:487:13","text":"@notice Claim the payout in `_token` denomination for work completed in task `_id` by contributor with role `_role`.\n Allowed only after task is finalized. Here the network receives its fee from each payout.\n Ether fees go straight to the Meta Colony whereas Token fees go to the Network to be auctioned off.\n @param _id Id of the task\n @param _role Id of the role, as defined in TaskRole enum\n @param _token Address of the token, `0x0` value indicates Ether"},"functionSelector":"7c506b0b","id":13397,"implemented":false,"kind":"function","modifiers":[],"name":"claimTaskPayout","nameLocation":"52625:15:13","nodeType":"FunctionDefinition","parameters":{"id":13395,"nodeType":"ParameterList","parameters":[{"constant":false,"id":13390,"mutability":"mutable","name":"_id","nameLocation":"52649:3:13","nodeType":"VariableDeclaration","scope":13397,"src":"52641:11:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":13389,"name":"uint256","nodeType":"ElementaryTypeName","src":"52641:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":13392,"mutability":"mutable","name":"_role","nameLocation":"52660:5:13","nodeType":"VariableDeclaration","scope":13397,"src":"52654:11:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":13391,"name":"uint8","nodeType":"ElementaryTypeName","src":"52654:5:13","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":13394,"mutability":"mutable","name":"_token","nameLocation":"52675:6:13","nodeType":"VariableDeclaration","scope":13397,"src":"52667:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":13393,"name":"address","nodeType":"ElementaryTypeName","src":"52667:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"52640:42:13"},"returnParameters":{"id":13396,"nodeType":"ParameterList","parameters":[],"src":"52691:0:13"},"scope":13658,"src":"52616:76:13","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":13398,"nodeType":"StructuredDocumentation","src":"52696:568:13","text":"@notice Start next reward payout for `_token`. All funds in the reward pot for `_token` will become unavailable.\n @notice Add a new payment in the colony. Can only be called by users with root permission.\n All tokens will be locked, and can be unlocked by calling `waiveRewardPayout` or `claimRewardPayout`.\n @param _token Address of the token used for reward payout\n @param key Some Reputation hash tree key\n @param value Reputation value\n @param branchMask The branchmask of the proof\n @param siblings The siblings of the proof"},"functionSelector":"e6f519ce","id":13412,"implemented":false,"kind":"function","modifiers":[],"name":"startNextRewardPayout","nameLocation":"53276:21:13","nodeType":"FunctionDefinition","parameters":{"id":13410,"nodeType":"ParameterList","parameters":[{"constant":false,"id":13400,"mutability":"mutable","name":"_token","nameLocation":"53306:6:13","nodeType":"VariableDeclaration","scope":13412,"src":"53298:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":13399,"name":"address","nodeType":"ElementaryTypeName","src":"53298:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":13402,"mutability":"mutable","name":"key","nameLocation":"53327:3:13","nodeType":"VariableDeclaration","scope":13412,"src":"53314:16:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":13401,"name":"bytes","nodeType":"ElementaryTypeName","src":"53314:5:13","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":13404,"mutability":"mutable","name":"value","nameLocation":"53345:5:13","nodeType":"VariableDeclaration","scope":13412,"src":"53332:18:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":13403,"name":"bytes","nodeType":"ElementaryTypeName","src":"53332:5:13","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":13406,"mutability":"mutable","name":"branchMask","nameLocation":"53360:10:13","nodeType":"VariableDeclaration","scope":13412,"src":"53352:18:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":13405,"name":"uint256","nodeType":"ElementaryTypeName","src":"53352:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":13409,"mutability":"mutable","name":"siblings","nameLocation":"53389:8:13","nodeType":"VariableDeclaration","scope":13412,"src":"53372:25:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":13407,"name":"bytes32","nodeType":"ElementaryTypeName","src":"53372:7:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":13408,"nodeType":"ArrayTypeName","src":"53372:9:13","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"src":"53297:101:13"},"returnParameters":{"id":13411,"nodeType":"ParameterList","parameters":[],"src":"53407:0:13"},"scope":13658,"src":"53267:141:13","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":13413,"nodeType":"StructuredDocumentation","src":"53412:1101:13","text":"@notice Claim the reward payout at `_payoutId`. User needs to provide their reputation and colony-wide reputation\n which will be proven via Merkle proof inside this function.\n Can only be called if payout is active, i.e if 60 days have not passed from its creation.\n Can only be called if next in queue.\n @param _payoutId Id of the reward payout\n @param _squareRoots Square roots of values used in equation:\n `_squareRoots[0]` - square root of user reputation,\n `_squareRoots[1]` - square root of user tokens (deposited in TokenLocking),\n `_squareRoots[2]` - square root of total reputation,\n `_squareRoots[3]` - square root of total tokens,\n `_squareRoots[4]` - square root of numerator (user reputation * user tokens),\n `_squareRoots[5]` - square root of denominator (total reputation * total tokens),\n `_squareRoots[6]` - square root of payout amount.\n @param key Some Reputation hash tree key\n @param value Reputation value\n @param branchMask The branchmask of the proof\n @param siblings The siblings of the proof"},"functionSelector":"6fc14a90","id":13431,"implemented":false,"kind":"function","modifiers":[],"name":"claimRewardPayout","nameLocation":"54525:17:13","nodeType":"FunctionDefinition","parameters":{"id":13429,"nodeType":"ParameterList","parameters":[{"constant":false,"id":13415,"mutability":"mutable","name":"_payoutId","nameLocation":"54556:9:13","nodeType":"VariableDeclaration","scope":13431,"src":"54548:17:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":13414,"name":"uint256","nodeType":"ElementaryTypeName","src":"54548:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":13419,"mutability":"mutable","name":"_squareRoots","nameLocation":"54589:12:13","nodeType":"VariableDeclaration","scope":13431,"src":"54571:30:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$7_memory_ptr","typeString":"uint256[7]"},"typeName":{"baseType":{"id":13416,"name":"uint256","nodeType":"ElementaryTypeName","src":"54571:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":13418,"length":{"hexValue":"37","id":13417,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"54579:1:13","typeDescriptions":{"typeIdentifier":"t_rational_7_by_1","typeString":"int_const 7"},"value":"7"},"nodeType":"ArrayTypeName","src":"54571:10:13","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$7_storage_ptr","typeString":"uint256[7]"}},"visibility":"internal"},{"constant":false,"id":13421,"mutability":"mutable","name":"key","nameLocation":"54620:3:13","nodeType":"VariableDeclaration","scope":13431,"src":"54607:16:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":13420,"name":"bytes","nodeType":"ElementaryTypeName","src":"54607:5:13","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":13423,"mutability":"mutable","name":"value","nameLocation":"54642:5:13","nodeType":"VariableDeclaration","scope":13431,"src":"54629:18:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":13422,"name":"bytes","nodeType":"ElementaryTypeName","src":"54629:5:13","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":13425,"mutability":"mutable","name":"branchMask","nameLocation":"54661:10:13","nodeType":"VariableDeclaration","scope":13431,"src":"54653:18:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":13424,"name":"uint256","nodeType":"ElementaryTypeName","src":"54653:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":13428,"mutability":"mutable","name":"siblings","nameLocation":"54694:8:13","nodeType":"VariableDeclaration","scope":13431,"src":"54677:25:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":13426,"name":"bytes32","nodeType":"ElementaryTypeName","src":"54677:7:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":13427,"nodeType":"ArrayTypeName","src":"54677:9:13","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"src":"54542:166:13"},"returnParameters":{"id":13430,"nodeType":"ParameterList","parameters":[],"src":"54717:0:13"},"scope":13658,"src":"54516:202:13","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":13432,"nodeType":"StructuredDocumentation","src":"54722:565:13","text":"@notice Get useful information about specific reward payout.\n @param _payoutId Id of the reward payout\n @return rewardPayoutCycle RewardPayoutCycle, containing propertes:\n  `reputationState` Reputation root hash at the time of creation,\n  `colonyWideReputation` Colony wide reputation in `reputationState`,\n  `totalTokens` Total colony tokens at the time of creation,\n  `amount` Total amount of tokens taken aside for reward payout,\n  `tokenAddress` Token address,\n  `blockTimestamp` Block number at the time of creation."},"functionSelector":"3644a3fd","id":13440,"implemented":false,"kind":"function","modifiers":[],"name":"getRewardPayoutInfo","nameLocation":"55299:19:13","nodeType":"FunctionDefinition","parameters":{"id":13435,"nodeType":"ParameterList","parameters":[{"constant":false,"id":13434,"mutability":"mutable","name":"_payoutId","nameLocation":"55327:9:13","nodeType":"VariableDeclaration","scope":13440,"src":"55319:17:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":13433,"name":"uint256","nodeType":"ElementaryTypeName","src":"55319:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"55318:19:13"},"returnParameters":{"id":13439,"nodeType":"ParameterList","parameters":[{"constant":false,"id":13438,"mutability":"mutable","name":"rewardPayoutCycle","nameLocation":"55386:17:13","nodeType":"VariableDeclaration","scope":13440,"src":"55361:42:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_RewardPayoutCycle_$2998_memory_ptr","typeString":"struct ColonyDataTypes.RewardPayoutCycle"},"typeName":{"id":13437,"nodeType":"UserDefinedTypeName","pathNode":{"id":13436,"name":"RewardPayoutCycle","nameLocations":["55361:17:13"],"nodeType":"IdentifierPath","referencedDeclaration":2998,"src":"55361:17:13"},"referencedDeclaration":2998,"src":"55361:17:13","typeDescriptions":{"typeIdentifier":"t_struct$_RewardPayoutCycle_$2998_storage_ptr","typeString":"struct ColonyDataTypes.RewardPayoutCycle"}},"visibility":"internal"}],"src":"55360:44:13"},"scope":13658,"src":"55290:115:13","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":13441,"nodeType":"StructuredDocumentation","src":"55409:281:13","text":"@notice Finalises the reward payout. Allows creation of next reward payouts for token that has been used in `_payoutId`.\n Can only be called when reward payout cycle is finished i.e when 60 days have passed from its creation.\n @param _payoutId Id of the reward payout"},"functionSelector":"51c38cd9","id":13446,"implemented":false,"kind":"function","modifiers":[],"name":"finalizeRewardPayout","nameLocation":"55702:20:13","nodeType":"FunctionDefinition","parameters":{"id":13444,"nodeType":"ParameterList","parameters":[{"constant":false,"id":13443,"mutability":"mutable","name":"_payoutId","nameLocation":"55731:9:13","nodeType":"VariableDeclaration","scope":13446,"src":"55723:17:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":13442,"name":"uint256","nodeType":"ElementaryTypeName","src":"55723:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"55722:19:13"},"returnParameters":{"id":13445,"nodeType":"ParameterList","parameters":[],"src":"55750:0:13"},"scope":13658,"src":"55693:58:13","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":13447,"nodeType":"StructuredDocumentation","src":"55755:549:13","text":"@notice Get the non-mapping properties of a pot by id.\n @param _id Id of the pot which details to get\n @return associatedType The FundingPotAssociatedType value of the current funding pot, e.g. Domain, Task, Payout\n @return associatedTypeId Id of the associated type, e.g. if associatedType = FundingPotAssociatedType.Domain, this refers to the domainId\n @return payoutsWeCannotMake Number of payouts that cannot be completed with the current funding\n @dev For the reward funding pot (e.g. id: 0) this returns (0, 0, 0)."},"functionSelector":"7c1735a8","id":13459,"implemented":false,"kind":"function","modifiers":[],"name":"getFundingPot","nameLocation":"56316:13:13","nodeType":"FunctionDefinition","parameters":{"id":13450,"nodeType":"ParameterList","parameters":[{"constant":false,"id":13449,"mutability":"mutable","name":"_id","nameLocation":"56338:3:13","nodeType":"VariableDeclaration","scope":13459,"src":"56330:11:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":13448,"name":"uint256","nodeType":"ElementaryTypeName","src":"56330:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"56329:13:13"},"returnParameters":{"id":13458,"nodeType":"ParameterList","parameters":[{"constant":false,"id":13453,"mutability":"mutable","name":"associatedType","nameLocation":"56396:14:13","nodeType":"VariableDeclaration","scope":13459,"src":"56371:39:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_FundingPotAssociatedType_$3114","typeString":"enum ColonyDataTypes.FundingPotAssociatedType"},"typeName":{"id":13452,"nodeType":"UserDefinedTypeName","pathNode":{"id":13451,"name":"FundingPotAssociatedType","nameLocations":["56371:24:13"],"nodeType":"IdentifierPath","referencedDeclaration":3114,"src":"56371:24:13"},"referencedDeclaration":3114,"src":"56371:24:13","typeDescriptions":{"typeIdentifier":"t_enum$_FundingPotAssociatedType_$3114","typeString":"enum ColonyDataTypes.FundingPotAssociatedType"}},"visibility":"internal"},{"constant":false,"id":13455,"mutability":"mutable","name":"associatedTypeId","nameLocation":"56424:16:13","nodeType":"VariableDeclaration","scope":13459,"src":"56416:24:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":13454,"name":"uint256","nodeType":"ElementaryTypeName","src":"56416:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":13457,"mutability":"mutable","name":"payoutsWeCannotMake","nameLocation":"56454:19:13","nodeType":"VariableDeclaration","scope":13459,"src":"56446:27:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":13456,"name":"uint256","nodeType":"ElementaryTypeName","src":"56446:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"56365:109:13"},"scope":13658,"src":"56307:168:13","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":13460,"nodeType":"StructuredDocumentation","src":"56479:100:13","text":"@notice Get the number of funding pots in the colony.\n @return count The funding pots count"},"functionSelector":"25f759e3","id":13465,"implemented":false,"kind":"function","modifiers":[],"name":"getFundingPotCount","nameLocation":"56591:18:13","nodeType":"FunctionDefinition","parameters":{"id":13461,"nodeType":"ParameterList","parameters":[],"src":"56609:2:13"},"returnParameters":{"id":13464,"nodeType":"ParameterList","parameters":[{"constant":false,"id":13463,"mutability":"mutable","name":"count","nameLocation":"56643:5:13","nodeType":"VariableDeclaration","scope":13465,"src":"56635:13:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":13462,"name":"uint256","nodeType":"ElementaryTypeName","src":"56635:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"56634:15:13"},"scope":13658,"src":"56582:68:13","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":13466,"nodeType":"StructuredDocumentation","src":"56654:222:13","text":"@notice Get the `_token` balance of pot with id `_potId`.\n @param _potId Id of the funding pot\n @param _token Address of the token, `0x0` value indicates Ether\n @return balance Funding pot supply balance"},"functionSelector":"aae3bddd","id":13475,"implemented":false,"kind":"function","modifiers":[],"name":"getFundingPotBalance","nameLocation":"56888:20:13","nodeType":"FunctionDefinition","parameters":{"id":13471,"nodeType":"ParameterList","parameters":[{"constant":false,"id":13468,"mutability":"mutable","name":"_potId","nameLocation":"56917:6:13","nodeType":"VariableDeclaration","scope":13475,"src":"56909:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":13467,"name":"uint256","nodeType":"ElementaryTypeName","src":"56909:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":13470,"mutability":"mutable","name":"_token","nameLocation":"56933:6:13","nodeType":"VariableDeclaration","scope":13475,"src":"56925:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":13469,"name":"address","nodeType":"ElementaryTypeName","src":"56925:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"56908:32:13"},"returnParameters":{"id":13474,"nodeType":"ParameterList","parameters":[{"constant":false,"id":13473,"mutability":"mutable","name":"balance","nameLocation":"56972:7:13","nodeType":"VariableDeclaration","scope":13475,"src":"56964:15:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":13472,"name":"uint256","nodeType":"ElementaryTypeName","src":"56964:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"56963:17:13"},"scope":13658,"src":"56879:102:13","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":13476,"nodeType":"StructuredDocumentation","src":"56985:229:13","text":"@notice Get the assigned `_token` payouts of pot with id `_potId`.\n @param _potId Id of the funding pot\n @param _token Address of the token, `0x0` value indicates Ether\n @return payout Funding pot payout amount"},"functionSelector":"c5d0886e","id":13485,"implemented":false,"kind":"function","modifiers":[],"name":"getFundingPotPayout","nameLocation":"57226:19:13","nodeType":"FunctionDefinition","parameters":{"id":13481,"nodeType":"ParameterList","parameters":[{"constant":false,"id":13478,"mutability":"mutable","name":"_potId","nameLocation":"57254:6:13","nodeType":"VariableDeclaration","scope":13485,"src":"57246:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":13477,"name":"uint256","nodeType":"ElementaryTypeName","src":"57246:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":13480,"mutability":"mutable","name":"_token","nameLocation":"57270:6:13","nodeType":"VariableDeclaration","scope":13485,"src":"57262:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":13479,"name":"address","nodeType":"ElementaryTypeName","src":"57262:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"57245:32:13"},"returnParameters":{"id":13484,"nodeType":"ParameterList","parameters":[{"constant":false,"id":13483,"mutability":"mutable","name":"payout","nameLocation":"57309:6:13","nodeType":"VariableDeclaration","scope":13485,"src":"57301:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":13482,"name":"uint256","nodeType":"ElementaryTypeName","src":"57301:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"57300:16:13"},"scope":13658,"src":"57217:100:13","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":13486,"nodeType":"StructuredDocumentation","src":"57321:1002:13","text":"@notice Move a given amount: `_amount` of `_token` funds from funding pot with id `_fromPot` to one with id `_toPot`.\n @param _permissionDomainId The domainId in which I have the permission to take this action\n @param _childSkillIndex The child index in _permissionDomainId where I will be taking this action\n @param _domainId The domain where I am taking this action, pointed to by _permissionDomainId and _childSkillIndex\n @param _fromChildSkillIndex In the array of child skills for the skill associated with the domain pointed to by _permissionDomainId + _childSkillIndex,\n         the index of the skill associated with the domain that contains _fromPot\n @param _toChildSkillIndex The same, but for the _toPot which the funds are being moved to\n @param _fromPot Funding pot id providing the funds\n @param _toPot Funding pot id receiving the funds\n @param _amount Amount of funds\n @param _token Address of the token, `0x0` value indicates Ether"},"functionSelector":"3e77c549","id":13507,"implemented":false,"kind":"function","modifiers":[],"name":"moveFundsBetweenPots","nameLocation":"58335:20:13","nodeType":"FunctionDefinition","parameters":{"id":13505,"nodeType":"ParameterList","parameters":[{"constant":false,"id":13488,"mutability":"mutable","name":"_permissionDomainId","nameLocation":"58369:19:13","nodeType":"VariableDeclaration","scope":13507,"src":"58361:27:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":13487,"name":"uint256","nodeType":"ElementaryTypeName","src":"58361:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":13490,"mutability":"mutable","name":"_childSkillIndex","nameLocation":"58402:16:13","nodeType":"VariableDeclaration","scope":13507,"src":"58394:24:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":13489,"name":"uint256","nodeType":"ElementaryTypeName","src":"58394:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":13492,"mutability":"mutable","name":"_domainId","nameLocation":"58432:9:13","nodeType":"VariableDeclaration","scope":13507,"src":"58424:17:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":13491,"name":"uint256","nodeType":"ElementaryTypeName","src":"58424:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":13494,"mutability":"mutable","name":"_fromChildSkillIndex","nameLocation":"58455:20:13","nodeType":"VariableDeclaration","scope":13507,"src":"58447:28:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":13493,"name":"uint256","nodeType":"ElementaryTypeName","src":"58447:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":13496,"mutability":"mutable","name":"_toChildSkillIndex","nameLocation":"58489:18:13","nodeType":"VariableDeclaration","scope":13507,"src":"58481:26:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":13495,"name":"uint256","nodeType":"ElementaryTypeName","src":"58481:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":13498,"mutability":"mutable","name":"_fromPot","nameLocation":"58521:8:13","nodeType":"VariableDeclaration","scope":13507,"src":"58513:16:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":13497,"name":"uint256","nodeType":"ElementaryTypeName","src":"58513:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":13500,"mutability":"mutable","name":"_toPot","nameLocation":"58543:6:13","nodeType":"VariableDeclaration","scope":13507,"src":"58535:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":13499,"name":"uint256","nodeType":"ElementaryTypeName","src":"58535:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":13502,"mutability":"mutable","name":"_amount","nameLocation":"58563:7:13","nodeType":"VariableDeclaration","scope":13507,"src":"58555:15:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":13501,"name":"uint256","nodeType":"ElementaryTypeName","src":"58555:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":13504,"mutability":"mutable","name":"_token","nameLocation":"58584:6:13","nodeType":"VariableDeclaration","scope":13507,"src":"58576:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":13503,"name":"address","nodeType":"ElementaryTypeName","src":"58576:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"58355:241:13"},"returnParameters":{"id":13506,"nodeType":"ParameterList","parameters":[],"src":"58605:0:13"},"scope":13658,"src":"58326:280:13","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":13508,"nodeType":"StructuredDocumentation","src":"58610:701:13","text":"@notice @deprecated\n @notice Move a given amount: `_amount` of `_token` funds from funding pot with id `_fromPot` to one with id `_toPot`.\n @param _permissionDomainId The domainId in which I have the permission to take this action\n @param _fromChildSkillIndex The child index in `_permissionDomainId` where we can find the domain for `_fromPotId`\n @param _toChildSkillIndex The child index in `_permissionDomainId` where we can find the domain for `_toPotId`\n @param _fromPot Funding pot id providing the funds\n @param _toPot Funding pot id receiving the funds\n @param _amount Amount of funds\n @param _token Address of the token, `0x0` value indicates Ether"},"functionSelector":"c68d19ea","id":13525,"implemented":false,"kind":"function","modifiers":[],"name":"moveFundsBetweenPots","nameLocation":"59323:20:13","nodeType":"FunctionDefinition","parameters":{"id":13523,"nodeType":"ParameterList","parameters":[{"constant":false,"id":13510,"mutability":"mutable","name":"_permissionDomainId","nameLocation":"59357:19:13","nodeType":"VariableDeclaration","scope":13525,"src":"59349:27:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":13509,"name":"uint256","nodeType":"ElementaryTypeName","src":"59349:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":13512,"mutability":"mutable","name":"_fromChildSkillIndex","nameLocation":"59390:20:13","nodeType":"VariableDeclaration","scope":13525,"src":"59382:28:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":13511,"name":"uint256","nodeType":"ElementaryTypeName","src":"59382:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":13514,"mutability":"mutable","name":"_toChildSkillIndex","nameLocation":"59424:18:13","nodeType":"VariableDeclaration","scope":13525,"src":"59416:26:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":13513,"name":"uint256","nodeType":"ElementaryTypeName","src":"59416:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":13516,"mutability":"mutable","name":"_fromPot","nameLocation":"59456:8:13","nodeType":"VariableDeclaration","scope":13525,"src":"59448:16:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":13515,"name":"uint256","nodeType":"ElementaryTypeName","src":"59448:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":13518,"mutability":"mutable","name":"_toPot","nameLocation":"59478:6:13","nodeType":"VariableDeclaration","scope":13525,"src":"59470:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":13517,"name":"uint256","nodeType":"ElementaryTypeName","src":"59470:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":13520,"mutability":"mutable","name":"_amount","nameLocation":"59498:7:13","nodeType":"VariableDeclaration","scope":13525,"src":"59490:15:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":13519,"name":"uint256","nodeType":"ElementaryTypeName","src":"59490:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":13522,"mutability":"mutable","name":"_token","nameLocation":"59519:6:13","nodeType":"VariableDeclaration","scope":13525,"src":"59511:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":13521,"name":"address","nodeType":"ElementaryTypeName","src":"59511:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"59343:188:13"},"returnParameters":{"id":13524,"nodeType":"ParameterList","parameters":[],"src":"59540:0:13"},"scope":13658,"src":"59314:227:13","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":13526,"nodeType":"StructuredDocumentation","src":"59545:284:13","text":"@notice Move any funds received by the colony in `_token` denomination to the top-level domain pot,\n siphoning off a small amount to the reward pot. If called against a colony's own token, no fee is taken.\n @param _token Address of the token, `0x0` value indicates Ether"},"functionSelector":"89224a1e","id":13531,"implemented":false,"kind":"function","modifiers":[],"name":"claimColonyFunds","nameLocation":"59841:16:13","nodeType":"FunctionDefinition","parameters":{"id":13529,"nodeType":"ParameterList","parameters":[{"constant":false,"id":13528,"mutability":"mutable","name":"_token","nameLocation":"59866:6:13","nodeType":"VariableDeclaration","scope":13531,"src":"59858:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":13527,"name":"address","nodeType":"ElementaryTypeName","src":"59858:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"59857:16:13"},"returnParameters":{"id":13530,"nodeType":"ParameterList","parameters":[],"src":"59882:0:13"},"scope":13658,"src":"59832:51:13","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":13532,"nodeType":"StructuredDocumentation","src":"59887:296:13","text":"@notice Get the total amount of tokens `_token` minus amount reserved to be paid to the reputation and token holders as rewards.\n @param _token Address of the token, `0x0` value indicates Ether\n @return amount Total amount of tokens in funding pots other than the rewards pot (id 0)"},"functionSelector":"34fa7aa2","id":13539,"implemented":false,"kind":"function","modifiers":[],"name":"getNonRewardPotsTotal","nameLocation":"60195:21:13","nodeType":"FunctionDefinition","parameters":{"id":13535,"nodeType":"ParameterList","parameters":[{"constant":false,"id":13534,"mutability":"mutable","name":"_token","nameLocation":"60225:6:13","nodeType":"VariableDeclaration","scope":13539,"src":"60217:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":13533,"name":"address","nodeType":"ElementaryTypeName","src":"60217:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"60216:16:13"},"returnParameters":{"id":13538,"nodeType":"ParameterList","parameters":[{"constant":false,"id":13537,"mutability":"mutable","name":"amount","nameLocation":"60264:6:13","nodeType":"VariableDeclaration","scope":13539,"src":"60256:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":13536,"name":"uint256","nodeType":"ElementaryTypeName","src":"60256:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"60255:16:13"},"scope":13658,"src":"60186:86:13","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":13540,"nodeType":"StructuredDocumentation","src":"60276:319:13","text":"@notice Allow the _approvee to obligate some amount of tokens as a stake.\n @param _approvee Address of the account we are willing to let obligate us.\n @param _domainId Domain in which we are willing to be obligated.\n @param _amount Amount of internal token up to which we are willing to be obligated."},"functionSelector":"354f33d8","id":13549,"implemented":false,"kind":"function","modifiers":[],"name":"approveStake","nameLocation":"60607:12:13","nodeType":"FunctionDefinition","parameters":{"id":13547,"nodeType":"ParameterList","parameters":[{"constant":false,"id":13542,"mutability":"mutable","name":"_approvee","nameLocation":"60628:9:13","nodeType":"VariableDeclaration","scope":13549,"src":"60620:17:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":13541,"name":"address","nodeType":"ElementaryTypeName","src":"60620:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":13544,"mutability":"mutable","name":"_domainId","nameLocation":"60647:9:13","nodeType":"VariableDeclaration","scope":13549,"src":"60639:17:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":13543,"name":"uint256","nodeType":"ElementaryTypeName","src":"60639:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":13546,"mutability":"mutable","name":"_amount","nameLocation":"60666:7:13","nodeType":"VariableDeclaration","scope":13549,"src":"60658:15:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":13545,"name":"uint256","nodeType":"ElementaryTypeName","src":"60658:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"60619:55:13"},"returnParameters":{"id":13548,"nodeType":"ParameterList","parameters":[],"src":"60683:0:13"},"scope":13658,"src":"60598:86:13","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":13550,"nodeType":"StructuredDocumentation","src":"60688:256:13","text":"@notice Obligate the user some amount of tokens as a stake.\n @param _user Address of the account we are obligating.\n @param _domainId Domain in which we are obligating the user.\n @param _amount Amount of internal token we are obligating."},"functionSelector":"096abb49","id":13559,"implemented":false,"kind":"function","modifiers":[],"name":"obligateStake","nameLocation":"60956:13:13","nodeType":"FunctionDefinition","parameters":{"id":13557,"nodeType":"ParameterList","parameters":[{"constant":false,"id":13552,"mutability":"mutable","name":"_user","nameLocation":"60978:5:13","nodeType":"VariableDeclaration","scope":13559,"src":"60970:13:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":13551,"name":"address","nodeType":"ElementaryTypeName","src":"60970:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":13554,"mutability":"mutable","name":"_domainId","nameLocation":"60993:9:13","nodeType":"VariableDeclaration","scope":13559,"src":"60985:17:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":13553,"name":"uint256","nodeType":"ElementaryTypeName","src":"60985:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":13556,"mutability":"mutable","name":"_amount","nameLocation":"61012:7:13","nodeType":"VariableDeclaration","scope":13559,"src":"61004:15:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":13555,"name":"uint256","nodeType":"ElementaryTypeName","src":"61004:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"60969:51:13"},"returnParameters":{"id":13558,"nodeType":"ParameterList","parameters":[],"src":"61029:0:13"},"scope":13658,"src":"60947:83:13","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":13560,"nodeType":"StructuredDocumentation","src":"61034:274:13","text":"@notice Deobligate the user some amount of tokens, releasing the stake.\n @param _user Address of the account we are deobligating.\n @param _domainId Domain in which we are deobligating the user.\n @param _amount Amount of internal token we are deobligating."},"functionSelector":"37a68e67","id":13569,"implemented":false,"kind":"function","modifiers":[],"name":"deobligateStake","nameLocation":"61320:15:13","nodeType":"FunctionDefinition","parameters":{"id":13567,"nodeType":"ParameterList","parameters":[{"constant":false,"id":13562,"mutability":"mutable","name":"_user","nameLocation":"61344:5:13","nodeType":"VariableDeclaration","scope":13569,"src":"61336:13:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":13561,"name":"address","nodeType":"ElementaryTypeName","src":"61336:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":13564,"mutability":"mutable","name":"_domainId","nameLocation":"61359:9:13","nodeType":"VariableDeclaration","scope":13569,"src":"61351:17:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":13563,"name":"uint256","nodeType":"ElementaryTypeName","src":"61351:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":13566,"mutability":"mutable","name":"_amount","nameLocation":"61378:7:13","nodeType":"VariableDeclaration","scope":13569,"src":"61370:15:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":13565,"name":"uint256","nodeType":"ElementaryTypeName","src":"61370:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"61335:51:13"},"returnParameters":{"id":13568,"nodeType":"ParameterList","parameters":[],"src":"61395:0:13"},"scope":13658,"src":"61311:85:13","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":13570,"nodeType":"StructuredDocumentation","src":"61400:631:13","text":"@notice Transfer some amount of obligated tokens.\n Can be called by the arbitration role.\n @param _permissionDomainId The domainId in which I have the permission to take this action.\n @param _childSkillIndex The child index in `_permissionDomainId` where we can find `_domainId`.\n @param _obligator Address of the account who set the obligation.\n @param _user Address of the account we are transferring.\n @param _domainId Domain in which we are transferring the tokens.\n @param _amount Amount of internal token we are transferring.\n @param _recipient Recipient of the transferred tokens."},"functionSelector":"446c1aa2","id":13587,"implemented":false,"kind":"function","modifiers":[],"name":"transferStake","nameLocation":"62043:13:13","nodeType":"FunctionDefinition","parameters":{"id":13585,"nodeType":"ParameterList","parameters":[{"constant":false,"id":13572,"mutability":"mutable","name":"_permissionDomainId","nameLocation":"62070:19:13","nodeType":"VariableDeclaration","scope":13587,"src":"62062:27:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":13571,"name":"uint256","nodeType":"ElementaryTypeName","src":"62062:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":13574,"mutability":"mutable","name":"_childSkillIndex","nameLocation":"62103:16:13","nodeType":"VariableDeclaration","scope":13587,"src":"62095:24:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":13573,"name":"uint256","nodeType":"ElementaryTypeName","src":"62095:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":13576,"mutability":"mutable","name":"_obligator","nameLocation":"62133:10:13","nodeType":"VariableDeclaration","scope":13587,"src":"62125:18:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":13575,"name":"address","nodeType":"ElementaryTypeName","src":"62125:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":13578,"mutability":"mutable","name":"_user","nameLocation":"62157:5:13","nodeType":"VariableDeclaration","scope":13587,"src":"62149:13:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":13577,"name":"address","nodeType":"ElementaryTypeName","src":"62149:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":13580,"mutability":"mutable","name":"_domainId","nameLocation":"62176:9:13","nodeType":"VariableDeclaration","scope":13587,"src":"62168:17:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":13579,"name":"uint256","nodeType":"ElementaryTypeName","src":"62168:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":13582,"mutability":"mutable","name":"_amount","nameLocation":"62199:7:13","nodeType":"VariableDeclaration","scope":13587,"src":"62191:15:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":13581,"name":"uint256","nodeType":"ElementaryTypeName","src":"62191:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":13584,"mutability":"mutable","name":"_recipient","nameLocation":"62220:10:13","nodeType":"VariableDeclaration","scope":13587,"src":"62212:18:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":13583,"name":"address","nodeType":"ElementaryTypeName","src":"62212:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"62056:180:13"},"returnParameters":{"id":13586,"nodeType":"ParameterList","parameters":[],"src":"62245:0:13"},"scope":13658,"src":"62034:212:13","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":13588,"nodeType":"StructuredDocumentation","src":"62250:320:13","text":"@notice View an approval to obligate tokens.\n @param _user User allowing their tokens to be obligated.\n @param _obligator Address of the account we are willing to let obligate us.\n @param _domainId Domain in which we are willing to be obligated.\n @return approval The amount the user has approved"},"functionSelector":"312d371d","id":13599,"implemented":false,"kind":"function","modifiers":[],"name":"getApproval","nameLocation":"62582:11:13","nodeType":"FunctionDefinition","parameters":{"id":13595,"nodeType":"ParameterList","parameters":[{"constant":false,"id":13590,"mutability":"mutable","name":"_user","nameLocation":"62602:5:13","nodeType":"VariableDeclaration","scope":13599,"src":"62594:13:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":13589,"name":"address","nodeType":"ElementaryTypeName","src":"62594:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":13592,"mutability":"mutable","name":"_obligator","nameLocation":"62617:10:13","nodeType":"VariableDeclaration","scope":13599,"src":"62609:18:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":13591,"name":"address","nodeType":"ElementaryTypeName","src":"62609:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":13594,"mutability":"mutable","name":"_domainId","nameLocation":"62637:9:13","nodeType":"VariableDeclaration","scope":13599,"src":"62629:17:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":13593,"name":"uint256","nodeType":"ElementaryTypeName","src":"62629:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"62593:54:13"},"returnParameters":{"id":13598,"nodeType":"ParameterList","parameters":[{"constant":false,"id":13597,"mutability":"mutable","name":"approval","nameLocation":"62679:8:13","nodeType":"VariableDeclaration","scope":13599,"src":"62671:16:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":13596,"name":"uint256","nodeType":"ElementaryTypeName","src":"62671:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"62670:18:13"},"scope":13658,"src":"62573:116:13","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":13600,"nodeType":"StructuredDocumentation","src":"62693:279:13","text":"@notice View an obligation of tokens.\n @param _user User whose tokens are obligated.\n @param _obligator Address of the account who obligated us.\n @param _domainId Domain in which we are obligated.\n @return obligation The amount that is currently obligated"},"functionSelector":"5f2b8cb2","id":13611,"implemented":false,"kind":"function","modifiers":[],"name":"getObligation","nameLocation":"62984:13:13","nodeType":"FunctionDefinition","parameters":{"id":13607,"nodeType":"ParameterList","parameters":[{"constant":false,"id":13602,"mutability":"mutable","name":"_user","nameLocation":"63006:5:13","nodeType":"VariableDeclaration","scope":13611,"src":"62998:13:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":13601,"name":"address","nodeType":"ElementaryTypeName","src":"62998:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":13604,"mutability":"mutable","name":"_obligator","nameLocation":"63021:10:13","nodeType":"VariableDeclaration","scope":13611,"src":"63013:18:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":13603,"name":"address","nodeType":"ElementaryTypeName","src":"63013:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":13606,"mutability":"mutable","name":"_domainId","nameLocation":"63041:9:13","nodeType":"VariableDeclaration","scope":13611,"src":"63033:17:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":13605,"name":"uint256","nodeType":"ElementaryTypeName","src":"63033:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"62997:54:13"},"returnParameters":{"id":13610,"nodeType":"ParameterList","parameters":[{"constant":false,"id":13609,"mutability":"mutable","name":"obligation","nameLocation":"63083:10:13","nodeType":"VariableDeclaration","scope":13611,"src":"63075:18:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":13608,"name":"uint256","nodeType":"ElementaryTypeName","src":"63075:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"63074:20:13"},"scope":13658,"src":"62975:120:13","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":13612,"nodeType":"StructuredDocumentation","src":"63099:160:13","text":"@notice Get the domain corresponding to a funding pot\n @param _fundingPotId Id of the funding pot\n @return domainId Id of the corresponding domain"},"functionSelector":"b61b5317","id":13619,"implemented":false,"kind":"function","modifiers":[],"name":"getDomainFromFundingPot","nameLocation":"63271:23:13","nodeType":"FunctionDefinition","parameters":{"id":13615,"nodeType":"ParameterList","parameters":[{"constant":false,"id":13614,"mutability":"mutable","name":"_fundingPotId","nameLocation":"63303:13:13","nodeType":"VariableDeclaration","scope":13619,"src":"63295:21:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":13613,"name":"uint256","nodeType":"ElementaryTypeName","src":"63295:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"63294:23:13"},"returnParameters":{"id":13618,"nodeType":"ParameterList","parameters":[{"constant":false,"id":13617,"mutability":"mutable","name":"domainId","nameLocation":"63349:8:13","nodeType":"VariableDeclaration","scope":13619,"src":"63341:16:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":13616,"name":"uint256","nodeType":"ElementaryTypeName","src":"63341:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"63340:18:13"},"scope":13658,"src":"63262:97:13","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":13620,"nodeType":"StructuredDocumentation","src":"63363:195:13","text":"@notice Burn tokens held by the colony. Can only burn tokens held in the root funding pot.\n @param token The address of the token to burn\n @param amount The amount of tokens to burn"},"functionSelector":"0d1118ce","id":13627,"implemented":false,"kind":"function","modifiers":[],"name":"burnTokens","nameLocation":"63570:10:13","nodeType":"FunctionDefinition","parameters":{"id":13625,"nodeType":"ParameterList","parameters":[{"constant":false,"id":13622,"mutability":"mutable","name":"token","nameLocation":"63589:5:13","nodeType":"VariableDeclaration","scope":13627,"src":"63581:13:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":13621,"name":"address","nodeType":"ElementaryTypeName","src":"63581:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":13624,"mutability":"mutable","name":"amount","nameLocation":"63604:6:13","nodeType":"VariableDeclaration","scope":13627,"src":"63596:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":13623,"name":"uint256","nodeType":"ElementaryTypeName","src":"63596:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"63580:31:13"},"returnParameters":{"id":13626,"nodeType":"ParameterList","parameters":[],"src":"63620:0:13"},"scope":13658,"src":"63561:60:13","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":13628,"nodeType":"StructuredDocumentation","src":"63625:55:13","text":"@notice unlock the native colony token, if possible"},"functionSelector":"18a24b5b","id":13631,"implemented":false,"kind":"function","modifiers":[],"name":"unlockToken","nameLocation":"63692:11:13","nodeType":"FunctionDefinition","parameters":{"id":13629,"nodeType":"ParameterList","parameters":[],"src":"63703:2:13"},"returnParameters":{"id":13630,"nodeType":"ParameterList","parameters":[],"src":"63714:0:13"},"scope":13658,"src":"63683:32:13","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":13632,"nodeType":"StructuredDocumentation","src":"63719:188:13","text":"@notice Update the internal bookkeeping around external ERC20 approvals\n @param token The address of the token which was approved\n @param spender The account we have approved"},"functionSelector":"811c4f9b","id":13639,"implemented":false,"kind":"function","modifiers":[],"name":"updateApprovalAmount","nameLocation":"63919:20:13","nodeType":"FunctionDefinition","parameters":{"id":13637,"nodeType":"ParameterList","parameters":[{"constant":false,"id":13634,"mutability":"mutable","name":"token","nameLocation":"63948:5:13","nodeType":"VariableDeclaration","scope":13639,"src":"63940:13:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":13633,"name":"address","nodeType":"ElementaryTypeName","src":"63940:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":13636,"mutability":"mutable","name":"spender","nameLocation":"63963:7:13","nodeType":"VariableDeclaration","scope":13639,"src":"63955:15:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":13635,"name":"address","nodeType":"ElementaryTypeName","src":"63955:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"63939:32:13"},"returnParameters":{"id":13638,"nodeType":"ParameterList","parameters":[],"src":"63980:0:13"},"scope":13658,"src":"63910:71:13","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":13640,"nodeType":"StructuredDocumentation","src":"63985:203:13","text":"@notice Get the current approval amount\n @param token The address of the token which was approved\n @param spender The account we have approved\n @return amount The token approval amount"},"functionSelector":"65dfedc4","id":13649,"implemented":false,"kind":"function","modifiers":[],"name":"getTokenApproval","nameLocation":"64200:16:13","nodeType":"FunctionDefinition","parameters":{"id":13645,"nodeType":"ParameterList","parameters":[{"constant":false,"id":13642,"mutability":"mutable","name":"token","nameLocation":"64225:5:13","nodeType":"VariableDeclaration","scope":13649,"src":"64217:13:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":13641,"name":"address","nodeType":"ElementaryTypeName","src":"64217:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":13644,"mutability":"mutable","name":"spender","nameLocation":"64240:7:13","nodeType":"VariableDeclaration","scope":13649,"src":"64232:15:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":13643,"name":"address","nodeType":"ElementaryTypeName","src":"64232:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"64216:32:13"},"returnParameters":{"id":13648,"nodeType":"ParameterList","parameters":[{"constant":false,"id":13647,"mutability":"mutable","name":"amount","nameLocation":"64280:6:13","nodeType":"VariableDeclaration","scope":13649,"src":"64272:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":13646,"name":"uint256","nodeType":"ElementaryTypeName","src":"64272:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"64271:16:13"},"scope":13658,"src":"64191:97:13","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":13650,"nodeType":"StructuredDocumentation","src":"64292:185:13","text":"@notice Get the current total approval amount across all spenders\n @param token The address of the token which was approved\n @return amount The total token approval amount"},"functionSelector":"fe359995","id":13657,"implemented":false,"kind":"function","modifiers":[],"name":"getTotalTokenApproval","nameLocation":"64489:21:13","nodeType":"FunctionDefinition","parameters":{"id":13653,"nodeType":"ParameterList","parameters":[{"constant":false,"id":13652,"mutability":"mutable","name":"token","nameLocation":"64519:5:13","nodeType":"VariableDeclaration","scope":13657,"src":"64511:13:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":13651,"name":"address","nodeType":"ElementaryTypeName","src":"64511:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"64510:15:13"},"returnParameters":{"id":13656,"nodeType":"ParameterList","parameters":[{"constant":false,"id":13655,"mutability":"mutable","name":"amount","nameLocation":"64557:6:13","nodeType":"VariableDeclaration","scope":13657,"src":"64549:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":13654,"name":"uint256","nodeType":"ElementaryTypeName","src":"64549:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"64548:16:13"},"scope":13658,"src":"64480:85:13","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":13659,"src":"934:63633:13","usedErrors":[],"usedEvents":[2504,2515,2524,2537,2550,2561,2568,2575,2586,2593,2600,2607,2616,2623,2630,2637,2646,2657,2668,2681,2692,2703,2720,2727,2734,2741,2748,2755,2765,2777,2783,2792,2799,2811,2818,2827,2838,2843,2850,2859,2866,2875,2884,2891,2898,2903,2912,2923,2932,2941,2948,2957,2962,2973,2981,20025,20030,20035,20046,20051,20445]}],"src":"700:63868:13"},"compiler":{"name":"solc","version":"0.8.20+commit.a1b79de6.Linux.g++"},"networks":{},"schemaVersion":"3.4.14","updatedAt":"2023-07-28T09:26:06.114Z","devdoc":{"events":{"Annotation(address,bytes32,string)":{"params":{"agent":"Agent emitting the annotation","metadata":"IPFS hash of the metadata","txHash":"Hash of transaction being annotated (0x0 for current tx)"}},"ArbitraryReputationUpdate(address,address,uint256,int256)":{"params":{"agent":"The address that is responsible for triggering this event","amount":"The (maximum) amount the address is having its reputation changed by","skillId":"The id of the skill the user is having their reputation changed in","user":"The address that is having its reputation changed"}},"ColonyBootstrapped(address,address[],int256[])":{"params":{"agent":"The address that is responsible for triggering this event","amounts":"Amounts of reputation/tokens for every address","users":"Array of address bootstraped with reputation"}},"ColonyFundsClaimed(address,address,uint256,uint256)":{"params":{"agent":"The address that is responsible for triggering this event","fee":"The fee deducted for rewards","payoutRemainder":"The remaining funds moved to the top-level domain pot","token":"The token address"}},"ColonyFundsMovedBetweenFundingPots(address,uint256,uint256,uint256,address)":{"params":{"agent":"The address that is responsible for triggering this event","amount":"The amount that was transferred","fromPot":"The source funding pot","toPot":"The targer funding pot","token":"The token address being transferred"}},"ColonyInitialised(address,address,address)":{"params":{"agent":"The address that is responsible for triggering this event","colonyNetwork":"The Colony Network address","token":"The Colony Token address"}},"ColonyMetadata(address,string)":{"params":{"agent":"The address that is responsible for triggering this event","metadata":"IPFS hash of the metadata"}},"ColonyMetadataDelta(address,string)":{"params":{"agent":"The address that is responsible for triggering this event","metadata":"IPFS hash of the delta"}},"ColonyRewardInverseSet(address,uint256)":{"params":{"agent":"The address that is responsible for triggering this event","rewardInverse":"The reward inverse value"}},"ColonyRoleSet(address,address,uint256,uint8,bool)":{"params":{"agent":"The address that is responsible for triggering this event","domainId":"The domainId of the role","role":"The role being granted/revoked","setTo":"A boolean representing the action -- granted (`true`) or revoked (`false`)","user":"The address of the user being affected"}},"ColonyUpgraded(address,uint256,uint256)":{"params":{"agent":"The address that is responsible for triggering this event","newVersion":"The new colony version upgraded to","oldVersion":"The previous colony version"}},"DomainAdded(address,uint256)":{"params":{"agent":"The address that is responsible for triggering this event","domainId":"Id of the newly-created Domain"}},"DomainDeprecated(address,uint256,bool)":{"params":{"agent":"The address that is responsible for triggering this event","deprecated":"Whether or not the domain is deprecated","domainId":"Id of the domain"}},"DomainMetadata(address,uint256,string)":{"params":{"agent":"The address that is responsible for triggering this event","domainId":"Id of the newly-created Domain","metadata":"IPFS hash of the metadata"}},"ExpenditureAdded(address,uint256)":{"params":{"agent":"The address that is responsible for triggering this event","expenditureId":"The newly added expenditure id"}},"ExpenditureCancelled(address,uint256)":{"params":{"agent":"The address that is responsible for triggering this event","expenditureId":"Id of the cancelled expenditure"}},"ExpenditureClaimDelaySet(address,uint256,uint256,uint256)":{"params":{"agent":"The address that is responsible for triggering this event","claimDelay":"Additional amount of time to hold the funds","expenditureId":"Id of the expenditure","slot":"Expenditure slot being changed"}},"ExpenditureFinalized(address,uint256)":{"params":{"agent":"The address that is responsible for triggering this event","expenditureId":"Id of the finalized expenditure"}},"ExpenditureGlobalClaimDelaySet(address,uint256)":{"params":{"agent":"The address that is responsible for triggering this event","globalClaimDelay":"The new default global claim delay"}},"ExpenditureLocked(address,uint256)":{"params":{"agent":"The address that is responsible for triggering this event","expenditureId":"Id of the locked expenditure"}},"ExpenditureMetadataSet(address,uint256,string)":{"params":{"agent":"The address that is responsible for triggering this event","expenditureId":"Id of the expenditure","metadata":"IPFS hash of the metadata"}},"ExpenditurePayoutModifierSet(address,uint256,uint256,int256)":{"params":{"agent":"The address that is responsible for triggering this event","expenditureId":"Id of the expenditure","payoutModifier":"The payout modifier for the slot","slot":"Expenditure slot being changed"}},"ExpenditurePayoutSet(address,uint256,uint256,address,uint256)":{"params":{"agent":"The address that is responsible for triggering this event","amount":"Amount of the payout funding","expenditureId":"Id of the expenditure","slot":"Expenditure slot of the payout being changed","token":"Token of the payout funding"}},"ExpenditureRecipientSet(address,uint256,uint256,address)":{"params":{"agent":"The address that is responsible for triggering this event","expenditureId":"Id of the expenditure","recipient":"Address of the recipient","slot":"Expenditure slot of the recipient"}},"ExpenditureSkillSet(address,uint256,uint256,uint256)":{"params":{"agent":"The address that is responsible for triggering this event","expenditureId":"Id of the expenditure","skillId":"Id of the set skill","slot":"Slot receiving the skill"}},"ExpenditureStateChanged(address,uint256,uint256,bool[],bytes32[],bytes32)":{"params":{"agent":"The address that is responsible for triggering this event","expenditureId":"Id of the expenditure","keys":"Values used to construct final slot via mapping or array operations","mask":"Mask indicating whether we are making mapping or array operations","storageSlot":"Initial storage slot being set (expenditures or expenditureSlots)","value":"Value being set in the slot"}},"ExpenditureTransferred(address,uint256,address)":{"params":{"agent":"The address that is responsible for triggering this event","expenditureId":"The expenditure id","owner":"The new owner of the expenditure"}},"FundingPotAdded(uint256)":{"params":{"fundingPotId":"Id of the newly-created FundingPot"}},"LocalSkillAdded(address,uint256)":{"params":{"agent":"The address that is responsible for triggering this event","localSkillId":"Id of the newly-created local skill"}},"LocalSkillDeprecated(address,uint256,bool)":{"params":{"agent":"The address that is responsible for triggering this event","deprecated":"Deprecation status of the local skill","localSkillId":"Id of the newly-created local skill"}},"PaymentAdded(address,uint256)":{"params":{"agent":"The address that is responsible for triggering this event","paymentId":"The newly added payment id"}},"PaymentFinalized(address,uint256)":{"params":{"agent":"The address that is responsible for triggering this event","paymentId":"Id of the payment"}},"PaymentPayoutSet(address,uint256,address,uint256)":{"params":{"agent":"The address that is responsible for triggering this event","amount":"Amount of token to be paid out","paymentId":"Id of the payment","token":"Token of the payout"}},"PaymentRecipientSet(address,uint256,address)":{"params":{"agent":"The address that is responsible for triggering this event","paymentId":"Id of the payment","recipient":"Address to receive the payout"}},"PaymentSkillSet(address,uint256,uint256)":{"params":{"agent":"The address that is responsible for triggering this event","paymentId":"Id of the payment","skillId":"Token of the payout"}},"PayoutClaimed(address,uint256,address,uint256)":{"params":{"agent":"The address that is responsible for triggering this event","amount":"Amount of the payout claimed, after network fee was deducted","fundingPotId":"Id of the funding pot where payout comes from","token":"Token of the payout claim"}},"RecoveryModeEntered(address)":{"params":{"user":"The address that triggered recovery mode"}},"RecoveryModeExitApproved(address)":{"params":{"user":"The address signalling they are happy with the state"}},"RecoveryModeExited(address)":{"params":{"user":"The address that left recovery mode"}},"RecoveryRoleSet(address,bool)":{"params":{"setTo":"The boolean indicating whether the role is being granted or revoked","user":"The address being modified"}},"RecoveryStorageSlotSet(address,uint256,bytes32,bytes32)":{"params":{"fromValue":"The value the storage slot had before this transaction","slot":"The storage slot being modified","toValue":"The value the storage slot has after this transaction","user":"The address that set the storage slot"}},"RewardPayoutClaimed(uint256,address,uint256,uint256)":{"params":{"fee":"The fee deducted from payout","rewardPayoutId":"The reward payout cycle id","rewardRemainder":"The remaining reward amount paid out to user","user":"The user address who received the reward payout"}},"RewardPayoutCycleEnded(address,uint256)":{"params":{"agent":"The address that is responsible for triggering this event","rewardPayoutId":"The reward payout cycle id"}},"RewardPayoutCycleStarted(address,uint256)":{"params":{"agent":"The address that is responsible for triggering this event","rewardPayoutId":"The reward payout cycle id"}},"TaskAdded(address,uint256)":{"params":{"agent":"The address that is responsible for triggering this event","taskId":"The newly added task id"}},"TaskBriefSet(uint256,bytes32)":{"params":{"specificationHash":"New specification hash of the task","taskId":"Id of the task"}},"TaskCanceled(uint256)":{"params":{"taskId":"Id of the canceled task"}},"TaskChangedViaSignatures(address[])":{"params":{"reviewerAddresses":"Array of addresses that signed off this change."}},"TaskCompleted(address,uint256)":{"params":{"agent":"The address that is responsible for triggering this event","taskId":"The id of the task being completed"}},"TaskDeliverableSubmitted(address,uint256,bytes32)":{"params":{"agent":"The address that is responsible for triggering this event","deliverableHash":"Hash of the work performed","taskId":"Id of the task"}},"TaskDueDateSet(uint256,uint256)":{"params":{"dueDate":"New due date of the task","taskId":"Id of the task"}},"TaskFinalized(address,uint256)":{"params":{"agent":"The address that is responsible for triggering this event","taskId":"Id of the finalized task"}},"TaskPayoutSet(uint256,uint8,address,uint256)":{"params":{"amount":"Amount of the payout funding","role":"Task role whose payout is being changed","taskId":"Id of the task","token":"Token of the payout funding"}},"TaskRoleUserSet(uint256,uint8,address)":{"params":{"role":"Role of the user","taskId":"Id of the task","user":"User that fulfills the designated role"}},"TaskSkillSet(uint256,uint256)":{"params":{"skillId":"New skill id of the task","taskId":"Id of the task"}},"TaskWorkRatingRevealed(address,uint256,uint8,uint8)":{"params":{"agent":"The address that is responsible for triggering this event","rating":"Rating the role received","role":"Role that got rated","taskId":"Id of the task"}},"TokenUnlocked(address)":{"params":{"agent":"The address that is responsible for triggering this event"}},"TokensBurned(address,address,uint256)":{"params":{"agent":"The address that is responsible for triggering this event","token":"the amount of the token being burned"}},"TokensMinted(address,address,uint256)":{"params":{"agent":"The address that is responsible for triggering this event","amount":"The amount of tokens being awarded","who":"The address being awarded the tokens"}}},"kind":"dev","methods":{"addDomain(uint256,uint256,uint256)":{"details":"Adding new domains is currently retricted to one level only, i.e. `_parentDomainId` has to be the root domain id: `1`.","params":{"_childSkillIndex":"The index that the `_domainId` is relative to `_permissionDomainId`","_parentDomainId":"Id of the domain under which the new one will be added","_permissionDomainId":"The domainId in which I have the permission to take this action"}},"addDomain(uint256,uint256,uint256,string)":{"details":"Adding new domains is currently retricted to one level only, i.e. `_parentDomainId` has to be the root domain id: `1`.We expect this function to only be used by the dapp","params":{"_childSkillIndex":"The index that the `_domainId` is relative to `_permissionDomainId`","_metadata":"Metadata relating to the domain. Expected to be the IPFS hash of a JSON blob, but not enforced by the contracts.","_parentDomainId":"Id of the domain under which the new one will be added","_permissionDomainId":"The domainId in which I have the permission to take this action"}},"addPayment(uint256,uint256,address,address,uint256,uint256,uint256)":{"params":{"_amount":"Payout amount","_childSkillIndex":"The index that the `_domainId` is relative to `_permissionDomainId`, (only used if `_permissionDomainId` is different to `_domainId`)","_domainId":"The domain where the payment belongs","_permissionDomainId":"The domainId in which I have the permission to take this action","_recipient":"Address of the payment recipient","_skillId":"The skill associated with the payment","_token":"Address of the token, `0x0` value indicates Ether"},"returns":{"paymentId":"Identifier of the newly created payment"}},"annotateTransaction(bytes32,string)":{"params":{"_metadata":"String of metadata for tx","_txHash":"Hash of transaction being annotated (0x0 for current tx)"}},"approveStake(address,uint256,uint256)":{"params":{"_amount":"Amount of internal token up to which we are willing to be obligated.","_approvee":"Address of the account we are willing to let obligate us.","_domainId":"Domain in which we are willing to be obligated."}},"authority()":{"returns":{"colonyAuthority":"The `ColonyAuthority` contract address"}},"bootstrapColony(address[],int256[])":{"details":"Only allowed to be called when `taskCount` is `0` by authorized addresses.","params":{"_amount":"Amount of reputation/tokens for every address","_users":"Array of address to bootstrap with reputation"}},"burnTokens(address,uint256)":{"params":{"amount":"The amount of tokens to burn","token":"The address of the token to burn"}},"cancelExpenditure(uint256)":{"params":{"_id":"Expenditure identifier"}},"cancelTask(uint256)":{"details":"Set the `task.status` property to `1`.","params":{"_id":"Id of the task"}},"checkNotAdditionalProtectedVariable(uint256)":{"details":"No return value, but should throw if protected.This is external, but is only expected to be called from ContractRecovery; no need toexpose this to any users.","params":{"_slot":"The storage slot number to check."}},"claimColonyFunds(address)":{"params":{"_token":"Address of the token, `0x0` value indicates Ether"}},"claimExpenditurePayout(uint256,uint256,address)":{"params":{"_id":"Expenditure identifier","_slot":"Number of the slot","_token":"Address of the token, `0x0` value indicates Ether"}},"claimPayment(uint256,address)":{"params":{"_id":"Payment identifier","_token":"Address of the token, `0x0` value indicates Ether"}},"claimRewardPayout(uint256,uint256[7],bytes,bytes,uint256,bytes32[])":{"params":{"_payoutId":"Id of the reward payout","_squareRoots":"Square roots of values used in equation: `_squareRoots[0]` - square root of user reputation, `_squareRoots[1]` - square root of user tokens (deposited in TokenLocking), `_squareRoots[2]` - square root of total reputation, `_squareRoots[3]` - square root of total tokens, `_squareRoots[4]` - square root of numerator (user reputation * user tokens), `_squareRoots[5]` - square root of denominator (total reputation * total tokens), `_squareRoots[6]` - square root of payout amount.","branchMask":"The branchmask of the proof","key":"Some Reputation hash tree key","siblings":"The siblings of the proof","value":"Reputation value"}},"claimTaskPayout(uint256,uint8,address)":{"params":{"_id":"Id of the task","_role":"Id of the role, as defined in TaskRole enum","_token":"Address of the token, `0x0` value indicates Ether"}},"completeTask(uint256)":{"params":{"_id":"Id of the task"}},"deobligateStake(address,uint256,uint256)":{"params":{"_amount":"Amount of internal token we are deobligating.","_domainId":"Domain in which we are deobligating the user.","_user":"Address of the account we are deobligating."}},"deprecateDomain(uint256,uint256,uint256,bool)":{"params":{"_childSkillIndex":"The index that the `_domainId` is relative to `_permissionDomainId`","_deprecated":"Whether or not the domain is deprecated","_domainId":"Id of the domain being deprecated","_permissionDomainId":"The domainId in which I have the permission to take this action"}},"deprecateExtension(bytes32,bool)":{"params":{"deprecated":"Whether to deprecate the extension or not","extensionId":"keccak256 hash of the extension name, used as an indentifier"}},"deprecateLocalSkill(uint256,bool)":{"params":{"deprecated":"Deprecation status to set for the skill","localSkillId":"Id for the local skill"}},"editColony(string)":{"params":{"_metadata":"IPFS hash of the metadata"}},"editColonyByDelta(string)":{"params":{"_metadataDelta":"IPFS hash of the metadata delta"}},"editDomain(uint256,uint256,uint256,string)":{"params":{"_childSkillIndex":"The index that the `_domainId` is relative to `_permissionDomainId`","_domainId":"Id of the domain being edited","_metadata":"Metadata relating to the domain. Expected to be the IPFS hash of a JSON blob, but not enforced by the contracts.","_permissionDomainId":"The domainId in which I have the permission to take this action"}},"emitDomainReputationPenalty(uint256,uint256,uint256,address,int256)":{"params":{"_amount":"The (negative) amount of reputation to lose","_childSkillIndex":"The index that the `_domainId` is relative to `_permissionDomainId`","_domainId":"The domain where the user will lose reputation","_permissionDomainId":"The domainId in which I hold the Arbitration role","_user":"The user who will lose reputation"}},"emitDomainReputationReward(uint256,address,int256)":{"params":{"_amount":"The (positive) amount of reputation to gain","_domainId":"The domain where the user will gain reputation","_user":"The user who will gain reputation"}},"emitSkillReputationPenalty(uint256,address,int256)":{"params":{"_amount":"The (negative) amount of reputation to lose","_skillId":"The skill where the user will lose reputation","_user":"The user who will lose reputation"}},"emitSkillReputationReward(uint256,address,int256)":{"params":{"_amount":"The (positive) amount of reputation to gain","_skillId":"The skill where the user will gain reputation","_user":"The user who will gain reputation"}},"executeMetaTransaction(address,bytes,bytes32,bytes32,uint8)":{"params":{"payload":"The transaction data that will be executed if signature valid","sigR":"The 'r' part of the signature","sigS":"The 's' part of the signature","sigV":"The 'v' part of the signature","userAddress":"The address of the user that signed the metatransaction"}},"executeTaskChange(uint8[],bytes32[],bytes32[],uint8[],uint256,bytes)":{"details":"The Colony functions which require approval and the task roles to review these are set in `IColony.initialiseColony` at colony creation. Upon successful execution the `taskChangeNonces` entry for the task is incremented.","params":{"_data":"The transaction data","_mode":"How the signature was generated - 0 for Geth-style (usual), 1 for Trezor-style (only Trezor does this)","_sigR":"r output of the ECDSA signature of the transaction","_sigS":"s output of the ECDSA signature of the transaction","_sigV":"recovery id","_value":"The transaction value, i.e. number of wei to be sent when the transaction is executed Currently we only accept 0 value transactions but this is kept as a future option"}},"executeTaskRoleAssignment(uint8[],bytes32[],bytes32[],uint8[],uint256,bytes)":{"params":{"_data":"The transaction data","_mode":"How the signature was generated - 0 for Geth-style (usual), 1 for Trezor-style (only Trezor does this)","_sigR":"r output of the ECDSA signature of the transaction","_sigS":"s output of the ECDSA signature of the transaction","_sigV":"recovery id","_value":"The transaction value, i.e. number of wei to be sent when the transaction is executed Currently we only accept 0 value transactions but this is kept as a future option"}},"finalizeExpenditure(uint256)":{"params":{"_id":"Expenditure identifier"}},"finalizePayment(uint256,uint256,uint256)":{"params":{"_childSkillIndex":"The index that the `_domainId` is relative to `_permissionDomainId`","_id":"Payment identifier","_permissionDomainId":"The domainId in which I have the permission to take this action"}},"finalizeRewardPayout(uint256)":{"params":{"_payoutId":"Id of the reward payout"}},"finalizeTask(uint256)":{"details":"Set the `task.finalized` property to true","params":{"_id":"Id of the task"}},"finishUpgrade()":{"details":"Can only be called by the colony itself, and only expected to be called as part of the `upgrade()` call. Required to be external so it can be an external call."},"generateSecret(bytes32,uint256)":{"params":{"_salt":"Salt value","_value":"Value to hide"},"returns":{"secret":"`keccak256` hash of joint _salt and _value"}},"getApproval(address,address,uint256)":{"params":{"_domainId":"Domain in which we are willing to be obligated.","_obligator":"Address of the account we are willing to let obligate us.","_user":"User allowing their tokens to be obligated."},"returns":{"approval":"The amount the user has approved"}},"getCapabilityRoles(bytes4)":{"params":{"_sig":"The function signature"},"returns":{"roles":"bytes32 representation of the authorized roles"}},"getColonyNetwork()":{"details":"The colonyNetworkAddress we read here is set once, during `initialiseColony`.","returns":{"colonyNetwork":"The address of Colony Network instance"}},"getDomain(uint256)":{"params":{"_id":"Id of the domain which details to get"},"returns":{"domain":"The domain"}},"getDomainCount()":{"returns":{"count":"The domain count. Min 1 as the root domain is created at the same time as the colony"}},"getDomainFromFundingPot(uint256)":{"params":{"_fundingPotId":"Id of the funding pot"},"returns":{"domainId":"Id of the corresponding domain"}},"getExpenditure(uint256)":{"params":{"_id":"Expenditure identifier"},"returns":{"expenditure":"The expenditure"}},"getExpenditureCount()":{"returns":{"count":"The expenditure count"}},"getExpenditureSlot(uint256,uint256)":{"params":{"_id":"Expenditure identifier","_slot":"Expenditure slot"},"returns":{"expenditureSlot":"The expenditure slot"}},"getExpenditureSlotPayout(uint256,uint256,address)":{"params":{"_id":"Expenditure identifier","_slot":"Expenditure slot","_token":"Token address"},"returns":{"amount":"Amount of the payout for that slot/token."}},"getFundingPot(uint256)":{"details":"For the reward funding pot (e.g. id: 0) this returns (0, 0, 0).","params":{"_id":"Id of the pot which details to get"},"returns":{"associatedType":"The FundingPotAssociatedType value of the current funding pot, e.g. Domain, Task, Payout","associatedTypeId":"Id of the associated type, e.g. if associatedType = FundingPotAssociatedType.Domain, this refers to the domainId","payoutsWeCannotMake":"Number of payouts that cannot be completed with the current funding"}},"getFundingPotBalance(uint256,address)":{"params":{"_potId":"Id of the funding pot","_token":"Address of the token, `0x0` value indicates Ether"},"returns":{"balance":"Funding pot supply balance"}},"getFundingPotCount()":{"returns":{"count":"The funding pots count"}},"getFundingPotPayout(uint256,address)":{"params":{"_potId":"Id of the funding pot","_token":"Address of the token, `0x0` value indicates Ether"},"returns":{"payout":"Funding pot payout amount"}},"getMetatransactionNonce(address)":{"params":{"userAddress":"The address of the user that will sign the metatransaction"}},"getNonRewardPotsTotal(address)":{"params":{"_token":"Address of the token, `0x0` value indicates Ether"},"returns":{"amount":"Total amount of tokens in funding pots other than the rewards pot (id 0)"}},"getObligation(address,address,uint256)":{"params":{"_domainId":"Domain in which we are obligated.","_obligator":"Address of the account who obligated us.","_user":"User whose tokens are obligated."},"returns":{"obligation":"The amount that is currently obligated"}},"getPayment(uint256)":{"params":{"_id":"Payment identifier"},"returns":{"payment":"The Payment data structure"}},"getPaymentCount()":{"returns":{"count":"The payment count"}},"getRewardInverse()":{"returns":{"rewardInverse":"The inverse of the reward"}},"getRewardPayoutInfo(uint256)":{"params":{"_payoutId":"Id of the reward payout"},"returns":{"rewardPayoutCycle":"RewardPayoutCycle, containing propertes:  `reputationState` Reputation root hash at the time of creation,  `colonyWideReputation` Colony wide reputation in `reputationState`,  `totalTokens` Total colony tokens at the time of creation,  `amount` Total amount of tokens taken aside for reward payout,  `tokenAddress` Token address,  `blockTimestamp` Block number at the time of creation."}},"getRootLocalSkill()":{"returns":{"rootLocalSkill":"The root local skill id"}},"getTask(uint256)":{"params":{"_id":"Id of the task"},"returns":{"completionTimestamp":"Task completion timestamp","deliverableHash":"Task deliverable hash","domainId":"Task domain id, default is root colony domain with id 1","dueDate":"Due date","fundingPotId":"Id of funding pot for task","skillIds":"Array of global skill ids assigned to task","specificationHash":"Task brief hash","status":"TaskStatus property. 0 - Active. 1 - Cancelled. 2 - Finalized"}},"getTaskChangeNonce(uint256)":{"params":{"_id":"Id of the task"},"returns":{"nonce":"The current task change nonce value"}},"getTaskCount()":{"returns":{"count":"The task count"}},"getTaskPayout(uint256,uint8,address)":{"params":{"_id":"Id of the task","_role":"Id of the role, as defined in TaskRole enum","_token":"Address of the token, `0x0` value indicates Ether"},"returns":{"amount":"Payout amount"}},"getTaskRole(uint256,uint8)":{"params":{"_id":"Id of the task","_role":"Id of the role, as defined in TaskRole enum"},"returns":{"role":"The Role"}},"getTaskWorkRatingSecret(uint256,uint8)":{"params":{"_id":"Id of the task","_role":"Id of the role, as defined in TaskRole enum"},"returns":{"secret":"Rating secret `bytes32` value"}},"getTaskWorkRatingSecretsInfo(uint256)":{"params":{"_id":"Id of the task"},"returns":{"lastSubmittedAt":"Timestamp of the last submitted rating secret","nSecrets":"Number of secrets"}},"getToken()":{"returns":{"tokenAddress":"Address of the token contract"}},"getTokenApproval(address,address)":{"params":{"spender":"The account we have approved","token":"The address of the token which was approved"},"returns":{"amount":"The token approval amount"}},"getTotalTokenApproval(address)":{"params":{"token":"The address of the token which was approved"},"returns":{"amount":"The total token approval amount"}},"getUserRoles(address,uint256)":{"params":{"_domain":"The domain we want to get roles in","_user":"The user whose roles we want to get"},"returns":{"roles":"bytes32 representation of the held roles"}},"hasInheritedUserRole(address,uint256,uint8,uint256,uint256)":{"params":{"_childDomainId":"The domain where we want to use the role","_childSkillIndex":"The index that the `_childDomainId` is relative to `_domainId`","_domainId":"Domain in which the caller has the role","_role":"The role we want to check for","_user":"The user whose role we want to check"},"returns":{"hasRole":"Boolean indicating whether the given user has the given role in domain"}},"hasUserRole(address,uint256,uint8)":{"params":{"_domainId":"The domain where we want to check for the role","_role":"The role we want to check for","_user":"The user whose role we want to check"},"returns":{"hasRole":"Boolean indicating whether the given user has the given role in domain"}},"initialiseColony(address,address)":{"details":"Sets the reward inverse to the uint max 2**256 - 1.","params":{"_colonyNetworkAddress":"Address of the colony network","_token":"Address of the colony ERC20 Token"}},"installExtension(bytes32,uint256)":{"params":{"extensionId":"keccak256 hash of the extension name, used as an indentifier","version":"The new extension version to install"}},"isInRecoveryMode()":{"returns":{"inRecoveryMode":"Return true if recovery mode is active, false otherwise"}},"lockExpenditure(uint256)":{"params":{"_id":"Expenditure identifier"}},"lockToken()":{"returns":{"timesLocked":"The amount of times the token was locked"}},"makeArbitraryTransaction(address,bytes)":{"params":{"_action":"Bytes array encoding the function call and arguments","_to":"Contract to receive the function call (cannot be this contract, network or token locking)"},"returns":{"success":"Boolean indicating whether the transaction succeeded"}},"makeArbitraryTransactions(address[],bytes[],bool)":{"params":{"_actions":"Array of Bytes arrays encoding the function calls and arguments","_strict":"Boolean indicating whether if one transaction fails, the whole call to this function should fail.","_targets":"Array of addressed to be targeted"},"returns":{"success":"Boolean indicating whether the transactions succeeded"}},"makeExpenditure(uint256,uint256,uint256)":{"params":{"_childSkillIndex":"The index that the `_domainId` is relative to `_permissionDomainId`, (only used if `_permissionDomainId` is different to `_domainId`)","_domainId":"The domain where the expenditure belongs","_permissionDomainId":"The domainId in which I have the permission to take this action"},"returns":{"expenditureId":"Identifier of the newly created expenditure"}},"makeSingleArbitraryTransaction(address,bytes)":{"details":"Only callable by the colony itself. If you wish to use this functionality, you should use the makeAbitraryTransactions function","params":{"_action":"Bytes array encoding the function call and arguments","_target":"Contract to receive the function call"},"returns":{"success":"Boolean indicating whether the transactions succeeded"}},"makeTask(uint256,uint256,bytes32,uint256,uint256,uint256)":{"params":{"_childSkillIndex":"The index that the `_domainId` is relative to `_permissionDomainId`","_domainId":"The domain where the task belongs","_dueDate":"The due date of the task, can set to `0` for no-op","_permissionDomainId":"The domainId in which I have the permission to take this action","_skillId":"The skill associated with the task, can set to `0` for no-op","_specificationHash":"Database identifier where the task specification is stored"}},"mintTokens(uint256)":{"params":{"_wad":"Amount to mint"}},"mintTokensFor(address,uint256)":{"params":{"_guy":"Recipient of new tokens","_wad":"Amount to mint"}},"moveFundsBetweenPots(uint256,uint256,uint256,uint256,uint256,uint256,address)":{"params":{"_amount":"Amount of funds","_fromChildSkillIndex":"The child index in `_permissionDomainId` where we can find the domain for `_fromPotId`","_fromPot":"Funding pot id providing the funds","_permissionDomainId":"The domainId in which I have the permission to take this action","_toChildSkillIndex":"The child index in `_permissionDomainId` where we can find the domain for `_toPotId`","_toPot":"Funding pot id receiving the funds","_token":"Address of the token, `0x0` value indicates Ether"}},"moveFundsBetweenPots(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address)":{"params":{"_amount":"Amount of funds","_childSkillIndex":"The child index in _permissionDomainId where I will be taking this action","_domainId":"The domain where I am taking this action, pointed to by _permissionDomainId and _childSkillIndex","_fromChildSkillIndex":"In the array of child skills for the skill associated with the domain pointed to by _permissionDomainId + _childSkillIndex,         the index of the skill associated with the domain that contains _fromPot","_fromPot":"Funding pot id providing the funds","_permissionDomainId":"The domainId in which I have the permission to take this action","_toChildSkillIndex":"The same, but for the _toPot which the funds are being moved to","_toPot":"Funding pot id receiving the funds","_token":"Address of the token, `0x0` value indicates Ether"}},"multicall(bytes[])":{"details":"The `msg.value` should not be trusted for any method callable from multicall.","params":{"data":"The encoded function data for each of the calls to make to this contract"},"returns":{"results":"The results from each of the calls passed in via data"}},"numRecoveryRoles()":{"returns":{"numRoles":"Number of users with the recovery role."}},"obligateStake(address,uint256,uint256)":{"params":{"_amount":"Amount of internal token we are obligating.","_domainId":"Domain in which we are obligating the user.","_user":"Address of the account we are obligating."}},"owner()":{"details":"Used for testing.","returns":{"colonyOwner":"Address of the colony owner"}},"registerColonyLabel(string,string)":{"params":{"colonyName":"The label to register.","orbitdb":"The path of the orbitDB database associated with the colony name"}},"removeRecoveryRole(address)":{"params":{"_user":"User we want to remove recovery role from"}},"removeTaskEvaluatorRole(uint256)":{"params":{"_id":"Id of the task"}},"removeTaskWorkerRole(uint256)":{"params":{"_id":"Id of the task"}},"revealTaskWorkRating(uint256,uint8,uint8,bytes32)":{"details":"Compares the `keccak256(_salt, _rating)` output with the previously submitted rating secret and if they match, sets the task role properties `rated` to `true` and `rating` to `_rating`.","params":{"_id":"Id of the task","_rating":"0-50 rating score (in increments of 10, .e.g 0, 10, 20, 30, 40 or 50)","_role":"Id of the role, as defined in TaskRole enum","_salt":"Salt value used to generate the rating secret"}},"setAdministrationRole(uint256,uint256,address,uint256,bool)":{"params":{"_childSkillIndex":"The index that the `_domainId` is relative to `_permissionDomainId`","_domainId":"Domain in which we are giving user the role","_permissionDomainId":"Domain in which the caller has root/architecture role","_setTo":"The state of the role permission (true assign the permission, false revokes it)","_user":"User we want to give an admin role to"}},"setAllTaskPayouts(uint256,address,uint256,uint256,uint256)":{"details":"Can only call if evaluator and worker are unassigned or manager, otherwise need signature.","params":{"_evaluatorAmount":"Payout amount for evaluator","_id":"Id of the task","_managerAmount":"Payout amount for manager","_token":"Address of the token, `0x0` value indicates Ether","_workerAmount":"Payout amount for worker"}},"setArbitrationRole(uint256,uint256,address,uint256,bool)":{"params":{"_childSkillIndex":"The index that the `_domainId` is relative to `_permissionDomainId`","_domainId":"Domain in which we are giving user the role","_permissionDomainId":"Domain in which the caller has root role","_setTo":"The state of the role permission (true assign the permission, false revokes it)","_user":"User we want to give an arbitration role to"}},"setArchitectureRole(uint256,uint256,address,uint256,bool)":{"params":{"_childSkillIndex":"The index that the `_domainId` is relative to `_permissionDomainId`","_domainId":"Domain in which we are giving user the role","_permissionDomainId":"Domain in which the caller has root/architecture role","_setTo":"The state of the role permission (true assign the permission, false revokes it)","_user":"User we want to give an architecture role to"}},"setDefaultGlobalClaimDelay(uint256)":{"params":{"_globalClaimDelay":"The new default global claim delay"}},"setExpenditureClaimDelay(uint256,uint256,uint256)":{"params":{"_claimDelay":"Duration of time (in seconds) to delay","_id":"Expenditure identifier","_slot":"Number of the slot"}},"setExpenditureClaimDelays(uint256,uint256[],uint256[])":{"params":{"_claimDelays":"Durations of time (in seconds) to delay","_id":"Expenditure identifier","_slots":"Array of slots to set claim delays"}},"setExpenditureMetadata(uint256,string)":{"details":"Can only be called while expenditure is in draft state.","params":{"_id":"Id of the expenditure","_metadata":"IPFS hash of the metadata"}},"setExpenditureMetadata(uint256,uint256,uint256,string)":{"params":{"_childSkillIndex":"The index that the `_domainId` is relative to `_permissionDomainId`,","_id":"Id of the expenditure","_metadata":"IPFS hash of the metadata","_permissionDomainId":"The domainId in which I have the permission to take this action"}},"setExpenditurePayout(uint256,uint256,address,uint256)":{"details":"Can only be called while expenditure is in draft state.","params":{"_amount":"Payout amount","_id":"Id of the expenditure","_slot":"Number of the slot","_token":"Address of the token, `0x0` value indicates Ether"}},"setExpenditurePayout(uint256,uint256,uint256,uint256,address,uint256)":{"params":{"_amount":"Payout amount","_childSkillIndex":"The index that the `_domainId` is relative to `_permissionDomainId`","_id":"Id of the expenditure","_permissionDomainId":"The domainId in which I have the permission to take this action","_slot":"The slot to set the payout","_token":"Address of the token, `0x0` value indicates Ether"}},"setExpenditurePayoutModifiers(uint256,uint256[],int256[])":{"params":{"_id":"Expenditure identifier","_payoutModifiers":"Values (between +/- WAD) to modify the payout & reputation bonus","_slots":"Array of slots to set payout modifiers"}},"setExpenditurePayouts(uint256,uint256[],address,uint256[])":{"details":"Can only be called while expenditure is in draft state.","params":{"_amounts":"Payout amounts","_id":"Id of the expenditure","_slots":"Array of slots to set payouts","_token":"Address of the token, `0x0` value indicates Ether"}},"setExpenditureRecipient(uint256,uint256,address)":{"details":"Can only be called while expenditure is in draft state.","params":{"_id":"Id of the expenditure","_recipient":"Address of the recipient","_slot":"Slot for the recipient address"}},"setExpenditureRecipients(uint256,uint256[],address[])":{"details":"Can only be called while expenditure is in draft state.","params":{"_id":"Id of the expenditure","_recipients":"Addresses of the recipients","_slots":"Array of slots to set recipients"}},"setExpenditureSkill(uint256,uint256,uint256)":{"params":{"_id":"Expenditure identifier","_skillId":"Id of the new skill to set","_slot":"Number of the slot"}},"setExpenditureSkills(uint256,uint256[],uint256[])":{"params":{"_id":"Expenditure identifier","_skillIds":"Ids of the new skills to set","_slots":"Array of slots to set skills"}},"setExpenditureState(uint256,uint256,uint256,uint256,bool[],bytes32[],bytes32)":{"params":{"_childSkillIndex":"The index that the `_domainId` is relative to `_permissionDomainId`, (only used if `_permissionDomainId` is different to `_domainId`)","_id":"Expenditure identifier","_keys":"Array of additional keys (for mappings & arrays)","_mask":"Array of booleans indicated whether a key is a mapping (F) or an array index (T).","_permissionDomainId":"The domainId in which I have the permission to take this action","_storageSlot":"Number of the top-level storage slot (25, 26, or 27)","_value":"Value to set at location"}},"setExpenditureValues(uint256,uint256[],address[],uint256[],uint256[],uint256[],uint256[],uint256[],int256[],address[],uint256[][],uint256[][])":{"params":{"_claimDelaySlots":"Array of slots to set claim delays","_claimDelays":"Durations of time (in seconds) to delay","_id":"Expenditure identifier","_payoutModifierSlots":"Array of slots to set payout modifiers","_payoutModifiers":"Values (between +/- WAD) to modify the payout & reputation bonus","_payoutSlots":"2-dimensional array of slots to set payouts","_payoutTokens":"Addresses of the tokens, `0x0` value indicates Ether","_payoutValues":"2-dimensional array of the payout amounts","_recipientSlots":"Array of slots to set recipients","_recipients":"Addresses of the recipients","_skillIdSlots":"Array of slots to set skills","_skillIds":"Ids of the new skills to set"}},"setFundingRole(uint256,uint256,address,uint256,bool)":{"params":{"_childSkillIndex":"The index that the `_domainId` is relative to `_permissionDomainId`","_domainId":"Domain in which we are giving user the role","_permissionDomainId":"Domain in which the caller has root/architecture role","_setTo":"The state of the role permission (true assign the permission, false revokes it)","_user":"User we want to give an funding role to"}},"setPaymentPayout(uint256,uint256,uint256,address,uint256)":{"params":{"_amount":"Payout amount","_childSkillIndex":"The index that the `_domainId` is relative to `_permissionDomainId`","_id":"Payment identifier","_permissionDomainId":"The domainId in which I have the permission to take this action","_token":"Address of the token, `0x0` value indicates Ether"}},"setPaymentRecipient(uint256,uint256,uint256,address)":{"params":{"_childSkillIndex":"The index that the `_domainId` is relative to `_permissionDomainId`","_id":"Payment identifier","_permissionDomainId":"The domainId in which I have the permission to take this action","_recipient":"Address of the payment recipient"}},"setPaymentSkill(uint256,uint256,uint256,uint256)":{"params":{"_childSkillIndex":"The index that the `_domainId` is relative to `_permissionDomainId`","_id":"Payment identifier","_permissionDomainId":"The domainId in which I have the permission to take this action","_skillId":"Id of the new skill to set"}},"setRecoveryRole(address)":{"params":{"_user":"User we want to give a recovery role to"}},"setRewardInverse(uint256)":{"params":{"_rewardInverse":"The inverse of the reward"}},"setRootRole(address,bool)":{"params":{"_setTo":"The state of the role permission (true assign the permission, false revokes it)","_user":"User we want to give an root role to"}},"setStorageSlotRecovery(uint256,bytes32)":{"details":"certain critical variables are protected from editing in this function","params":{"_slot":"Uint address of storage slot to be updated","_value":"word of data to be set"}},"setTaskBrief(uint256,bytes32)":{"params":{"_id":"Id of the task","_specificationHash":"Unique hash of the task brief in ddb"}},"setTaskDueDate(uint256,uint256)":{"params":{"_dueDate":"Due date as seconds since unix epoch","_id":"Id of the task"}},"setTaskEvaluatorPayout(uint256,address,uint256)":{"params":{"_amount":"Payout amount","_id":"Id of the task","_token":"Address of the token, `0x0` value indicates Ether"}},"setTaskEvaluatorRole(uint256,address)":{"details":"This function can only be called through `executeTaskRoleAssignment`.","params":{"_id":"Id of the task","_user":"Address of the user we want to give a evaluator role to"}},"setTaskManagerPayout(uint256,address,uint256)":{"params":{"_amount":"Payout amount","_id":"Id of the task","_token":"Address of the token, `0x0` value indicates Ether"}},"setTaskManagerRole(uint256,address,uint256,uint256)":{"details":"This function can only be called through `executeTaskRoleAssignment`.","params":{"_childSkillIndex":"The index that the `_domainId` is relative to `_permissionDomainId`","_id":"Id of the task","_permissionDomainId":"The domain ID in which _user has the Administration permission","_user":"Address of the user we want to give a manager role to"}},"setTaskSkill(uint256,uint256)":{"details":"Currently we only allow one skill per task although we have provisioned for an array of skills in `Task` struct. Allowed before a task is finalized.","params":{"_id":"Id of the task","_skillId":"Id of the skill which has to be a global skill"}},"setTaskWorkerPayout(uint256,address,uint256)":{"params":{"_amount":"Payout amount","_id":"Id of the task","_token":"Address of the token, `0x0` value indicates Ether"}},"setTaskWorkerRole(uint256,address)":{"details":"This function can only be called through `executeTaskRoleAssignment`.","params":{"_id":"Id of the task","_user":"Address of the user we want to give a worker role to"}},"setUserRoles(uint256,uint256,address,uint256,bytes32)":{"params":{"_childSkillIndex":"The index that the `_domainId` is relative to `_permissionDomainId`","_domainId":"Domain in which we are giving user the role","_permissionDomainId":"Domain in which the caller has root/architecture role","_roles":"Byte array representing the desired role setting (1 for on, 0 for off)","_user":"User we want to give a role to"}},"startNextRewardPayout(address,bytes,bytes,uint256,bytes32[])":{"params":{"_token":"Address of the token used for reward payout","branchMask":"The branchmask of the proof","key":"Some Reputation hash tree key","siblings":"The siblings of the proof","value":"Reputation value"}},"submitTaskDeliverable(uint256,bytes32)":{"details":"Set the `task.deliverableHash` and `task.completionTimestamp` properties.","params":{"_deliverableHash":"Unique hash of the task deliverable content in ddb","_id":"Id of the task"}},"submitTaskDeliverableAndRating(uint256,bytes32,bytes32)":{"details":"Internally call `submitTaskDeliverable` and `submitTaskWorkRating` in sequence.","params":{"_deliverableHash":"Unique hash of the task deliverable content in ddb","_id":"Id of the task","_ratingSecret":"Rating secret for manager"}},"submitTaskWorkRating(uint256,uint8,bytes32)":{"params":{"_id":"Id of the task","_ratingSecret":"`keccak256` hash of a salt and 0-50 rating score (in increments of 10, .e.g 0, 10, 20, 30, 40 or 50). Can be generated via `IColony.generateSecret` helper function.","_role":"Id of the role, as defined in TaskRole enum"}},"transferExpenditure(uint256,address)":{"params":{"_id":"Expenditure identifier","_newOwner":"New owner of expenditure"}},"transferExpenditureViaArbitration(uint256,uint256,uint256,address)":{"details":"This is now deprecated and will be removed in a future version","params":{"_childSkillIndex":"The index that the `_domainId` is relative to `_permissionDomainId`, (only used if `_permissionDomainId` is different to `_domainId`)","_id":"Expenditure identifier","_newOwner":"New owner of expenditure","_permissionDomainId":"The domainId in which I have the permission to take this action"}},"transferStake(uint256,uint256,address,address,uint256,uint256,address)":{"params":{"_amount":"Amount of internal token we are transferring.","_childSkillIndex":"The child index in `_permissionDomainId` where we can find `_domainId`.","_domainId":"Domain in which we are transferring the tokens.","_obligator":"Address of the account who set the obligation.","_permissionDomainId":"The domainId in which I have the permission to take this action.","_recipient":"Recipient of the transferred tokens.","_user":"Address of the account we are transferring."}},"uninstallExtension(bytes32)":{"details":"This is a permanent action -- re-installing the extension will deploy a new contractIt is recommended to deprecate an extension before uninstalling to allow active objects to be resolved","params":{"extensionId":"keccak256 hash of the extension name, used as an indentifier"}},"unlockTokenForUser(address,uint256)":{"params":{"lockId":"The specific lock to unlock","user":"The user to unlock"}},"updateApprovalAmount(address,address)":{"params":{"spender":"The account we have approved","token":"The address of the token which was approved"}},"updateColonyOrbitDB(string)":{"params":{"orbitdb":"The path of the orbitDB database to be associated with the colony"}},"upgrade(uint256)":{"details":"Downgrades are not allowed, i.e. `_newVersion` should be higher than the currect colony version.","params":{"_newVersion":"The target version for the upgrade"}},"upgradeExtension(bytes32,uint256)":{"params":{"extensionId":"keccak256 hash of the extension name, used as an indentifier","newVersion":"The version to upgrade to (must be one larger than the current version)"}},"userCanSetRoles(address,uint256,uint256,uint256)":{"params":{"_childDomainId":"The domain where we want to edit roles","_childSkillIndex":"The index that the `_childDomainId` is relative to `_domainId`","_domainId":"Domain in which the caller has the role (currently Root or Architecture)","_user":"The user whose permissions we want to check"},"returns":{"canSet":"Boolean indicating whether the given user is allowed to edit roles in the target domain."}},"verifyReputationProof(bytes,bytes,uint256,bytes32[])":{"details":"For more detail about branchMask and siblings, examine the PatriciaTree implementation. While external, likely only to be used by the Colony contracts, as it checks that the user is proving their own reputation in the current colony. The `verifyProof` function can be used to verify any proof, though this function is not currently exposed on the Colony's EtherRouter.","params":{"branchMask":"The branchmask of the proof","key":"The key of the element the proof is for.","siblings":"The siblings of the proof","value":"The value of the element that the proof is for."},"returns":{"isValid":"True if the proof is valid, false otherwise."}},"version()":{"returns":{"colonyVersion":"Version number"}}},"version":1},"userdoc":{"events":{"Annotation(address,bytes32,string)":{"notice":"Emit a metadata string for a transaction"},"ArbitraryReputationUpdate(address,address,uint256,int256)":{"notice":"Event logged when a manual reputation reward/penalty is made"},"ColonyBootstrapped(address,address[],int256[])":{"notice":"Event logged when Colony is initially bootstrapped"},"ColonyFundsClaimed(address,address,uint256,uint256)":{"notice":"Event logged when colony funds are moved to the top-level domain pot"},"ColonyFundsMovedBetweenFundingPots(address,uint256,uint256,uint256,address)":{"notice":"Event logged when colony funds, either tokens or ether, has been moved between funding pots"},"ColonyInitialised(address,address,address)":{"notice":"Event logged when Colony is initialised"},"ColonyMetadata(address,string)":{"notice":"Event logged when Colony metadata is updated"},"ColonyMetadataDelta(address,string)":{"notice":"Event logged when Colony metadata is updated via a delta"},"ColonyRewardInverseSet(address,uint256)":{"notice":"Event logged when the colony reward inverse is set"},"ColonyRoleSet(address,address,uint256,uint8,bool)":{"notice":"Event logged when a user/domain/role is granted or revoked"},"ColonyUpgraded(address,uint256,uint256)":{"notice":"Event logged when colony is upgraded"},"DomainAdded(address,uint256)":{"notice":"Event logged when a new Domain is added"},"DomainDeprecated(address,uint256,bool)":{"notice":"Event logged when domain metadata is updated"},"DomainMetadata(address,uint256,string)":{"notice":"Event logged when domain metadata is updated"},"ExpenditureAdded(address,uint256)":{"notice":"Event logged when a new expenditure is added"},"ExpenditureCancelled(address,uint256)":{"notice":"Event logged when an expenditure has been cancelled"},"ExpenditureClaimDelaySet(address,uint256,uint256,uint256)":{"notice":"Event logged when an expenditure slot claim delay changes"},"ExpenditureFinalized(address,uint256)":{"notice":"Event logged when an expenditure has been finalized"},"ExpenditureGlobalClaimDelaySet(address,uint256)":{"notice":"Event logged when the default global claim delay is updated"},"ExpenditureLocked(address,uint256)":{"notice":"Event logged when an expenditure has been locked"},"ExpenditureMetadataSet(address,uint256,string)":{"notice":"Event logged when expenditure metadata is set"},"ExpenditurePayoutModifierSet(address,uint256,uint256,int256)":{"notice":"Event logged when an expenditure slot payout modifier changes"},"ExpenditurePayoutSet(address,uint256,uint256,address,uint256)":{"notice":"Event logged when an expenditure payout changes"},"ExpenditureRecipientSet(address,uint256,uint256,address)":{"notice":"Event logged when an expenditure's recipient is set"},"ExpenditureSkillSet(address,uint256,uint256,uint256)":{"notice":"Event logged when an expenditure's skill changes"},"ExpenditureStateChanged(address,uint256,uint256,bool[],bytes32[],bytes32)":{"notice":"Event logged when an expenditure slot payout modifier changes"},"ExpenditureTransferred(address,uint256,address)":{"notice":"Event logged when a new expenditure is transferred"},"FundingPotAdded(uint256)":{"notice":"Event logged when a new FundingPot is added"},"LocalSkillAdded(address,uint256)":{"notice":"Event logged when a new local skill is added"},"LocalSkillDeprecated(address,uint256,bool)":{"notice":"Event logged when a new local skill is added"},"PaymentAdded(address,uint256)":{"notice":"Event logged when a new payment is added"},"PaymentFinalized(address,uint256)":{"notice":"Event logged when a payment is finalised"},"PaymentPayoutSet(address,uint256,address,uint256)":{"notice":"Event logged when a payment has its payout set"},"PaymentRecipientSet(address,uint256,address)":{"notice":"Event logged when a payment has its recipient set"},"PaymentSkillSet(address,uint256,uint256)":{"notice":"Event logged when a payment has its skill set"},"PayoutClaimed(address,uint256,address,uint256)":{"notice":"Event logged when a payout is claimed, either from a Task or Payment"},"RecoveryModeEntered(address)":{"notice":"Event logged when recovery mode is triggered."},"RecoveryModeExitApproved(address)":{"notice":"Event logged when someone with recovery mode signals they are happy with the state and wish to leave recovery mode"},"RecoveryModeExited(address)":{"notice":"Event logged when recovery mode is left"},"RecoveryRoleSet(address,bool)":{"notice":"Event logged when user gets/loses the recovery role."},"RecoveryStorageSlotSet(address,uint256,bytes32,bytes32)":{"notice":"Event logged when in recovery mode a storage slot is set"},"RewardPayoutClaimed(uint256,address,uint256,uint256)":{"notice":"Event logged when reward payout is claimed"},"RewardPayoutCycleEnded(address,uint256)":{"notice":"Event logged when the reward payout cycle has ended"},"RewardPayoutCycleStarted(address,uint256)":{"notice":"Event logged when a new reward payout cycle has started"},"TaskAdded(address,uint256)":{"notice":"Event logged when a new task is added"},"TaskBriefSet(uint256,bytes32)":{"notice":"Event logged when a task's specification hash changes"},"TaskCanceled(uint256)":{"notice":"Event logged when a task has been canceled"},"TaskChangedViaSignatures(address[])":{"notice":"Event logged when task data is changed via signed messages by those involved"},"TaskCompleted(address,uint256)":{"notice":"Event logged when a task has been completed. This is either because the dueDate has passed and the manager closed the task, or the worker has submitted the deliverable. In the latter case, TaskDeliverableSubmitted will also be emitted."},"TaskDeliverableSubmitted(address,uint256,bytes32)":{"notice":"Event logged when a deliverable has been submitted for a task"},"TaskDueDateSet(uint256,uint256)":{"notice":"Event logged when a task's due date changes"},"TaskFinalized(address,uint256)":{"notice":"Event logged when a task has been finalized"},"TaskPayoutSet(uint256,uint8,address,uint256)":{"notice":"Event logged when a task payout changes"},"TaskRoleUserSet(uint256,uint8,address)":{"notice":"Event logged when a task's role user changes"},"TaskSkillSet(uint256,uint256)":{"notice":"Event logged when a task's skill changes"},"TaskWorkRatingRevealed(address,uint256,uint8,uint8)":{"notice":"Event logged when the rating of a role was revealed"},"TokenUnlocked(address)":{"notice":"Event emitted when the colony unlocks its native token through the provided function"},"TokensBurned(address,address,uint256)":{"notice":"Event logged when the colony burns tokens"},"TokensMinted(address,address,uint256)":{"notice":"Event logged when tokens are minted"}},"kind":"user","methods":{"addDomain(uint256,uint256,uint256)":{"notice":"Add a colony domain, and its respective local skill under skill with id `_parentSkillId`. New funding pot is created and associated with the domain here."},"addDomain(uint256,uint256,uint256,string)":{"notice":"Add a colony domain, and its respective local skill under skill with id `_parentSkillId`. New funding pot is created and associated with the domain here."},"addLocalSkill()":{"notice":"Add a new local skill for the colony. Secured function to authorised members."},"addPayment(uint256,uint256,address,address,uint256,uint256,uint256)":{"notice":"Add a new payment in the colony. Secured function to authorised members."},"annotateTransaction(bytes32,string)":{"notice":"Emit a metadata string for a transaction"},"approveExitRecovery()":{"notice":"Indicate approval to exit recovery mode. Can only be called by user with recovery role."},"approveStake(address,uint256,uint256)":{"notice":"Allow the _approvee to obligate some amount of tokens as a stake."},"authority()":{"notice":"Get the `ColonyAuthority` for the colony."},"bootstrapColony(address[],int256[])":{"notice":"Allows the colony to bootstrap itself by having initial reputation and token `_amount` assigned to `_users`. This reputation is assigned in the colony-wide domain. Secured function to authorised members."},"burnTokens(address,uint256)":{"notice":"Burn tokens held by the colony. Can only burn tokens held in the root funding pot."},"cancelExpenditure(uint256)":{"notice":"Cancels the expenditure and prevents further editing. Can only be called by expenditure owner."},"cancelTask(uint256)":{"notice":"Cancel a task at any point before it is finalized. Secured function to authorised members. Any funds assigned to its funding pot can be moved back to the domain via `IColony.moveFundsBetweenPots`."},"checkNotAdditionalProtectedVariable(uint256)":{"notice":"Check whether the supplied slot is a protected variable specific to this contract"},"claimColonyFunds(address)":{"notice":"Move any funds received by the colony in `_token` denomination to the top-level domain pot, siphoning off a small amount to the reward pot. If called against a colony's own token, no fee is taken."},"claimExpenditurePayout(uint256,uint256,address)":{"notice":"Claim the payout for an expenditure slot. Here the network receives a fee from each payout."},"claimPayment(uint256,address)":{"notice":"Claim the payout in `_token` denomination for payment `_id`. Here the network receives its fee from each payout. Same as for tasks, ether fees go straight to the Meta Colony whereas Token fees go to the Network to be auctioned off."},"claimRewardPayout(uint256,uint256[7],bytes,bytes,uint256,bytes32[])":{"notice":"Claim the reward payout at `_payoutId`. User needs to provide their reputation and colony-wide reputation which will be proven via Merkle proof inside this function. Can only be called if payout is active, i.e if 60 days have not passed from its creation. Can only be called if next in queue."},"claimTaskPayout(uint256,uint8,address)":{"notice":"Claim the payout in `_token` denomination for work completed in task `_id` by contributor with role `_role`. Allowed only after task is finalized. Here the network receives its fee from each payout. Ether fees go straight to the Meta Colony whereas Token fees go to the Network to be auctioned off."},"completeTask(uint256)":{"notice":"Mark a task as complete after the due date has passed. This allows the task to be rated and finalized (and funds recovered) even in the presence of a worker who has disappeared. Note that if the due date was not set, then this function will throw."},"deobligateStake(address,uint256,uint256)":{"notice":"Deobligate the user some amount of tokens, releasing the stake."},"deprecateDomain(uint256,uint256,uint256,bool)":{"notice":"Deprecate a domain, preventing certain actions from happening there"},"deprecateExtension(bytes32,bool)":{"notice":"Set the deprecation of an extension in a colony. Secured function to authorised members."},"deprecateLocalSkill(uint256,bool)":{"notice":"Deprecate a local skill for the colony. Secured function to authorised members."},"editColony(string)":{"notice":"Called to change the metadata associated with a colony. Expected to be a IPFS hash of a JSON blob, but not enforced to any degree by the contracts"},"editColonyByDelta(string)":{"notice":"Called to change the metadata associated with a colony. Expected to be a IPFS hash of a delta to a JSON blob, but not enforced to any degree by the contracts"},"editDomain(uint256,uint256,uint256,string)":{"notice":"Add a colony domain, and its respective local skill under skill with id `_parentSkillId`. New funding pot is created and associated with the domain here."},"emitDomainReputationPenalty(uint256,uint256,uint256,address,int256)":{"notice":"Emit a negative domain reputation update. Available only to Arbitration role holders"},"emitDomainReputationReward(uint256,address,int256)":{"notice":"Emit a positive domain reputation update. Available only to Root role holders"},"emitSkillReputationPenalty(uint256,address,int256)":{"notice":"Emit a negative skill reputation update. Available only to Arbitration role holders in the root domain"},"emitSkillReputationReward(uint256,address,int256)":{"notice":"Emit a positive skill reputation update. Available only to Root role holders"},"enterRecoveryMode()":{"notice":"Put colony network mining into recovery mode. Can only be called by user with recovery role."},"executeMetaTransaction(address,bytes,bytes32,bytes32,uint8)":{"notice":"Executes a metatransaction targeting this contract"},"executeTaskChange(uint8[],bytes32[],bytes32[],uint8[],uint256,bytes)":{"notice":"Executes a task update transaction `_data` which is approved and signed by two of its roles (e.g. manager and worker) using the detached signatures for these users."},"executeTaskRoleAssignment(uint8[],bytes32[],bytes32[],uint8[],uint256,bytes)":{"notice":"Executes a task role update transaction `_data` which is approved and signed by two of addresses. depending of which function we are calling. Allowed functions are `setTaskManagerRole`, `setTaskEvaluatorRole` and `setTaskWorkerRole`. Upon successful execution the `taskChangeNonces` entry for the task is incremented."},"exitRecoveryMode()":{"notice":"Exit recovery mode, can be called by anyone if enough whitelist approvals are given."},"finalizeExpenditure(uint256)":{"notice":"Finalizes the expenditure and allows for funds to be claimed. Can only be called by expenditure owner."},"finalizePayment(uint256,uint256,uint256)":{"notice":"Finalizes the payment and logs the reputation log updates. Allowed to be called once after payment is fully funded. Secured function to authorised members."},"finalizeRewardPayout(uint256)":{"notice":"Finalises the reward payout. Allows creation of next reward payouts for token that has been used in `_payoutId`. Can only be called when reward payout cycle is finished i.e when 60 days have passed from its creation."},"finalizeTask(uint256)":{"notice":"Called after task work rating is complete which closes the task and logs the respective reputation log updates. Allowed to be called once per task. Secured function to authorised members."},"finishUpgrade()":{"notice":"A function to be called after an upgrade has been done from v2 to v3."},"generateSecret(bytes32,uint256)":{"notice":"Helper function used to generage consistently the rating secret using salt value `_salt` and value to hide `_value`"},"getApproval(address,address,uint256)":{"notice":"View an approval to obligate tokens."},"getCapabilityRoles(bytes4)":{"notice":"Gets the bytes32 representation of the roles authorized to call a function"},"getColonyNetwork()":{"notice":"Returns the colony network address set on the Colony."},"getDomain(uint256)":{"notice":"Get a domain by id."},"getDomainCount()":{"notice":"Get the number of domains in the colony."},"getDomainFromFundingPot(uint256)":{"notice":"Get the domain corresponding to a funding pot"},"getExpenditure(uint256)":{"notice":"Returns an existing expenditure."},"getExpenditureCount()":{"notice":"Get the number of expenditures in the colony."},"getExpenditureSlot(uint256,uint256)":{"notice":"Returns an existing expenditure slot."},"getExpenditureSlotPayout(uint256,uint256,address)":{"notice":"Returns an existing expenditure slot's payout for a token."},"getFundingPot(uint256)":{"notice":"Get the non-mapping properties of a pot by id."},"getFundingPotBalance(uint256,address)":{"notice":"Get the `_token` balance of pot with id `_potId`."},"getFundingPotCount()":{"notice":"Get the number of funding pots in the colony."},"getFundingPotPayout(uint256,address)":{"notice":"Get the assigned `_token` payouts of pot with id `_potId`."},"getMetatransactionNonce(address)":{"notice":"Gets the next metatransaction nonce for user that should be used targeting this contract"},"getNonRewardPotsTotal(address)":{"notice":"Get the total amount of tokens `_token` minus amount reserved to be paid to the reputation and token holders as rewards."},"getObligation(address,address,uint256)":{"notice":"View an obligation of tokens."},"getPayment(uint256)":{"notice":"Returns an exiting payment."},"getPaymentCount()":{"notice":"Get the number of payments in the colony."},"getRewardInverse()":{"notice":"Return 1 / the reward to pay out from revenue. e.g. if the fee is 1% (or 0.01), return 100."},"getRewardPayoutInfo(uint256)":{"notice":"Get useful information about specific reward payout."},"getRootLocalSkill()":{"notice":"Get the root local skill id"},"getTask(uint256)":{"notice":"Get a task with id `_id`"},"getTaskChangeNonce(uint256)":{"notice":"Starts from 0 and is incremented on every co-reviewed task change via `executeTaskChange` call."},"getTaskCount()":{"notice":"Get the number of tasks in the colony."},"getTaskPayout(uint256,uint8,address)":{"notice":"Get payout amount in `_token` denomination for role `_role` in task `_id`."},"getTaskRole(uint256,uint8)":{"notice":"Get the `Role` properties back for role `_role` in task `_id`."},"getTaskWorkRatingSecret(uint256,uint8)":{"notice":"Get the rating secret submitted for role `_role` in task `_id`"},"getTaskWorkRatingSecretsInfo(uint256)":{"notice":"Get the `ColonyStorage.RatingSecrets` information for task `_id`."},"getToken()":{"notice":"Get the colony token."},"getTokenApproval(address,address)":{"notice":"Get the current approval amount"},"getTotalTokenApproval(address)":{"notice":"Get the current total approval amount across all spenders"},"getUserRoles(address,uint256)":{"notice":"Gets the bytes32 representation of the roles for a user in a given domain"},"hasInheritedUserRole(address,uint256,uint8,uint256,uint256)":{"notice":"Check whether a given user has a given role for the colony, in a child domain. Calls the function of the same name on the colony's authority contract and an internal inheritance validator function"},"hasUserRole(address,uint256,uint8)":{"notice":"Check whether a given user has a given role for the colony. Calls the function of the same name on the colony's authority contract."},"initialiseColony(address,address)":{"notice":"Called once when the colony is created to initialise certain storage slot values."},"initialiseRootLocalSkill()":{"notice":"Initialise the local skill tree for the colony."},"installExtension(bytes32,uint256)":{"notice":"Install an extension to the colony. Secured function to authorised members."},"isInRecoveryMode()":{"notice":"Is colony network in recovery mode."},"lockExpenditure(uint256)":{"notice":"Locks the expenditure and prevents further editing. Can only be called by expenditure owner."},"lockToken()":{"notice":"Lock the colony's token. Can only be called by a network-managed extension."},"makeArbitraryTransaction(address,bytes)":{"notice":"@deprecatedExecute arbitrary transaction on behalf of the Colony"},"makeArbitraryTransactions(address[],bytes[],bool)":{"notice":"Execute arbitrary transactions on behalf of the Colony in series"},"makeExpenditure(uint256,uint256,uint256)":{"notice":"Add a new expenditure in the colony. Secured function to authorised members."},"makeSingleArbitraryTransaction(address,bytes)":{"notice":"Executes a single arbitrary transaction"},"makeTask(uint256,uint256,bytes32,uint256,uint256,uint256)":{"notice":"Make a new task in the colony. Secured function to authorised members."},"mintTokens(uint256)":{"notice":"Mint `_wad` amount of colony tokens. Secured function to authorised members."},"mintTokensFor(address,uint256)":{"notice":"Mint `_wad` amount of colony tokens and send to `_guy`. Secured function to authorised members."},"moveFundsBetweenPots(uint256,uint256,uint256,uint256,uint256,uint256,address)":{"notice":"@deprecatedMove a given amount: `_amount` of `_token` funds from funding pot with id `_fromPot` to one with id `_toPot`."},"moveFundsBetweenPots(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address)":{"notice":"Move a given amount: `_amount` of `_token` funds from funding pot with id `_fromPot` to one with id `_toPot`."},"multicall(bytes[])":{"notice":"Call multiple functions in the current contract and return the data from all of them if they all succeed"},"numRecoveryRoles()":{"notice":"Return number of recovery roles."},"obligateStake(address,uint256,uint256)":{"notice":"Obligate the user some amount of tokens as a stake."},"owner()":{"notice":"Get the colony `owner` address. This should be address(0x0) at all times."},"registerColonyLabel(string,string)":{"notice":"Register colony's ENS label."},"removeRecoveryRole(address)":{"notice":"Remove colony recovery role. Can only be called by root role."},"removeTaskEvaluatorRole(uint256)":{"notice":"Removing evaluator role. Agreed between manager and currently assigned evaluator."},"removeTaskWorkerRole(uint256)":{"notice":"Removing worker role. Agreed between manager and currently assigned worker."},"revealTaskWorkRating(uint256,uint8,uint8,bytes32)":{"notice":"Reveal the secret rating submitted in `IColony.submitTaskWorkRating` for task `_id` and task role with id `_role`. Allowed within 5 days period starting which whichever is first from either both rating secrets being submitted (via `IColony.submitTaskWorkRating`) or the 5 day rating period expiring."},"setAdministrationRole(uint256,uint256,address,uint256,bool)":{"notice":"Set new colony admin role. Can be called by root role or architecture role."},"setAllTaskPayouts(uint256,address,uint256,uint256,uint256)":{"notice":"Set `_token` payout for all roles in task `_id` to the respective amounts."},"setArbitrationRole(uint256,uint256,address,uint256,bool)":{"notice":"Set new colony arbitration role. Can be called by root role or architecture role."},"setArchitectureRole(uint256,uint256,address,uint256,bool)":{"notice":"Set new colony architecture role. Can be called by root role or architecture role."},"setDefaultGlobalClaimDelay(uint256)":{"notice":"Update the default global claim delay for expenditures"},"setExpenditureClaimDelay(uint256,uint256,uint256)":{"notice":"@deprecatedSets the claim delay on an expenditure slot. Can only be called by expenditure owner."},"setExpenditureClaimDelays(uint256,uint256[],uint256[])":{"notice":"Sets the claim delays in given expenditure slots. Can only be called by expenditure owner."},"setExpenditureMetadata(uint256,string)":{"notice":"Sets the metadata for an expenditure. Can only be called by expenditure owner."},"setExpenditureMetadata(uint256,uint256,uint256,string)":{"notice":"Sets the metadata for an expenditure. Can only be called by Arbitration role."},"setExpenditurePayout(uint256,uint256,address,uint256)":{"notice":"@deprecatedSet the token payout on an expenditure slot. Can only be called by expenditure owner."},"setExpenditurePayout(uint256,uint256,uint256,uint256,address,uint256)":{"notice":"Set the token payout in a given expenditure slot. Can only be called by an Arbitration user."},"setExpenditurePayoutModifiers(uint256,uint256[],int256[])":{"notice":"Sets the payout modifiers in given expenditure slots. Can only be called by expenditure owner."},"setExpenditurePayouts(uint256,uint256[],address,uint256[])":{"notice":"Set the token payouts in given expenditure slots. Can only be called by expenditure owner."},"setExpenditureRecipient(uint256,uint256,address)":{"notice":"@deprecatedSets the recipient on an expenditure slot. Can only be called by expenditure owner."},"setExpenditureRecipients(uint256,uint256[],address[])":{"notice":"Sets the recipients in given expenditure slots. Can only be called by expenditure owner."},"setExpenditureSkill(uint256,uint256,uint256)":{"notice":"@deprecatedSets the skill on an expenditure slot. Can only be called by expenditure owner."},"setExpenditureSkills(uint256,uint256[],uint256[])":{"notice":"Sets the skill on an expenditure slot. Can only be called by expenditure owner."},"setExpenditureState(uint256,uint256,uint256,uint256,bool[],bytes32[],bytes32)":{"notice":"Set arbitrary state on an expenditure slot. Can only be called by Arbitration role."},"setExpenditureValues(uint256,uint256[],address[],uint256[],uint256[],uint256[],uint256[],uint256[],int256[],address[],uint256[][],uint256[][])":{"notice":"Set many values of an expenditure simultaneously. Can only be called by expenditure owner."},"setFundingRole(uint256,uint256,address,uint256,bool)":{"notice":"Set new colony funding role. Can be called by root role or architecture role."},"setPaymentPayout(uint256,uint256,uint256,address,uint256)":{"notice":"Sets the payout for a given token on an existing payment. Secured function to authorised members."},"setPaymentRecipient(uint256,uint256,uint256,address)":{"notice":"Sets the recipient on an existing payment. Secured function to authorised members."},"setPaymentSkill(uint256,uint256,uint256,uint256)":{"notice":"Sets the skill on an existing payment. Secured function to authorised members."},"setRecoveryRole(address)":{"notice":"Set new colony recovery role. Can be called by root."},"setRewardInverse(uint256)":{"notice":"Set the reward inverse to pay out from revenue. e.g. if the fee is 1% (or 0.01), set 100."},"setRootRole(address,bool)":{"notice":"Set new colony root role. Can be called by root role only."},"setStorageSlotRecovery(uint256,bytes32)":{"notice":"Update value of arbitrary storage variable. Can only be called by user with recovery role."},"setTaskBrief(uint256,bytes32)":{"notice":"Set the hash for the task brief, aka task work specification, which identifies the task brief content in ddb. Allowed before a task is finalized."},"setTaskDueDate(uint256,uint256)":{"notice":"Set the due date on task `_id`. Allowed before a task is finalized."},"setTaskEvaluatorPayout(uint256,address,uint256)":{"notice":"Set `_token` payout for evaluator in task `_id` to `_amount`."},"setTaskEvaluatorRole(uint256,address)":{"notice":"Assigning evaluator role. Can only be set if there is no one currently assigned to be an evaluator. Manager of the task and user we want to assign role to both need to agree. Managers can assign themselves to this role, if there is no one currently assigned to it."},"setTaskManagerPayout(uint256,address,uint256)":{"notice":"Set `_token` payout for manager in task `_id` to `_amount`."},"setTaskManagerRole(uint256,address,uint256,uint256)":{"notice":"Assigning manager role. Current manager and user we want to assign role to both need to agree. User we want to set here also needs to be an admin. Note that the domain proof data comes at the end here to not interfere with the assembly argument unpacking."},"setTaskSkill(uint256,uint256)":{"notice":"Set the skill for task `_id`."},"setTaskWorkerPayout(uint256,address,uint256)":{"notice":"Set `_token` payout for worker in task `_id` to `_amount`."},"setTaskWorkerRole(uint256,address)":{"notice":"Assigning worker role. Can only be set if there is no one currently assigned to be a worker. Manager of the task and user we want to assign role to both need to agree."},"setUserRoles(uint256,uint256,address,uint256,bytes32)":{"notice":"Set several roles in one transaction. Can be called by root role or architecture role."},"startNextRewardPayout(address,bytes,bytes,uint256,bytes32[])":{"notice":"Start next reward payout for `_token`. All funds in the reward pot for `_token` will become unavailable.Add a new payment in the colony. Can only be called by users with root permission. All tokens will be locked, and can be unlocked by calling `waiveRewardPayout` or `claimRewardPayout`."},"submitTaskDeliverable(uint256,bytes32)":{"notice":"Submit the task deliverable, i.e. the output of the work performed for task `_id`. Submission is allowed only to the assigned worker before the task due date. Submissions cannot be overwritten."},"submitTaskDeliverableAndRating(uint256,bytes32,bytes32)":{"notice":"Submit the task deliverable for Worker and rating for Manager."},"submitTaskWorkRating(uint256,uint8,bytes32)":{"notice":"Submit a hashed secret of the rating for work in task `_id` which was performed by user with task role id `_role`. Allowed within 5 days period starting which whichever is first from either the deliverable being submitted or the dueDate been reached. Allowed only for evaluator to rate worker and for worker to rate manager performance. Once submitted ratings can not be changed or overwritten."},"transferExpenditure(uint256,address)":{"notice":"Updates the expenditure owner. Can only be called by expenditure owner."},"transferExpenditureViaArbitration(uint256,uint256,uint256,address)":{"notice":"@deprecatedUpdates the expenditure owner. Can only be called by Arbitration role."},"transferStake(uint256,uint256,address,address,uint256,uint256,address)":{"notice":"Transfer some amount of obligated tokens. Can be called by the arbitration role."},"uninstallExtension(bytes32)":{"notice":"Uninstall an extension from a colony. Secured function to authorised members."},"unlockToken()":{"notice":"unlock the native colony token, if possible"},"unlockTokenForUser(address,uint256)":{"notice":"Unlock the colony's token for a user. Can only be called by a network-managed extension."},"updateApprovalAmount(address,address)":{"notice":"Update the internal bookkeeping around external ERC20 approvals"},"updateColonyOrbitDB(string)":{"notice":"Update a colony's orbitdb address. Can only be called by a colony with a registered subdomain"},"upgrade(uint256)":{"notice":"Upgrades a colony to a new Colony contract version `_newVersion`."},"upgradeExtension(bytes32,uint256)":{"notice":"Upgrade an extension in a colony. Secured function to authorised members."},"userCanSetRoles(address,uint256,uint256,uint256)":{"notice":"Check whether a given user can modify roles in the target domain `_childDomainId`. Mostly a convenience function to provide a uniform interface for extension contracts validating permissions"},"verifyReputationProof(bytes,bytes,uint256,bytes32[])":{"notice":"Helper function that can be used by a client to verify the correctness of a patricia proof they have been supplied with."},"version()":{"notice":"Get the Colony contract version. Starts from 1 and is incremented with every deployed contract change."}},"version":1}}