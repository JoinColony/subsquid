{
  "contractName": "IColonyNetwork",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "auction",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "quantity",
          "type": "uint256"
        }
      ],
      "name": "AuctionCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "colonyId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "colonyAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "ColonyAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "colony",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "label",
          "type": "bytes32"
        }
      ],
      "name": "ColonyLabelRegistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "resolver",
          "type": "address"
        }
      ],
      "name": "ColonyNetworkInitialised",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "version",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "resolver",
          "type": "address"
        }
      ],
      "name": "ColonyVersionAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "extensionId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "version",
          "type": "uint256"
        }
      ],
      "name": "ExtensionAddedToNetwork",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "extensionId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "colony",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "deprecated",
          "type": "bool"
        }
      ],
      "name": "ExtensionDeprecated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "extensionId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "colony",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "version",
          "type": "uint256"
        }
      ],
      "name": "ExtensionInstalled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "extensionId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "colony",
          "type": "address"
        }
      ],
      "name": "ExtensionUninstalled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "extensionId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "colony",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "version",
          "type": "uint256"
        }
      ],
      "name": "ExtensionUpgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "metaColony",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rootSkillId",
          "type": "uint256"
        }
      ],
      "name": "MetaColonyCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address payable",
          "name": "relayerAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "payload",
          "type": "bytes"
        }
      ],
      "name": "MetaTransactionExecuted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "miningCycleResolver",
          "type": "address"
        }
      ],
      "name": "MiningCycleResolverSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "feeInverse",
          "type": "uint256"
        }
      ],
      "name": "NetworkFeeInverseSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "RecoveryModeEntered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "RecoveryModeExitApproved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "RecoveryModeExited",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "setTo",
          "type": "bool"
        }
      ],
      "name": "RecoveryRoleSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "slot",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "fromValue",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "toValue",
          "type": "bytes32"
        }
      ],
      "name": "RecoveryStorageSlotSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "ens",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "rootNode",
          "type": "bytes32"
        }
      ],
      "name": "RegistrarInitialised",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "miner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokensLost",
          "type": "uint256"
        }
      ],
      "name": "ReputationMinerPenalised",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "hash",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "nLeaves",
          "type": "uint256"
        }
      ],
      "name": "ReputationMiningCycleComplete",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "inactiveReputationMiningCycle",
          "type": "address"
        }
      ],
      "name": "ReputationMiningInitialised",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "ReputationMiningRewardSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "newHash",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newNLeaves",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "stakers",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        }
      ],
      "name": "ReputationRootHashSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "skillId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "parentSkillId",
          "type": "uint256"
        }
      ],
      "name": "SkillAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenAuthorityAddress",
          "type": "address"
        }
      ],
      "name": "TokenAuthorityDeployed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        }
      ],
      "name": "TokenDeployed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenLocking",
          "type": "address"
        }
      ],
      "name": "TokenLockingAddressSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "status",
          "type": "bool"
        }
      ],
      "name": "TokenWhitelisted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "label",
          "type": "bytes32"
        }
      ],
      "name": "UserLabelRegistered",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "approveExitRecovery",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_slot",
          "type": "uint256"
        }
      ],
      "name": "checkNotAdditionalProtectedVariable",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "enterRecoveryMode",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "payload",
          "type": "bytes"
        },
        {
          "internalType": "bytes32",
          "name": "sigR",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "sigS",
          "type": "bytes32"
        },
        {
          "internalType": "uint8",
          "name": "sigV",
          "type": "uint8"
        }
      ],
      "name": "executeMetaTransaction",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "exitRecoveryMode",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        }
      ],
      "name": "getMetatransactionNonce",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isInRecoveryMode",
      "outputs": [
        {
          "internalType": "bool",
          "name": "inRecoveryMode",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes[]",
          "name": "data",
          "type": "bytes[]"
        }
      ],
      "name": "multicall",
      "outputs": [
        {
          "internalType": "bytes[]",
          "name": "results",
          "type": "bytes[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "numRecoveryRoles",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "numRoles",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "removeRecoveryRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "setRecoveryRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_slot",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "_value",
          "type": "bytes32"
        }
      ],
      "name": "setStorageSlotRecovery",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "_interfaceID",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "_status",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_reputationMiningCycle",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "int256",
          "name": "_amount",
          "type": "int256"
        },
        {
          "internalType": "uint256",
          "name": "_skillId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_colony",
          "type": "address"
        },
        {
          "internalType": "uint128",
          "name": "_nUpdates",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "_nPreviousUpdates",
          "type": "uint128"
        }
      ],
      "name": "setReplacementReputationUpdateLogEntry",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_reputationMiningCycle",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "getReplacementReputationUpdateLogEntry",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "user",
              "type": "address"
            },
            {
              "internalType": "int256",
              "name": "amount",
              "type": "int256"
            },
            {
              "internalType": "uint256",
              "name": "skillId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "colony",
              "type": "address"
            },
            {
              "internalType": "uint128",
              "name": "nUpdates",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "nPreviousUpdates",
              "type": "uint128"
            }
          ],
          "internalType": "struct ColonyNetworkDataTypes.ReputationLogEntry",
          "name": "_reputationLogEntry",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_reputationMiningCycle",
          "type": "address"
        }
      ],
      "name": "getReplacementReputationUpdateLogsExist",
      "outputs": [
        {
          "internalType": "bool",
          "name": "_exists",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMetaColony",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "_colonyAddress",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getColonyCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_count",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_colony",
          "type": "address"
        }
      ],
      "name": "isColony",
      "outputs": [
        {
          "internalType": "bool",
          "name": "_addressIsColony",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_parentSkillId",
          "type": "uint256"
        }
      ],
      "name": "addSkill",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_skillId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_skillId",
          "type": "uint256"
        }
      ],
      "name": "getSkill",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint128",
              "name": "nParents",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "nChildren",
              "type": "uint128"
            },
            {
              "internalType": "uint256[]",
              "name": "parents",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "children",
              "type": "uint256[]"
            },
            {
              "internalType": "bool",
              "name": "globalSkill",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "deprecated",
              "type": "bool"
            }
          ],
          "internalType": "struct ColonyNetworkDataTypes.Skill",
          "name": "_skill",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_skillId",
          "type": "uint256"
        }
      ],
      "name": "deprecateSkill",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_skillId",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_deprecated",
          "type": "bool"
        }
      ],
      "name": "deprecateSkill",
      "outputs": [
        {
          "internalType": "bool",
          "name": "_changed",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialiseRootLocalSkill",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_rootLocalSkillId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "int256",
          "name": "_amount",
          "type": "int256"
        },
        {
          "internalType": "uint256",
          "name": "_skillId",
          "type": "uint256"
        }
      ],
      "name": "appendReputationUpdateLog",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getSkillCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_count",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getReputationMiningSkillId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_skillId",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenLockingAddress",
          "type": "address"
        }
      ],
      "name": "setTokenLocking",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTokenLocking",
      "outputs": [
        {
          "internalType": "address",
          "name": "_lockingAddress",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        }
      ],
      "name": "createMetaColony",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        }
      ],
      "name": "createColony",
      "outputs": [
        {
          "internalType": "address",
          "name": "_colonyAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_version",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_colonyName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_metadata",
          "type": "string"
        }
      ],
      "name": "createColony",
      "outputs": [
        {
          "internalType": "address",
          "name": "_colonyAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_version",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_colonyName",
          "type": "string"
        }
      ],
      "name": "createColony",
      "outputs": [
        {
          "internalType": "address",
          "name": "_colonyAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_version",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_colonyName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_orbitdb",
          "type": "string"
        },
        {
          "internalType": "bool",
          "name": "_useExtensionManager",
          "type": "bool"
        }
      ],
      "name": "createColony",
      "outputs": [
        {
          "internalType": "address",
          "name": "_colonyAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        },
        {
          "internalType": "uint8",
          "name": "_decimals",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "_version",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_colonyName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_metadata",
          "type": "string"
        }
      ],
      "name": "createColonyForFrontend",
      "outputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "colony",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_version",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_resolver",
          "type": "address"
        }
      ],
      "name": "addColonyVersion",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_resolver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_version",
          "type": "uint256"
        }
      ],
      "name": "initialise",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "getColony",
      "outputs": [
        {
          "internalType": "address",
          "name": "_colonyAddress",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCurrentColonyVersion",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_version",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_skillId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_parentSkillIndex",
          "type": "uint256"
        }
      ],
      "name": "getParentSkillId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_parentSkillId",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_skillId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_childSkillIndex",
          "type": "uint256"
        }
      ],
      "name": "getChildSkillId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_childSkillId",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_active",
          "type": "bool"
        }
      ],
      "name": "getReputationMiningCycle",
      "outputs": [
        {
          "internalType": "address",
          "name": "_repMiningCycleAddress",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_timeStaked",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_submissonIndex",
          "type": "uint256"
        }
      ],
      "name": "calculateMinerWeight",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_minerWeight",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_version",
          "type": "uint256"
        }
      ],
      "name": "getColonyVersionResolver",
      "outputs": [
        {
          "internalType": "address",
          "name": "_resolverAddress",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_newHash",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_newNLeaves",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "_stakers",
          "type": "address[]"
        }
      ],
      "name": "setReputationRootHash",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startNextCycle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialiseReputationMining",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getReputationRootHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "rootHash",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getReputationRootHashNLeaves",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "nLeaves",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getReputationRootHashNNodes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "nNodes",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "startTokenAuction",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_ens",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_rootNode",
          "type": "bytes32"
        }
      ],
      "name": "setupRegistrar",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_username",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_orbitdb",
          "type": "string"
        }
      ],
      "name": "registerUserLabel",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_colonyName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_orbitdb",
          "type": "string"
        }
      ],
      "name": "registerColonyLabel",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_orbitdb",
          "type": "string"
        }
      ],
      "name": "updateColonyOrbitDB",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_orbitdb",
          "type": "string"
        }
      ],
      "name": "updateUserOrbitDB",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_node",
          "type": "bytes32"
        }
      ],
      "name": "getProfileDBAddress",
      "outputs": [
        {
          "internalType": "string",
          "name": "_orbitdb",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        }
      ],
      "name": "lookupRegisteredENSDomain",
      "outputs": [
        {
          "internalType": "string",
          "name": "_domain",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_node",
          "type": "bytes32"
        }
      ],
      "name": "addr",
      "outputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getENSRegistrar",
      "outputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_miningResolverAddress",
          "type": "address"
        }
      ],
      "name": "setMiningResolver",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMiningResolver",
      "outputs": [
        {
          "internalType": "address",
          "name": "miningResolverAddress",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_extensionId",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_resolver",
          "type": "address"
        }
      ],
      "name": "addExtensionToNetwork",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_extensionId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_version",
          "type": "uint256"
        }
      ],
      "name": "installExtension",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_extensionId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_newVersion",
          "type": "uint256"
        }
      ],
      "name": "upgradeExtension",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_extensionId",
          "type": "bytes32"
        },
        {
          "internalType": "bool",
          "name": "_deprecated",
          "type": "bool"
        }
      ],
      "name": "deprecateExtension",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_extensionId",
          "type": "bytes32"
        }
      ],
      "name": "uninstallExtension",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_extensionId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_version",
          "type": "uint256"
        }
      ],
      "name": "getExtensionResolver",
      "outputs": [
        {
          "internalType": "address",
          "name": "_resolver",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_extensionId",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_colony",
          "type": "address"
        }
      ],
      "name": "getExtensionInstallation",
      "outputs": [
        {
          "internalType": "address",
          "name": "_installation",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getFeeInverse",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_feeInverse",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_feeInverse",
          "type": "uint256"
        }
      ],
      "name": "setFeeInverse",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "getPayoutWhitelist",
      "outputs": [
        {
          "internalType": "bool",
          "name": "_status",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_status",
          "type": "bool"
        }
      ],
      "name": "setPayoutWhitelist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_stakers",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "punishStakers",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "stakeForMining",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "unstakeForMining",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getMiningStake",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            }
          ],
          "internalType": "struct ColonyNetworkDataTypes.MiningStake",
          "name": "_info",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "reward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "burnUnneededRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        }
      ],
      "name": "claimMiningReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "setReputationMiningCycleReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getReputationMiningCycleReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        },
        {
          "internalType": "uint8",
          "name": "_decimals",
          "type": "uint8"
        }
      ],
      "name": "deployTokenViaNetwork",
      "outputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_colony",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "_allowedToTransfer",
          "type": "address[]"
        }
      ],
      "name": "deployTokenAuthority",
      "outputs": [
        {
          "internalType": "address",
          "name": "_tokenAuthority",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_delegate",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_allowed",
          "type": "bool"
        }
      ],
      "name": "setMiningDelegate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_delegate",
          "type": "address"
        }
      ],
      "name": "getMiningDelegator",
      "outputs": [
        {
          "internalType": "address",
          "name": "_delegator",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"auction\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"name\":\"AuctionCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"colonyId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"colonyAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"ColonyAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"colony\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"label\",\"type\":\"bytes32\"}],\"name\":\"ColonyLabelRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"resolver\",\"type\":\"address\"}],\"name\":\"ColonyNetworkInitialised\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"resolver\",\"type\":\"address\"}],\"name\":\"ColonyVersionAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"extensionId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"}],\"name\":\"ExtensionAddedToNetwork\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"extensionId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"colony\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"deprecated\",\"type\":\"bool\"}],\"name\":\"ExtensionDeprecated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"extensionId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"colony\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"}],\"name\":\"ExtensionInstalled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"extensionId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"colony\",\"type\":\"address\"}],\"name\":\"ExtensionUninstalled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"extensionId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"colony\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"}],\"name\":\"ExtensionUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"metaColony\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rootSkillId\",\"type\":\"uint256\"}],\"name\":\"MetaColonyCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address payable\",\"name\":\"relayerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"}],\"name\":\"MetaTransactionExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"miningCycleResolver\",\"type\":\"address\"}],\"name\":\"MiningCycleResolverSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeInverse\",\"type\":\"uint256\"}],\"name\":\"NetworkFeeInverseSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"RecoveryModeEntered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"RecoveryModeExitApproved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"RecoveryModeExited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"setTo\",\"type\":\"bool\"}],\"name\":\"RecoveryRoleSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"slot\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"fromValue\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"toValue\",\"type\":\"bytes32\"}],\"name\":\"RecoveryStorageSlotSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"ens\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"rootNode\",\"type\":\"bytes32\"}],\"name\":\"RegistrarInitialised\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"miner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensLost\",\"type\":\"uint256\"}],\"name\":\"ReputationMinerPenalised\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nLeaves\",\"type\":\"uint256\"}],\"name\":\"ReputationMiningCycleComplete\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"inactiveReputationMiningCycle\",\"type\":\"address\"}],\"name\":\"ReputationMiningInitialised\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ReputationMiningRewardSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"newHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newNLeaves\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"stakers\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"ReputationRootHashSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"skillId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"parentSkillId\",\"type\":\"uint256\"}],\"name\":\"SkillAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAuthorityAddress\",\"type\":\"address\"}],\"name\":\"TokenAuthorityDeployed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"TokenDeployed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenLocking\",\"type\":\"address\"}],\"name\":\"TokenLockingAddressSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"TokenWhitelisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"label\",\"type\":\"bytes32\"}],\"name\":\"UserLabelRegistered\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_version\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_resolver\",\"type\":\"address\"}],\"name\":\"addColonyVersion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_extensionId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_resolver\",\"type\":\"address\"}],\"name\":\"addExtensionToNetwork\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_parentSkillId\",\"type\":\"uint256\"}],\"name\":\"addSkill\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_skillId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_node\",\"type\":\"bytes32\"}],\"name\":\"addr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"_amount\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"_skillId\",\"type\":\"uint256\"}],\"name\":\"appendReputationUpdateLog\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"approveExitRecovery\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burnUnneededRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_timeStaked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_submissonIndex\",\"type\":\"uint256\"}],\"name\":\"calculateMinerWeight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_minerWeight\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_slot\",\"type\":\"uint256\"}],\"name\":\"checkNotAdditionalProtectedVariable\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"claimMiningReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"createColony\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_colonyAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_version\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_colonyName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_metadata\",\"type\":\"string\"}],\"name\":\"createColony\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_colonyAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_version\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_colonyName\",\"type\":\"string\"}],\"name\":\"createColony\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_colonyAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_version\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_colonyName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_orbitdb\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"_useExtensionManager\",\"type\":\"bool\"}],\"name\":\"createColony\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_colonyAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"_decimals\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_version\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_colonyName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_metadata\",\"type\":\"string\"}],\"name\":\"createColonyForFrontend\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"colony\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"createMetaColony\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_colony\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_allowedToTransfer\",\"type\":\"address[]\"}],\"name\":\"deployTokenAuthority\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAuthority\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"_decimals\",\"type\":\"uint8\"}],\"name\":\"deployTokenViaNetwork\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_extensionId\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"_deprecated\",\"type\":\"bool\"}],\"name\":\"deprecateExtension\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_skillId\",\"type\":\"uint256\"}],\"name\":\"deprecateSkill\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_skillId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_deprecated\",\"type\":\"bool\"}],\"name\":\"deprecateSkill\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_changed\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enterRecoveryMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"sigR\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"sigS\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"sigV\",\"type\":\"uint8\"}],\"name\":\"executeMetaTransaction\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exitRecoveryMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_skillId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_childSkillIndex\",\"type\":\"uint256\"}],\"name\":\"getChildSkillId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_childSkillId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getColony\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_colonyAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getColonyCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_count\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_version\",\"type\":\"uint256\"}],\"name\":\"getColonyVersionResolver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_resolverAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentColonyVersion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_version\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getENSRegistrar\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_extensionId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_colony\",\"type\":\"address\"}],\"name\":\"getExtensionInstallation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_installation\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_extensionId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_version\",\"type\":\"uint256\"}],\"name\":\"getExtensionResolver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_resolver\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFeeInverse\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_feeInverse\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMetaColony\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"_colonyAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getMetatransactionNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_delegate\",\"type\":\"address\"}],\"name\":\"getMiningDelegator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_delegator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMiningResolver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"miningResolverAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getMiningStake\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct ColonyNetworkDataTypes.MiningStake\",\"name\":\"_info\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_skillId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_parentSkillIndex\",\"type\":\"uint256\"}],\"name\":\"getParentSkillId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_parentSkillId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getPayoutWhitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_node\",\"type\":\"bytes32\"}],\"name\":\"getProfileDBAddress\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"_orbitdb\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_reputationMiningCycle\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getReplacementReputationUpdateLogEntry\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"amount\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"skillId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"colony\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"nUpdates\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"nPreviousUpdates\",\"type\":\"uint128\"}],\"internalType\":\"struct ColonyNetworkDataTypes.ReputationLogEntry\",\"name\":\"_reputationLogEntry\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_reputationMiningCycle\",\"type\":\"address\"}],\"name\":\"getReplacementReputationUpdateLogsExist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_exists\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_active\",\"type\":\"bool\"}],\"name\":\"getReputationMiningCycle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_repMiningCycleAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReputationMiningCycleReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReputationMiningSkillId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_skillId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReputationRootHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"rootHash\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReputationRootHashNLeaves\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"nLeaves\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReputationRootHashNNodes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"nNodes\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_skillId\",\"type\":\"uint256\"}],\"name\":\"getSkill\",\"outputs\":[{\"components\":[{\"internalType\":\"uint128\",\"name\":\"nParents\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"nChildren\",\"type\":\"uint128\"},{\"internalType\":\"uint256[]\",\"name\":\"parents\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"children\",\"type\":\"uint256[]\"},{\"internalType\":\"bool\",\"name\":\"globalSkill\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"deprecated\",\"type\":\"bool\"}],\"internalType\":\"struct ColonyNetworkDataTypes.Skill\",\"name\":\"_skill\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSkillCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_count\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenLocking\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_lockingAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_resolver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_version\",\"type\":\"uint256\"}],\"name\":\"initialise\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialiseReputationMining\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialiseRootLocalSkill\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_rootLocalSkillId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_extensionId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_version\",\"type\":\"uint256\"}],\"name\":\"installExtension\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_colony\",\"type\":\"address\"}],\"name\":\"isColony\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_addressIsColony\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isInRecoveryMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"inRecoveryMode\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"lookupRegisteredENSDomain\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"_domain\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"multicall\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"results\",\"type\":\"bytes[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numRecoveryRoles\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"numRoles\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_stakers\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"punishStakers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_colonyName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_orbitdb\",\"type\":\"string\"}],\"name\":\"registerColonyLabel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_username\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_orbitdb\",\"type\":\"string\"}],\"name\":\"registerUserLabel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"removeRecoveryRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"reward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_feeInverse\",\"type\":\"uint256\"}],\"name\":\"setFeeInverse\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_delegate\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_allowed\",\"type\":\"bool\"}],\"name\":\"setMiningDelegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_miningResolverAddress\",\"type\":\"address\"}],\"name\":\"setMiningResolver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"setPayoutWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"setRecoveryRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_reputationMiningCycle\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"_amount\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"_skillId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_colony\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"_nUpdates\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"_nPreviousUpdates\",\"type\":\"uint128\"}],\"name\":\"setReplacementReputationUpdateLogEntry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setReputationMiningCycleReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_newHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_newNLeaves\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_stakers\",\"type\":\"address[]\"}],\"name\":\"setReputationRootHash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_slot\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_value\",\"type\":\"bytes32\"}],\"name\":\"setStorageSlotRecovery\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenLockingAddress\",\"type\":\"address\"}],\"name\":\"setTokenLocking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ens\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_rootNode\",\"type\":\"bytes32\"}],\"name\":\"setupRegistrar\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stakeForMining\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startNextCycle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"startTokenAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"_interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_extensionId\",\"type\":\"bytes32\"}],\"name\":\"uninstallExtension\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"unstakeForMining\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_orbitdb\",\"type\":\"string\"}],\"name\":\"updateColonyOrbitDB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_orbitdb\",\"type\":\"string\"}],\"name\":\"updateUserOrbitDB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_extensionId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_newVersion\",\"type\":\"uint256\"}],\"name\":\"upgradeExtension\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"AuctionCreated(address,address,uint256)\":{\"details\":\"Emitted from `IColonyNetwork.startTokenAuction` function\",\"params\":{\"auction\":\"Address of the created auction contract\",\"quantity\":\"Quantity of `token` to auction\",\"token\":\"Address of the token for auction\"}},\"ColonyAdded(uint256,address,address)\":{\"details\":\"Emitted from `IColonyNetwork.createColony` function\",\"params\":{\"colonyAddress\":\"The colony address in the network\",\"colonyId\":\"The colony id in the network\",\"token\":\"Address of the associated colony token\"}},\"ColonyLabelRegistered(address,bytes32)\":{\"params\":{\"colony\":\"The colony address registered\",\"label\":\"The label registered\"}},\"ColonyNetworkInitialised(address)\":{\"params\":{\"resolver\":\"The Resolver contract address used by the Colony version 1\"}},\"ColonyVersionAdded(uint256,address)\":{\"params\":{\"resolver\":\"The new colony contract resolver contract instance\",\"version\":\"The new int colony version, e.g. 2, 3, 4, etc\"}},\"ExtensionAddedToNetwork(bytes32,uint256)\":{\"params\":{\"extensionId\":\"The identifier for the extension\",\"version\":\"The version of the extension\"}},\"ExtensionDeprecated(bytes32,address,bool)\":{\"params\":{\"colony\":\"The address of the colony\",\"deprecated\":\"Whether the extension is deprecated or not\",\"extensionId\":\"The identifier for the extension\"}},\"ExtensionInstalled(bytes32,address,uint256)\":{\"params\":{\"colony\":\"The address of the colony\",\"extensionId\":\"The identifier for the extension\",\"version\":\"The version of the extension\"}},\"ExtensionUninstalled(bytes32,address)\":{\"params\":{\"colony\":\"The address of the colony\",\"extensionId\":\"The identifier for the extension\"}},\"ExtensionUpgraded(bytes32,address,uint256)\":{\"params\":{\"colony\":\"The address of the colony\",\"extensionId\":\"The identifier for the extension\",\"version\":\"The new version of the extension\"}},\"MetaColonyCreated(address,address,uint256)\":{\"params\":{\"metaColony\":\"Address of the MetaColony instance (i.e. EtherRouter)\",\"rootSkillId\":\"Id of the root skill of the global skills tree, normally this is 2 Note that the speciat mining skill is created at rootSkillId + 1, so normally this is 3 Skill id 1 is normally the local skill associate with meta colony domain 1\",\"token\":\"Address of the associated CLNY token\"}},\"MiningCycleResolverSet(address)\":{\"params\":{\"miningCycleResolver\":\"Resolver address for the ReputationMiningCycle contract\"}},\"NetworkFeeInverseSet(uint256)\":{\"params\":{\"feeInverse\":\"The network fee inverse value\"}},\"RecoveryModeEntered(address)\":{\"params\":{\"user\":\"The address that triggered recovery mode\"}},\"RecoveryModeExitApproved(address)\":{\"params\":{\"user\":\"The address signalling they are happy with the state\"}},\"RecoveryModeExited(address)\":{\"params\":{\"user\":\"The address that left recovery mode\"}},\"RecoveryRoleSet(address,bool)\":{\"params\":{\"setTo\":\"The boolean indicating whether the role is being granted or revoked\",\"user\":\"The address being modified\"}},\"RecoveryStorageSlotSet(address,uint256,bytes32,bytes32)\":{\"params\":{\"fromValue\":\"The value the storage slot had before this transaction\",\"slot\":\"The storage slot being modified\",\"toValue\":\"The value the storage slot has after this transaction\",\"user\":\"The address that set the storage slot\"}},\"RegistrarInitialised(address,bytes32)\":{\"params\":{\"ens\":\"Address of ENS registrar\",\"rootNode\":\"Namehash of the root node for the domain\"}},\"ReputationMiningCycleComplete(bytes32,uint256)\":{\"params\":{\"hash\":\"The root hash of the newly accepted reputation state\",\"nLeaves\":\"The number of leaves in the reputation state\"}},\"ReputationMiningInitialised(address)\":{\"params\":{\"inactiveReputationMiningCycle\":\"Address of the newly created ReputationMiningCycle used in logging reputation changes\"}},\"ReputationMiningRewardSet(uint256)\":{\"params\":{\"amount\":\"Amount of the reward\"}},\"ReputationRootHashSet(bytes32,uint256,address[],uint256)\":{\"params\":{\"newHash\":\"The reputation root hash\",\"newNLeaves\":\"The updated leaves count value\",\"reward\":\"Amount of CLNY distributed as reward to miners\",\"stakers\":\"Array of users who submitted or backed the hash accepted\"}},\"SkillAdded(uint256,uint256)\":{\"details\":\"Emitted from `IColonyNetwork.addSkill` function\",\"params\":{\"parentSkillId\":\"The id of the parent skill under which this new skill is added\",\"skillId\":\"The skill id\"}},\"TokenAuthorityDeployed(address)\":{\"params\":{\"tokenAuthorityAddress\":\"The address of the token authority deployed\"}},\"TokenDeployed(address)\":{\"params\":{\"tokenAddress\":\"The address of the token deployed\"}},\"TokenLockingAddressSet(address)\":{\"params\":{\"tokenLocking\":\"Address of the TokenLocking contract\"}},\"TokenWhitelisted(address,bool)\":{\"params\":{\"status\":\"The whitelist status\",\"token\":\"The token being set\"}},\"UserLabelRegistered(address,bytes32)\":{\"params\":{\"label\":\"The label registered\",\"user\":\"The user address registered\"}}},\"kind\":\"dev\",\"methods\":{\"addColonyVersion(uint256,address)\":{\"params\":{\"_resolver\":\"Address of the `Resolver` contract which will be used with the underlying `EtherRouter` contract\",\"_version\":\"The new Colony contract version\"}},\"addExtensionToNetwork(bytes32,address)\":{\"details\":\"Can only be called by the MetaColony.The extension version is queried from the resolver itself.\",\"params\":{\"_extensionId\":\"keccak256 hash of the extension name, used as an indentifier\",\"_resolver\":\"The deployed resolver containing the extension contract logic\"}},\"addSkill(uint256)\":{\"details\":\"Errors if the parent skill does not exist or if this is called by an unauthorised sender.\",\"params\":{\"_parentSkillId\":\"Id of the skill under which the new skill will be added. If 0, a global skill is added with no parent.\"},\"returns\":{\"_skillId\":\"Id of the added skill\"}},\"addr(bytes32)\":{\"params\":{\"_node\":\"The namehash of the ENS address being requested\"},\"returns\":{\"_address\":\"The address the supplied node resolves to\"}},\"appendReputationUpdateLog(address,int256,uint256)\":{\"details\":\"Errors if it is called by anyone but a colony or if skill with id `_skillId` does not exist or.\",\"params\":{\"_amount\":\"The amount of reputation change for the update, this can be a negative as well as a positive value\",\"_skillId\":\"The skill for the reputation update\",\"_user\":\"The address of the user for the reputation update\"}},\"burnUnneededRewards(uint256)\":{\"details\":\"Only callable by the active reputation mining cycle\",\"params\":{\"_amount\":\"The amount of CLNY to burn\"}},\"calculateMinerWeight(uint256,uint256)\":{\"params\":{\"_submissonIndex\":\"Index of reputation hash submission (between 0 and 11)\",\"_timeStaked\":\"Amount of time (in seconds) that the miner has staked their CLNY\"},\"returns\":{\"_minerWeight\":\"The weight of miner reward\"}},\"checkNotAdditionalProtectedVariable(uint256)\":{\"details\":\"No return value, but should throw if protected.This is external, but is only expected to be called from ContractRecovery; no need toexpose this to any users.\",\"params\":{\"_slot\":\"The storage slot number to check.\"}},\"claimMiningReward(address)\":{\"details\":\"Can be called by anyone, not just _recipient\",\"params\":{\"_recipient\":\"The user whose rewards to claim\"}},\"createColony(address)\":{\"details\":\"This is now deprecated and will be removed in a future versionFor the colony to mint tokens, token ownership must be transferred to the new colony\",\"params\":{\"_tokenAddress\":\"Address of an ERC20 token to serve as the colony token.\"},\"returns\":{\"_colonyAddress\":\"Address of the newly created colony\"}},\"createColony(address,uint256,string)\":{\"details\":\"For the colony to mint tokens, token ownership must be transferred to the new colony\",\"params\":{\"_colonyName\":\"The label to register (if null, no label is registered)\",\"_tokenAddress\":\"Address of an ERC20 token to serve as the colony token\",\"_version\":\"The version of colony to deploy (pass 0 for the current version)\"},\"returns\":{\"_colonyAddress\":\"Address of the newly created colony\"}},\"createColony(address,uint256,string,string)\":{\"details\":\"For the colony to mint tokens, token ownership must be transferred to the new colonyWe expect this function to only be used by the dapp\",\"params\":{\"_colonyName\":\"The label to register (if null, no label is registered)\",\"_metadata\":\"The metadata associated with the new colony\",\"_tokenAddress\":\"Address of an ERC20 token to serve as the colony token\",\"_version\":\"The version of colony to deploy (pass 0 for the current version)\"},\"returns\":{\"_colonyAddress\":\"Address of the newly created colony\"}},\"createColony(address,uint256,string,string,bool)\":{\"details\":\"This is now deprecated and will be removed in a future versionFor the colony to mint tokens, token ownership must be transferred to the new colony\",\"params\":{\"_colonyName\":\"The label to register (if null, no label is registered)\",\"_orbitdb\":\"DEPRECATED Currently a no-op\",\"_tokenAddress\":\"Address of an ERC20 token to serve as the colony token\",\"_useExtensionManager\":\"DEPRECATED Currently a no-op\",\"_version\":\"The version of colony to deploy (pass 0 for the current version)\"},\"returns\":{\"_colonyAddress\":\"Address of the newly created colony\"}},\"createColonyForFrontend(address,string,string,uint8,uint256,string,string)\":{\"details\":\"We expect this function to only be used by the dapp\",\"params\":{\"_colonyName\":\"The label to register (if null, no label is registered)\",\"_decimals\":\"The number of decimal places that 1 user-facing token can be divided up in to (optional) In the case of ETH, and most tokens, this is 18.\",\"_metadata\":\"The metadata associated with the new colony\",\"_name\":\"The name of the token (optional)\",\"_symbol\":\"The short 'ticket' symbol for the token (optional)\",\"_tokenAddress\":\"Address of an ERC20 token to serve as the colony token (optional)\",\"_version\":\"The version of colony to deploy (pass 0 for the current version)\"},\"returns\":{\"colony\":\"colony\",\"token\":\"The address of the token - this may just be the passed _tokenAddress\"}},\"createMetaColony(address)\":{\"params\":{\"_tokenAddress\":\"Address of the CLNY token\"}},\"deployTokenAuthority(address,address,address[])\":{\"details\":\"This is more expensive than deploying a token directly, but is able to be done via a metatransaction\",\"params\":{\"_allowedToTransfer\":\"An array of addresses that are allowed to transfer the token even if it's locked\",\"_colony\":\"The address of the colony in control of the token\",\"_token\":\"The address of the token\"},\"returns\":{\"_tokenAuthority\":\"The address of the newly deployed TokenAuthority\"}},\"deployTokenViaNetwork(string,string,uint8)\":{\"details\":\"This is more expensive than deploying a token directly, but is able to be done via a metatransaction\",\"params\":{\"_decimals\":\"The number of decimal places that 1 user-facing token can be divided up in to In the case of ETH, and most tokens, this is 18.\",\"_name\":\"The name of the token\",\"_symbol\":\"The short 'ticket' symbol for the token\"},\"returns\":{\"_token\":\"The address of the newly deployed token\"}},\"deprecateExtension(bytes32,bool)\":{\"params\":{\"_deprecated\":\"Whether to deprecate the extension or not\",\"_extensionId\":\"keccak256 hash of the extension name, used as an indentifier\"}},\"deprecateSkill(uint256)\":{\"details\":\"This function is deprecated and will be removed in a future release\",\"params\":{\"_skillId\":\"Id of the skill\"}},\"deprecateSkill(uint256,bool)\":{\"params\":{\"_deprecated\":\"Deprecation status\",\"_skillId\":\"Id of the skill\"},\"returns\":{\"_changed\":\"Whether the deprecated state was changed\"}},\"executeMetaTransaction(address,bytes,bytes32,bytes32,uint8)\":{\"params\":{\"payload\":\"The transaction data that will be executed if signature valid\",\"sigR\":\"The 'r' part of the signature\",\"sigS\":\"The 's' part of the signature\",\"sigV\":\"The 'v' part of the signature\",\"userAddress\":\"The address of the user that signed the metatransaction\"}},\"getChildSkillId(uint256,uint256)\":{\"params\":{\"_childSkillIndex\":\"Index of the `skill.children` array to get\",\"_skillId\":\"Id of the skill\"},\"returns\":{\"_childSkillId\":\"Skill Id of the requested child skill\"}},\"getColony(uint256)\":{\"params\":{\"_id\":\"Id of the colony to get\"},\"returns\":{\"_colonyAddress\":\"The colony address, if no colony was found, returns 0x0\"}},\"getColonyCount()\":{\"returns\":{\"_count\":\"The colony count\"}},\"getColonyVersionResolver(uint256)\":{\"params\":{\"_version\":\"The Colony contract version\"},\"returns\":{\"_resolverAddress\":\"Address of the `Resolver` contract\"}},\"getCurrentColonyVersion()\":{\"returns\":{\"_version\":\"The current / latest Colony contract version\"}},\"getENSRegistrar()\":{\"returns\":{\"_address\":\"The address the ENSRegistrar resolves to\"}},\"getExtensionInstallation(bytes32,address)\":{\"params\":{\"_colony\":\"Address of the colony the extension is installed in\",\"_extensionId\":\"keccak256 hash of the extension name, used as an indentifier\"},\"returns\":{\"_installation\":\"The address of the installed extension\"}},\"getExtensionResolver(bytes32,uint256)\":{\"params\":{\"_extensionId\":\"keccak256 hash of the extension name, used as an indentifier\",\"_version\":\"Version of the extension\"},\"returns\":{\"_resolver\":\"The address of the deployed resolver\"}},\"getFeeInverse()\":{\"returns\":{\"_feeInverse\":\"The inverse of the network fee\"}},\"getMetaColony()\":{\"returns\":{\"_colonyAddress\":\"The Meta colony address, if no colony was found, returns 0x0\"}},\"getMetatransactionNonce(address)\":{\"params\":{\"userAddress\":\"The address of the user that will sign the metatransaction\"}},\"getMiningDelegator(address)\":{\"params\":{\"_delegate\":\"The address that wants to mine\"},\"returns\":{\"_delegator\":\"The address they are allowed to mine on behalf of\"}},\"getMiningResolver()\":{\"returns\":{\"miningResolverAddress\":\"The address of the mining cycle resolver currently used by new instances\"}},\"getMiningStake(address)\":{\"params\":{\"_user\":\"The user to query\"},\"returns\":{\"_info\":\"The amount staked and the timestamp the stake was made at.\"}},\"getParentSkillId(uint256,uint256)\":{\"params\":{\"_parentSkillIndex\":\"Index of the `skill.parents` array to get Note that not all parent skill ids are stored here. See `Skill.parents` member for definition on which parents are stored\",\"_skillId\":\"Id of the skill\"},\"returns\":{\"_parentSkillId\":\"Skill Id of the requested parent skill\"}},\"getPayoutWhitelist(address)\":{\"params\":{\"_token\":\"The token being queried\"},\"returns\":{\"_status\":\"Will be `true` if token is whitelisted\"}},\"getProfileDBAddress(bytes32)\":{\"params\":{\"_node\":\"The Namehash of the account being queried.\"},\"returns\":{\"_orbitdb\":\"A string containing the address of the orbit database\"}},\"getReplacementReputationUpdateLogEntry(address,uint256)\":{\"params\":{\"_id\":\"The log entry number we wish to see if there is a replacement for\",\"_reputationMiningCycle\":\"The address of the reputation mining cycle we are asking about\"},\"returns\":{\"_reputationLogEntry\":\"ReputationLogEntry instance with the details of the log entry (if it exists)\"}},\"getReplacementReputationUpdateLogsExist(address)\":{\"params\":{\"_reputationMiningCycle\":\"The reputation mining cycle address we want to know if any entries have been replaced in.\"},\"returns\":{\"_exists\":\"Boolean indicating whether there is a replacement log\"}},\"getReputationMiningCycle(bool)\":{\"params\":{\"_active\":\"Whether the user wants the active or inactive reputation mining cycle\"},\"returns\":{\"_repMiningCycleAddress\":\"address of active or inactive ReputationMiningCycle\"}},\"getReputationMiningCycleReward()\":{\"returns\":{\"_amount\":\"The CLNY awarded per mining cycle to the miners\"}},\"getReputationMiningSkillId()\":{\"returns\":{\"_skillId\":\"The `skillId` of the reputation mining skill.\"}},\"getReputationRootHash()\":{\"returns\":{\"rootHash\":\"The current Reputation Root Hash\"}},\"getReputationRootHashNLeaves()\":{\"details\":\"I cannot see a reason why a user's client would need to call this - only stored to help with some edge cases in reputation mining dispute resolution.\",\"returns\":{\"nLeaves\":\"uint256 The number of leaves in the state tree\"}},\"getReputationRootHashNNodes()\":{\"details\":\"Deprecated, replaced by getReputationRootHashNLeaves which does the same thing but is more accurately named.will be removed in a later version.\",\"returns\":{\"nNodes\":\"uint256 The number of leaves in the state tree\"}},\"getSkill(uint256)\":{\"params\":{\"_skillId\":\"Id of the skill\"},\"returns\":{\"_skill\":\"The Skill struct\"}},\"getSkillCount()\":{\"returns\":{\"_count\":\"The skill count\"}},\"getTokenLocking()\":{\"returns\":{\"_lockingAddress\":\"Token locking contract address\"}},\"initialise(address,uint256)\":{\"details\":\"Only allowed to be run once, by the Network owner before any Colony versions are added.\",\"params\":{\"_resolver\":\"Address of the resolver for Colony contract\",\"_version\":\"Version of the Colony contract the resolver represents\"}},\"initialiseRootLocalSkill()\":{\"returns\":{\"_rootLocalSkillId\":\"The root local skill\"}},\"installExtension(bytes32,uint256)\":{\"params\":{\"_extensionId\":\"keccak256 hash of the extension name, used as an indentifier\",\"_version\":\"Version of the extension to install\"}},\"isColony(address)\":{\"params\":{\"_colony\":\"Address of the colony\"},\"returns\":{\"_addressIsColony\":\"true if specified address is a colony, otherwise false\"}},\"isInRecoveryMode()\":{\"returns\":{\"inRecoveryMode\":\"Return true if recovery mode is active, false otherwise\"}},\"lookupRegisteredENSDomain(address)\":{\"params\":{\"_addr\":\"The address we wish to find the corresponding ENS domain for (if any)\"},\"returns\":{\"_domain\":\"A string containing the colony-based ENS name corresponding to addr\"}},\"multicall(bytes[])\":{\"details\":\"The `msg.value` should not be trusted for any method callable from multicall.\",\"params\":{\"data\":\"The encoded function data for each of the calls to make to this contract\"},\"returns\":{\"results\":\"The results from each of the calls passed in via data\"}},\"numRecoveryRoles()\":{\"returns\":{\"numRoles\":\"Number of users with the recovery role.\"}},\"punishStakers(address[],uint256)\":{\"details\":\"While external, it can only be called successfully by the current ReputationMiningCycle.\",\"params\":{\"_amount\":\"Amount of stake to slash\",\"_stakers\":\"Array of the addresses of stakers to punish\"}},\"registerColonyLabel(string,string)\":{\"params\":{\"_colonyName\":\"The label to register.\",\"_orbitdb\":\"The path of the orbitDB database associated with the colony name\"}},\"registerUserLabel(string,string)\":{\"params\":{\"_orbitdb\":\"The path of the orbitDB database associated with the user profile\",\"_username\":\"The label to register\"}},\"removeRecoveryRole(address)\":{\"params\":{\"_user\":\"User we want to remove recovery role from\"}},\"reward(address,uint256)\":{\"details\":\"Only callable by the active reputation mining cycle\",\"params\":{\"_amount\":\"The amount of CLNY to be awarded\",\"_recipient\":\"The address receiving the award\"}},\"setFeeInverse(uint256)\":{\"params\":{\"_feeInverse\":\"The inverse of the network fee to set\"}},\"setMiningDelegate(address,bool)\":{\"params\":{\"_allowed\":\"Whether they are allowed (true) or not (false) to mine on your behalf\",\"_delegate\":\"The address you're giving or removing permission from\"}},\"setMiningResolver(address)\":{\"params\":{\"_miningResolverAddress\":\"The address of the Resolver contract with the functions correctly wired.\"}},\"setPayoutWhitelist(address,bool)\":{\"params\":{\"_status\":\"The whitelist status\",\"_token\":\"The token being set\"}},\"setRecoveryRole(address)\":{\"params\":{\"_user\":\"User we want to give a recovery role to\"}},\"setReplacementReputationUpdateLogEntry(address,uint256,address,int256,uint256,address,uint128,uint128)\":{\"details\":\"Note that strictly, `_nUpdates` and `_nPreviousUpdates` don't need to be set - they're only used during dispute resolution, which these replacement log entries are never used for. However, for ease of resyncing the client, we have decided to include them for now.\",\"params\":{\"_amount\":\"The amount of reputation being earned / lost\",\"_colony\":\"The address of the colony being updated\",\"_id\":\"The number of the log entry in the reputation mining cycle in question.\",\"_nPreviousUpdates\":\"The number of updates in the log before this entry\",\"_nUpdates\":\"The number of updates the log entry corresponds to\",\"_reputationMiningCycle\":\"The address of the reputation mining cycle that the log was in.\",\"_skillId\":\"The id of the origin skill for the reputation update\",\"_user\":\"The address of the user earning / losing the reputation\"}},\"setReputationMiningCycleReward(uint256)\":{\"details\":\"Can only be called by the MetaColony.\",\"params\":{\"_amount\":\"The CLNY awarded per mining cycle to the miners\"}},\"setReputationRootHash(bytes32,uint256,address[])\":{\"params\":{\"_newHash\":\"The reputation root hash\",\"_newNLeaves\":\"The updated leaves count value\",\"_stakers\":\"Array of users who submitted or backed the hash, being accepted here as the new reputation root hash\"}},\"setStorageSlotRecovery(uint256,bytes32)\":{\"details\":\"certain critical variables are protected from editing in this function\",\"params\":{\"_slot\":\"Uint address of storage slot to be updated\",\"_value\":\"word of data to be set\"}},\"setTokenLocking(address)\":{\"params\":{\"_tokenLockingAddress\":\"Address of the locking contract\"}},\"setupRegistrar(address,bytes32)\":{\"params\":{\"_ens\":\"Address of ENS registrar\",\"_rootNode\":\"Namehash of the root node for the domain\"}},\"stakeForMining(uint256)\":{\"params\":{\"_amount\":\"Amount of CLNY to stake for the purposes of mining\"}},\"startTokenAuction(address)\":{\"params\":{\"_token\":\"Address of the token held by the network to be auctioned\"}},\"supportsInterface(bytes4)\":{\"details\":\"Interface identification is specified in ERC-165.\",\"params\":{\"_interfaceID\":\"The interface identifier, as specified in ERC-165\"},\"returns\":{\"_status\":\"`true` if the contract implements `interfaceID`\"}},\"uninstallExtension(bytes32)\":{\"params\":{\"_extensionId\":\"keccak256 hash of the extension name, used as an indentifier\"}},\"unstakeForMining(uint256)\":{\"params\":{\"_amount\":\"Amount of CLNY staked for mining to unstake\"}},\"updateColonyOrbitDB(string)\":{\"params\":{\"_orbitdb\":\"The path of the orbitDB database to be associated with the colony\"}},\"updateUserOrbitDB(string)\":{\"params\":{\"_orbitdb\":\"The path of the orbitDB database to be associated with the user\"}},\"upgradeExtension(bytes32,uint256)\":{\"params\":{\"_extensionId\":\"keccak256 hash of the extension name, used as an indentifier\",\"_newVersion\":\"Version of the extension to upgrade to (must be one greater than current)\"}}},\"version\":1},\"userdoc\":{\"events\":{\"AuctionCreated(address,address,uint256)\":{\"notice\":\"Event logged when a new auction is created and started\"},\"ColonyAdded(uint256,address,address)\":{\"notice\":\"Event logged when a new colony is added\"},\"ColonyLabelRegistered(address,bytes32)\":{\"notice\":\"Event logged when a \\\"colony.joincolony.eth\\\" label is registered\"},\"ColonyNetworkInitialised(address)\":{\"notice\":\"Event logged when the colony network is intialised. This is only ever emitted once in a network's lifetime\"},\"ColonyVersionAdded(uint256,address)\":{\"notice\":\"Event logged when a new colony contract version is set\"},\"ExtensionAddedToNetwork(bytes32,uint256)\":{\"notice\":\"Event logged when a new extension resolver is added to the network\"},\"ExtensionDeprecated(bytes32,address,bool)\":{\"notice\":\"Event logged when an extension is (un)deprecated in a colony\"},\"ExtensionInstalled(bytes32,address,uint256)\":{\"notice\":\"Event logged when an extension is installed in a colony\"},\"ExtensionUninstalled(bytes32,address)\":{\"notice\":\"Event logged when an extension is uninstalled from a colony\"},\"ExtensionUpgraded(bytes32,address,uint256)\":{\"notice\":\"Event logged when an extension is upgraded in a colony\"},\"MetaColonyCreated(address,address,uint256)\":{\"notice\":\"Event logged when the MetaColony is created\"},\"MiningCycleResolverSet(address)\":{\"notice\":\"Event logged when the Colony Network ReputationMiningCycleResolver contract address is set\"},\"NetworkFeeInverseSet(uint256)\":{\"notice\":\"Event logged when the network fee inverse is set\"},\"RecoveryModeEntered(address)\":{\"notice\":\"Event logged when recovery mode is triggered.\"},\"RecoveryModeExitApproved(address)\":{\"notice\":\"Event logged when someone with recovery mode signals they are happy with the state and wish to leave recovery mode\"},\"RecoveryModeExited(address)\":{\"notice\":\"Event logged when recovery mode is left\"},\"RecoveryRoleSet(address,bool)\":{\"notice\":\"Event logged when user gets/loses the recovery role.\"},\"RecoveryStorageSlotSet(address,uint256,bytes32,bytes32)\":{\"notice\":\"Event logged when in recovery mode a storage slot is set\"},\"RegistrarInitialised(address,bytes32)\":{\"notice\":\"Event logged when the ENS registrar is initialised\"},\"ReputationMiningCycleComplete(bytes32,uint256)\":{\"notice\":\"Event logged when a reputation mining cycle completes\"},\"ReputationMiningInitialised(address)\":{\"notice\":\"Event logged when the Reputation mining process is initialised\"},\"ReputationMiningRewardSet(uint256)\":{\"notice\":\"Event logged when the mining reward is set\"},\"ReputationRootHashSet(bytes32,uint256,address[],uint256)\":{\"notice\":\"Event logged when a new reputation root hash is set by the reputation mining process\"},\"SkillAdded(uint256,uint256)\":{\"notice\":\"Event logged when a new skill is added\"},\"TokenAuthorityDeployed(address)\":{\"notice\":\"Event logged when a token authority is deployed via transaction through the colony network\"},\"TokenDeployed(address)\":{\"notice\":\"Event logged when a token is deployed via transaction through the colony network\"},\"TokenLockingAddressSet(address)\":{\"notice\":\"Event logged when the Colony Network TokenLocking contract address is set\"},\"TokenWhitelisted(address,bool)\":{\"notice\":\"Event logged when the payout whitelist is updated\"},\"UserLabelRegistered(address,bytes32)\":{\"notice\":\"Event logged when a \\\"user.joincolony.eth\\\" label is registered\"}},\"kind\":\"user\",\"methods\":{\"addColonyVersion(uint256,address)\":{\"notice\":\"Adds a new Colony contract version and the address of associated `_resolver` contract. Secured function to authorised members. Allowed to be called by the Meta Colony only.\"},\"addExtensionToNetwork(bytes32,address)\":{\"notice\":\"Add a new extension resolver to the Extensions repository.\"},\"addSkill(uint256)\":{\"notice\":\"Adds a new skill to the global or local skills tree, under skill `_parentSkillId`. Only the Meta Colony is allowed to add a global skill, called via `IColony.addGlobalSkill`. Any colony is allowed to add a local skill and which is associated with a new domain via `IColony.addDomain`.\"},\"addr(bytes32)\":{\"notice\":\"Returns the address the supplied node resolves do, if we are the resolver.\"},\"appendReputationUpdateLog(address,int256,uint256)\":{\"notice\":\"Adds a reputation update entry to log.\"},\"approveExitRecovery()\":{\"notice\":\"Indicate approval to exit recovery mode. Can only be called by user with recovery role.\"},\"burnUnneededRewards(uint256)\":{\"notice\":\"Used to burn tokens that are not needed to pay out rewards (because not every possible defence was made for all submissions)\"},\"calculateMinerWeight(uint256,uint256)\":{\"notice\":\"Calculate raw miner weight in WADs.\"},\"checkNotAdditionalProtectedVariable(uint256)\":{\"notice\":\"Check whether the supplied slot is a protected variable specific to this contract\"},\"claimMiningReward(address)\":{\"notice\":\"Used by a user to claim any mining rewards due to them. This will place them in their balance or pending balance, as appropriate.\"},\"createColony(address)\":{\"notice\":\"Creates a new colony in the network, at version 3\"},\"createColony(address,uint256,string)\":{\"notice\":\"Creates a new colony in the network, with an optional ENS name\"},\"createColony(address,uint256,string,string)\":{\"notice\":\"Creates a new colony in the network, with an optional ENS name\"},\"createColony(address,uint256,string,string,bool)\":{\"notice\":\"Overload of the simpler `createColony` -- creates a new colony in the network with a variety of options, at version 4\"},\"createColonyForFrontend(address,string,string,uint8,uint256,string,string)\":{\"notice\":\"Creates a new colony in the network, possibly with a token and token authority, with an optional ENS name\"},\"createMetaColony(address)\":{\"notice\":\"Create the Meta Colony, same as a normal colony plus the root skill.\"},\"deployTokenAuthority(address,address,address[])\":{\"notice\":\"Called to deploy a token authority\"},\"deployTokenViaNetwork(string,string,uint8)\":{\"notice\":\"Called to deploy a token.\"},\"deprecateExtension(bytes32,bool)\":{\"notice\":\"Set the deprecation of an extension in a colony. Can only be called by a Colony.\"},\"deprecateSkill(uint256)\":{\"notice\":\"Mark a skill as deprecated which stops new tasks and payments from using it.\"},\"deprecateSkill(uint256,bool)\":{\"notice\":\"Set deprecation status for a skill\"},\"enterRecoveryMode()\":{\"notice\":\"Put colony network mining into recovery mode. Can only be called by user with recovery role.\"},\"executeMetaTransaction(address,bytes,bytes32,bytes32,uint8)\":{\"notice\":\"Executes a metatransaction targeting this contract\"},\"exitRecoveryMode()\":{\"notice\":\"Exit recovery mode, can be called by anyone if enough whitelist approvals are given.\"},\"getChildSkillId(uint256,uint256)\":{\"notice\":\"Get the id of the child skill at index `_childSkillIndex` for skill with Id `_skillId`.\"},\"getColony(uint256)\":{\"notice\":\"Get a colony address by its Id in the network.\"},\"getColonyCount()\":{\"notice\":\"Get the number of colonies in the network.\"},\"getColonyVersionResolver(uint256)\":{\"notice\":\"Get the `Resolver` address for Colony contract version `_version`.\"},\"getCurrentColonyVersion()\":{\"notice\":\"Returns the latest Colony contract version. This is the version used to create all new colonies.\"},\"getENSRegistrar()\":{\"notice\":\"Returns the address of the ENSRegistrar for the Network.\"},\"getExtensionInstallation(bytes32,address)\":{\"notice\":\"Get an extension's installation.\"},\"getExtensionResolver(bytes32,uint256)\":{\"notice\":\"Get an extension's resolver.\"},\"getFeeInverse()\":{\"notice\":\"Return 1 / the fee to pay to the network. e.g. if the fee is 1% (or 0.01), return 100.\"},\"getMetaColony()\":{\"notice\":\"Get the Meta Colony address.\"},\"getMetatransactionNonce(address)\":{\"notice\":\"Gets the next metatransaction nonce for user that should be used targeting this contract\"},\"getMiningDelegator(address)\":{\"notice\":\"Called to get the address _delegate is allowed to mine for\"},\"getMiningResolver()\":{\"notice\":\"Get the resolver to be used by new instances of ReputationMiningCycle.\"},\"getMiningStake(address)\":{\"notice\":\"returns how much CLNY _user has staked for the purposes of reputation mining\"},\"getParentSkillId(uint256,uint256)\":{\"notice\":\"Get the id of the parent skill at index `_parentSkillIndex` for skill with Id `_skillId`.\"},\"getPayoutWhitelist(address)\":{\"notice\":\"Get a token's status in the payout whitelist\"},\"getProfileDBAddress(bytes32)\":{\"notice\":\"Retrieve the orbitdb address corresponding to a registered account.\"},\"getReplacementReputationUpdateLogEntry(address,uint256)\":{\"notice\":\"Get a replacement log entry (if set) for the log entry `_id` in the mining cycle that was at the address `_reputationMiningCycle`.\"},\"getReplacementReputationUpdateLogsExist(address)\":{\"notice\":\"Get whether any replacement log entries have been set for the supplied reputation mining cycle.Used by the client to avoid doubling the number of RPC calls when syncing from scratch.\"},\"getReputationMiningCycle(bool)\":{\"notice\":\"Get the address of either the active or inactive reputation mining cycle, based on `active`. The active reputation mining cycle is the one currently under consideration by reputation miners. The inactive reputation cycle is the one with the log that is being appended to.\"},\"getReputationMiningCycleReward()\":{\"notice\":\"Called to get the total per-cycle reputation mining reward.\"},\"getReputationMiningSkillId()\":{\"notice\":\"Get the `skillId` of the reputation mining skill. Only set once the metacolony is set up.\"},\"getReputationRootHash()\":{\"notice\":\"Get the root hash of the current reputation state tree.\"},\"getReputationRootHashNLeaves()\":{\"notice\":\"Get the number of leaves in the current reputation state tree.\"},\"getReputationRootHashNNodes()\":{\"notice\":\"Get the number of leaves in the current reputation state tree.\"},\"getSkill(uint256)\":{\"notice\":\"Get the `nParents` and `nChildren` of skill with id `_skillId`.\"},\"getSkillCount()\":{\"notice\":\"Get the number of skills in the network including both global and local skills.\"},\"getTokenLocking()\":{\"notice\":\"Get token locking contract address.\"},\"initialise(address,uint256)\":{\"notice\":\"Initialises the colony network by setting the first Colony version resolver to `_resolver` address.\"},\"initialiseReputationMining()\":{\"notice\":\"Creates initial inactive reputation mining cycle.\"},\"initialiseRootLocalSkill()\":{\"notice\":\"Initialise the local skills tree for a colony\"},\"installExtension(bytes32,uint256)\":{\"notice\":\"Install an extension in a colony. Can only be called by a Colony.\"},\"isColony(address)\":{\"notice\":\"Check if specific address is a colony created on colony network.\"},\"isInRecoveryMode()\":{\"notice\":\"Is colony network in recovery mode.\"},\"lookupRegisteredENSDomain(address)\":{\"notice\":\"Reverse lookup a username from an address.\"},\"multicall(bytes[])\":{\"notice\":\"Call multiple functions in the current contract and return the data from all of them if they all succeed\"},\"numRecoveryRoles()\":{\"notice\":\"Return number of recovery roles.\"},\"punishStakers(address[],uint256)\":{\"notice\":\"Function called to punish people who staked against a new reputation root hash that turned out to be incorrect.\"},\"registerColonyLabel(string,string)\":{\"notice\":\"Register a \\\"colony.joincolony.eth\\\" label. Can only be called by a Colony.\"},\"registerUserLabel(string,string)\":{\"notice\":\"Register a \\\"user.joincolony.eth\\\" label.\"},\"removeRecoveryRole(address)\":{\"notice\":\"Remove colony recovery role. Can only be called by root role.\"},\"reward(address,uint256)\":{\"notice\":\"Used to track that a user is eligible to claim a reward\"},\"setFeeInverse(uint256)\":{\"notice\":\"Set the colony network fee to pay. e.g. if the fee is 1% (or 0.01), pass 100 as `_feeInverse`.\"},\"setMiningDelegate(address,bool)\":{\"notice\":\"Called to give or remove another address's permission to mine on your behalf\"},\"setMiningResolver(address)\":{\"notice\":\"Set the resolver to be used by new instances of ReputationMiningCycle.\"},\"setPayoutWhitelist(address,bool)\":{\"notice\":\"Set a token's status in the payout whitelist\"},\"setRecoveryRole(address)\":{\"notice\":\"Set new colony recovery role. Can be called by root.\"},\"setReplacementReputationUpdateLogEntry(address,uint256,address,int256,uint256,address,uint128,uint128)\":{\"notice\":\"Set a replacement log entry if we're in recovery mode.\"},\"setReputationMiningCycleReward(uint256)\":{\"notice\":\"Called to set the total per-cycle reputation reward, which will be split between all miners.\"},\"setReputationRootHash(bytes32,uint256,address[])\":{\"notice\":\"Set a new Reputation root hash and starts a new mining cycle. Can only be called by the ReputationMiningCycle contract.\"},\"setStorageSlotRecovery(uint256,bytes32)\":{\"notice\":\"Update value of arbitrary storage variable. Can only be called by user with recovery role.\"},\"setTokenLocking(address)\":{\"notice\":\"Sets the token locking address. This is only set once, and can't be changed afterwards.\"},\"setupRegistrar(address,bytes32)\":{\"notice\":\"Setup registrar with ENS and root node.\"},\"stakeForMining(uint256)\":{\"notice\":\"Stake CLNY to allow the staker to participate in reputation mining.\"},\"startNextCycle()\":{\"notice\":\"Starts a new Reputation Mining cycle. Explicitly called only the first time, subsequently called from within `setReputationRootHash`.\"},\"startTokenAuction(address)\":{\"notice\":\"Create and start a new `DutchAuction` for the entire amount of `_token` owned by the Colony Network.\"},\"supportsInterface(bytes4)\":{\"notice\":\"Query if a contract implements an interface\"},\"uninstallExtension(bytes32)\":{\"notice\":\"Uninstall an extension in a colony. Can only be called by a Colony.\"},\"unstakeForMining(uint256)\":{\"notice\":\"Unstake CLNY currently staked for reputation mining.\"},\"updateColonyOrbitDB(string)\":{\"notice\":\"Update a colony's orbitdb address. Can only be called by a colony with a registered subdomain\"},\"updateUserOrbitDB(string)\":{\"notice\":\"Update a user's orbitdb address. Can only be called by a user with a registered subdomain\"},\"upgradeExtension(bytes32,uint256)\":{\"notice\":\"Upgrade an extension in a colony. Can only be called by a Colony.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"project:/contracts/colonyNetwork/IColonyNetwork.sol\":\"IColonyNetwork\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"project:/contracts/colonyNetwork/ColonyNetworkDataTypes.sol\":{\"keccak256\":\"0x2e2ed10b7cd2cf2de2c9431477d2f88c1682e97a4b93924eb5a9b432515a9c49\",\"urls\":[\"bzz-raw://b000d49737b07dbd1dc568c0161e98ae52077300bf980dcd1c5d6e1951c67c53\",\"dweb:/ipfs/QmPZSy1rQ3QaSjbbRsFmS59E1iJsM1or9JWB4EP8oa59b1\"]},\"project:/contracts/colonyNetwork/IColonyNetwork.sol\":{\"keccak256\":\"0x1faefaa2c7aae7845a1af6356116bf3368e5dd10d0e77ea9c753ed48baddd3ba\",\"urls\":[\"bzz-raw://77d43abce40b2d03f652d67a363ea96d7e94a9e4efd643bfc416885e708640f3\",\"dweb:/ipfs/QmX2h9fKG1jeGHbSRRKiQX8wwD9KPJZgPKiVjjxBWLpiit\"]},\"project:/contracts/common/ContractRecoveryDataTypes.sol\":{\"keccak256\":\"0x49bde7b21cc15fb7e2c3a19389d0d3997e95d676aec3aad17e1e34e6b8ac8e52\",\"urls\":[\"bzz-raw://0f7ee2da03ca688614df9cdb43a5d401aeeb30a769a70fe2f494d87163135fae\",\"dweb:/ipfs/QmcbxRHhjf2PRNmcEujFa6i9JTpcE2srsuatsbAnJA1ncs\"]},\"project:/contracts/common/IBasicMetaTransaction.sol\":{\"keccak256\":\"0xcc4773c97fabcb33c589ee8baf4e4d689fd2fd926237858f0d3b8ae436152ff7\",\"urls\":[\"bzz-raw://e6c1d3c42ed5cd05772ff273feae1dd8747989a33b786aae95eb348a7234ba55\",\"dweb:/ipfs/QmQhytkFVayDCLTkLmrJJKA8itE5zMsJXNA4JNG86wNS4p\"]},\"project:/contracts/common/IMulticall.sol\":{\"keccak256\":\"0x7e8c4a534e5e1d8624ffdf938efb0aa86cb16149f685e724166f3d4d60391fce\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://22b38dcfb4ef99545bde9d31fd6f36b69d7f4deea29e5114059194a84e5af505\",\"dweb:/ipfs/QmNRgEekDp6JW1a4SrKJJrCXpzr5JYM7JaD97KE7xyyPVv\"]},\"project:/contracts/common/IRecovery.sol\":{\"keccak256\":\"0x66afd695a100b0dd3566d8d10d0685c312b7af79da64eca0963a19071a770ec0\",\"urls\":[\"bzz-raw://79f620ad786840f72dbf5673c80fc36cde48c37d47cf74ece0d6053ed5ad9ec3\",\"dweb:/ipfs/QmXFKUDfjjpYuPkzEcduoA71Pg1x1zVQ26srXKyzcv2tCr\"]}},\"version\":1}",
  "bytecode": "0x",
  "deployedBytecode": "0x",
  "immutableReferences": {},
  "generatedSources": [],
  "deployedGeneratedSources": [],
  "sourceMap": "",
  "deployedSourceMap": "",
  "source": "/*\n  This file is part of The Colony Network.\n\n  The Colony Network is free software: you can redistribute it and/or modify\n  it under the terms of the GNU General Public License as published by\n  the Free Software Foundation, either version 3 of the License, or\n  (at your option) any later version.\n\n  The Colony Network is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n  GNU General Public License for more details.\n\n  You should have received a copy of the GNU General Public License\n  along with The Colony Network. If not, see <http://www.gnu.org/licenses/>.\n*/\n\npragma solidity >=0.8.20; // ignore-swc-103\npragma experimental \"ABIEncoderV2\";\n\nimport \"./../common/IRecovery.sol\";\nimport \"./../common/IBasicMetaTransaction.sol\";\nimport \"./../common/IMulticall.sol\";\n\nimport \"./ColonyNetworkDataTypes.sol\";\n\n\ninterface IColonyNetwork is ColonyNetworkDataTypes, IRecovery, IBasicMetaTransaction, IMulticall {\n\n  /// @notice Query if a contract implements an interface\n  /// @param _interfaceID The interface identifier, as specified in ERC-165\n  /// @dev Interface identification is specified in ERC-165.\n  /// @return _status `true` if the contract implements `interfaceID`\n  function supportsInterface(bytes4 _interfaceID) external pure returns (bool _status);\n\n  /// @notice Set a replacement log entry if we're in recovery mode.\n  /// @param _reputationMiningCycle The address of the reputation mining cycle that the log was in.\n  /// @param _id The number of the log entry in the reputation mining cycle in question.\n  /// @param _user The address of the user earning / losing the reputation\n  /// @param _amount The amount of reputation being earned / lost\n  /// @param _skillId The id of the origin skill for the reputation update\n  /// @param _colony The address of the colony being updated\n  /// @param _nUpdates The number of updates the log entry corresponds to\n  /// @param _nPreviousUpdates The number of updates in the log before this entry\n  /// @dev Note that strictly, `_nUpdates` and `_nPreviousUpdates` don't need to be set - they're only used during\n  /// dispute resolution, which these replacement log entries are never used for. However, for ease of resyncing\n  /// the client, we have decided to include them for now.\n  function setReplacementReputationUpdateLogEntry(\n    address _reputationMiningCycle,\n    uint256 _id,\n    address _user,\n    int _amount,\n    uint256 _skillId,\n    address _colony,\n    uint128 _nUpdates,\n    uint128 _nPreviousUpdates\n    ) external;\n\n  /// @notice Get a replacement log entry (if set) for the log entry `_id` in the mining cycle that was at the address `_reputationMiningCycle`.\n  /// @param _reputationMiningCycle The address of the reputation mining cycle we are asking about\n  /// @param _id The log entry number we wish to see if there is a replacement for\n  /// @return _reputationLogEntry ReputationLogEntry instance with the details of the log entry (if it exists)\n  function getReplacementReputationUpdateLogEntry(address _reputationMiningCycle, uint256 _id) external view returns\n    (ReputationLogEntry memory _reputationLogEntry);\n\n  /// @notice Get whether any replacement log entries have been set for the supplied reputation mining cycle.\n  /// @notice Used by the client to avoid doubling the number of RPC calls when syncing from scratch.\n  /// @param _reputationMiningCycle The reputation mining cycle address we want to know if any entries have been replaced in.\n  /// @return _exists Boolean indicating whether there is a replacement log\n  function getReplacementReputationUpdateLogsExist(address _reputationMiningCycle) external view returns (bool _exists);\n\n  /// @notice Get the Meta Colony address.\n  /// @return _colonyAddress The Meta colony address, if no colony was found, returns 0x0\n  function getMetaColony() external view returns (address payable _colonyAddress);\n\n  /// @notice Get the number of colonies in the network.\n  /// @return _count The colony count\n  function getColonyCount() external view returns (uint256 _count);\n\n  /// @notice Check if specific address is a colony created on colony network.\n  /// @param _colony Address of the colony\n  /// @return _addressIsColony true if specified address is a colony, otherwise false\n  function isColony(address _colony) external view returns (bool _addressIsColony);\n\n  /// @notice Adds a new skill to the global or local skills tree, under skill `_parentSkillId`.\n  /// Only the Meta Colony is allowed to add a global skill, called via `IColony.addGlobalSkill`.\n  /// Any colony is allowed to add a local skill and which is associated with a new domain via `IColony.addDomain`.\n  /// @dev Errors if the parent skill does not exist or if this is called by an unauthorised sender.\n  /// @param _parentSkillId Id of the skill under which the new skill will be added. If 0, a global skill is added with no parent.\n  /// @return _skillId Id of the added skill\n  function addSkill(uint256 _parentSkillId) external returns (uint256 _skillId);\n\n  /// @notice Get the `nParents` and `nChildren` of skill with id `_skillId`.\n  /// @param _skillId Id of the skill\n  /// @return _skill The Skill struct\n  function getSkill(uint256 _skillId) external view returns (Skill memory _skill);\n\n  /// @notice Set deprecation status for a skill\n  /// @param _skillId Id of the skill\n  /// @param _deprecated Deprecation status\n  /// @return _changed Whether the deprecated state was changed\n  function deprecateSkill(uint256 _skillId, bool _deprecated) external returns (bool _changed);\n\n  /// @notice Mark a skill as deprecated which stops new tasks and payments from using it.\n  /// @dev This function is deprecated and will be removed in a future release\n  /// @param _skillId Id of the skill\n  function deprecateSkill(uint256 _skillId) external;\n\n  /// @notice Initialise the local skills tree for a colony\n  /// @return _rootLocalSkillId The root local skill\n  function initialiseRootLocalSkill() external returns (uint256 _rootLocalSkillId);\n\n  /// @notice Adds a reputation update entry to log.\n  /// @dev Errors if it is called by anyone but a colony or if skill with id `_skillId` does not exist or.\n  /// @param _user The address of the user for the reputation update\n  /// @param _amount The amount of reputation change for the update, this can be a negative as well as a positive value\n  /// @param _skillId The skill for the reputation update\n  function appendReputationUpdateLog(address _user, int256 _amount, uint256 _skillId) external;\n\n  /// @notice Get the number of skills in the network including both global and local skills.\n  /// @return _count The skill count\n  function getSkillCount() external view returns (uint256 _count);\n\n  /// @notice Get the `skillId` of the reputation mining skill. Only set once the metacolony is set up.\n  /// @return _skillId The `skillId` of the reputation mining skill.\n  function getReputationMiningSkillId() external view returns (uint256 _skillId);\n\n  /// @notice Sets the token locking address.\n  /// This is only set once, and can't be changed afterwards.\n  /// @param _tokenLockingAddress Address of the locking contract\n  function setTokenLocking(address _tokenLockingAddress) external;\n\n  /// @notice Get token locking contract address.\n  /// @return _lockingAddress Token locking contract address\n  function getTokenLocking() external view returns (address _lockingAddress);\n\n  /// @notice Create the Meta Colony, same as a normal colony plus the root skill.\n  /// @param _tokenAddress Address of the CLNY token\n  function createMetaColony(address _tokenAddress) external;\n\n  /// @notice Creates a new colony in the network, at version 3\n  /// @dev This is now deprecated and will be removed in a future version\n  /// @dev For the colony to mint tokens, token ownership must be transferred to the new colony\n  /// @param _tokenAddress Address of an ERC20 token to serve as the colony token.\n  /// @return _colonyAddress Address of the newly created colony\n  function createColony(address _tokenAddress) external returns (address _colonyAddress);\n\n  /// @notice Overload of the simpler `createColony` -- creates a new colony in the network with a variety of options, at version 4\n  /// @dev This is now deprecated and will be removed in a future version\n  /// @dev For the colony to mint tokens, token ownership must be transferred to the new colony\n  /// @param _tokenAddress Address of an ERC20 token to serve as the colony token\n  /// @param _version The version of colony to deploy (pass 0 for the current version)\n  /// @param _colonyName The label to register (if null, no label is registered)\n  /// @param _orbitdb DEPRECATED Currently a no-op\n  /// @param _useExtensionManager DEPRECATED Currently a no-op\n  /// @return _colonyAddress Address of the newly created colony\n  function createColony(address _tokenAddress, uint256 _version, string memory _colonyName, string memory _orbitdb, bool _useExtensionManager)\n    external returns (address _colonyAddress);\n\n  /// @notice Creates a new colony in the network, with an optional ENS name\n  /// @dev For the colony to mint tokens, token ownership must be transferred to the new colony\n  /// @param _tokenAddress Address of an ERC20 token to serve as the colony token\n  /// @param _version The version of colony to deploy (pass 0 for the current version)\n  /// @param _colonyName The label to register (if null, no label is registered)\n  /// @return _colonyAddress Address of the newly created colony\n  function createColony(address _tokenAddress, uint256 _version, string memory _colonyName)\n    external returns (address _colonyAddress);\n\n  /// @notice Creates a new colony in the network, with an optional ENS name\n  /// @dev For the colony to mint tokens, token ownership must be transferred to the new colony\n  /// @param _tokenAddress Address of an ERC20 token to serve as the colony token\n  /// @param _version The version of colony to deploy (pass 0 for the current version)\n  /// @param _colonyName The label to register (if null, no label is registered)\n  /// @param _metadata The metadata associated with the new colony\n  /// @return _colonyAddress Address of the newly created colony\n  /// @dev We expect this function to only be used by the dapp\n  function createColony(address _tokenAddress, uint256 _version, string memory _colonyName, string memory _metadata)\n    external returns (address _colonyAddress);\n\n  /// @notice Creates a new colony in the network, possibly with a token and token authority,\n  /// with an optional ENS name\n  /// @param _tokenAddress Address of an ERC20 token to serve as the colony token (optional)\n  /// @param _name The name of the token (optional)\n  /// @param _symbol The short 'ticket' symbol for the token (optional)\n  /// @param _decimals The number of decimal places that 1 user-facing token can be divided up in to (optional)\n  /// In the case of ETH, and most tokens, this is 18.\n  /// @return token The address of the token - this may just be the passed _tokenAddress\n  /// @return colony\n  /// @param _version The version of colony to deploy (pass 0 for the current version)\n  /// @param _colonyName The label to register (if null, no label is registered)\n  /// @param _metadata The metadata associated with the new colony\n  /// @dev We expect this function to only be used by the dapp\n  function createColonyForFrontend(\n    address _tokenAddress,\n    string memory _name,\n    string memory _symbol,\n    uint8 _decimals,\n    uint256 _version,\n    string memory _colonyName,\n    string memory _metadata\n  )\n    external returns (address token, address colony);\n\n  /// @notice Adds a new Colony contract version and the address of associated `_resolver` contract. Secured function to authorised members.\n  /// Allowed to be called by the Meta Colony only.\n  /// @param _version The new Colony contract version\n  /// @param _resolver Address of the `Resolver` contract which will be used with the underlying `EtherRouter` contract\n  function addColonyVersion(uint256 _version, address _resolver) external;\n\n  /// @notice Initialises the colony network by setting the first Colony version resolver to `_resolver` address.\n  /// @dev Only allowed to be run once, by the Network owner before any Colony versions are added.\n  /// @param _resolver Address of the resolver for Colony contract\n  /// @param _version Version of the Colony contract the resolver represents\n  function initialise(address _resolver, uint256 _version) external;\n\n  /// @notice Get a colony address by its Id in the network.\n  /// @param _id Id of the colony to get\n  /// @return _colonyAddress The colony address, if no colony was found, returns 0x0\n  function getColony(uint256 _id) external view returns (address _colonyAddress);\n\n  /// @notice Returns the latest Colony contract version. This is the version used to create all new colonies.\n  /// @return _version The current / latest Colony contract version\n  function getCurrentColonyVersion() external view returns (uint256 _version);\n\n  /// @notice Get the id of the parent skill at index `_parentSkillIndex` for skill with Id `_skillId`.\n  /// @param _skillId Id of the skill\n  /// @param _parentSkillIndex Index of the `skill.parents` array to get\n  /// Note that not all parent skill ids are stored here. See `Skill.parents` member for definition on which parents are stored\n  /// @return _parentSkillId Skill Id of the requested parent skill\n  function getParentSkillId(uint256 _skillId, uint256 _parentSkillIndex) external view returns (uint256 _parentSkillId);\n\n  /// @notice Get the id of the child skill at index `_childSkillIndex` for skill with Id `_skillId`.\n  /// @param _skillId Id of the skill\n  /// @param _childSkillIndex Index of the `skill.children` array to get\n  /// @return _childSkillId Skill Id of the requested child skill\n  function getChildSkillId(uint256 _skillId, uint256 _childSkillIndex) external view returns (uint256 _childSkillId);\n\n  /// @notice Get the address of either the active or inactive reputation mining cycle, based on `active`. The active reputation mining cycle\n  /// is the one currently under consideration by reputation miners. The inactive reputation cycle is the one with the log that is being appended to.\n  /// @param _active Whether the user wants the active or inactive reputation mining cycle\n  /// @return _repMiningCycleAddress address of active or inactive ReputationMiningCycle\n  function getReputationMiningCycle(bool _active) external view returns (address _repMiningCycleAddress);\n\n  /// @notice Calculate raw miner weight in WADs.\n  /// @param _timeStaked Amount of time (in seconds) that the miner has staked their CLNY\n  /// @param _submissonIndex Index of reputation hash submission (between 0 and 11)\n  /// @return _minerWeight The weight of miner reward\n  function calculateMinerWeight(uint256 _timeStaked, uint256 _submissonIndex) external pure returns (uint256 _minerWeight);\n\n  /// @notice Get the `Resolver` address for Colony contract version `_version`.\n  /// @param _version The Colony contract version\n  /// @return _resolverAddress Address of the `Resolver` contract\n  function getColonyVersionResolver(uint256 _version) external view returns (address _resolverAddress);\n\n  /// @notice Set a new Reputation root hash and starts a new mining cycle. Can only be called by the ReputationMiningCycle contract.\n  /// @param _newHash The reputation root hash\n  /// @param _newNLeaves The updated leaves count value\n  /// @param _stakers Array of users who submitted or backed the hash, being accepted here as the new reputation root hash\n  function setReputationRootHash(bytes32 _newHash, uint256 _newNLeaves, address[] memory _stakers) external;\n\n  /// @notice Starts a new Reputation Mining cycle. Explicitly called only the first time,\n  /// subsequently called from within `setReputationRootHash`.\n  function startNextCycle() external;\n\n  /// @notice Creates initial inactive reputation mining cycle.\n  function initialiseReputationMining() external;\n\n  /// @notice Get the root hash of the current reputation state tree.\n  /// @return rootHash The current Reputation Root Hash\n  function getReputationRootHash() external view returns (bytes32 rootHash);\n\n  /// @notice Get the number of leaves in the current reputation state tree.\n  /// @dev I cannot see a reason why a user's client would need to call this - only stored to help with some edge cases in reputation mining dispute resolution.\n  /// @return nLeaves uint256 The number of leaves in the state tree\n  function getReputationRootHashNLeaves() external view returns (uint256 nLeaves);\n\n  /// @notice Get the number of leaves in the current reputation state tree.\n  /// @dev Deprecated, replaced by getReputationRootHashNLeaves which does the same thing but is more accurately named.\n  /// @dev will be removed in a later version.\n  /// @return nNodes uint256 The number of leaves in the state tree\n  function getReputationRootHashNNodes() external view returns (uint256 nNodes);\n\n  /// @notice Create and start a new `DutchAuction` for the entire amount of `_token` owned by the Colony Network.\n  /// @param _token Address of the token held by the network to be auctioned\n  function startTokenAuction(address _token) external;\n\n  /// @notice Setup registrar with ENS and root node.\n  /// @param _ens Address of ENS registrar\n  /// @param _rootNode Namehash of the root node for the domain\n  function setupRegistrar(address _ens, bytes32 _rootNode) external;\n\n  /// @notice Register a \"user.joincolony.eth\" label.\n  /// @param _username The label to register\n  /// @param _orbitdb The path of the orbitDB database associated with the user profile\n  function registerUserLabel(string memory _username, string memory _orbitdb) external;\n\n  /// @notice Register a \"colony.joincolony.eth\" label. Can only be called by a Colony.\n  /// @param _colonyName The label to register.\n  /// @param _orbitdb The path of the orbitDB database associated with the colony name\n  function registerColonyLabel(string memory _colonyName, string memory _orbitdb) external;\n\n  /// @notice Update a colony's orbitdb address. Can only be called by a colony with a registered subdomain\n  /// @param _orbitdb The path of the orbitDB database to be associated with the colony\n  function updateColonyOrbitDB(string memory _orbitdb) external;\n\n  /// @notice Update a user's orbitdb address. Can only be called by a user with a registered subdomain\n  /// @param _orbitdb The path of the orbitDB database to be associated with the user\n  function updateUserOrbitDB(string memory _orbitdb) external;\n\n  /// @notice Retrieve the orbitdb address corresponding to a registered account.\n  /// @param _node The Namehash of the account being queried.\n  /// @return _orbitdb A string containing the address of the orbit database\n  function getProfileDBAddress(bytes32 _node) external view returns (string memory _orbitdb);\n\n  /// @notice Reverse lookup a username from an address.\n  /// @param _addr The address we wish to find the corresponding ENS domain for (if any)\n  /// @return _domain A string containing the colony-based ENS name corresponding to addr\n  function lookupRegisteredENSDomain(address _addr) external view returns(string memory _domain);\n\n  /// @notice Returns the address the supplied node resolves do, if we are the resolver.\n  /// @param _node The namehash of the ENS address being requested\n  /// @return _address The address the supplied node resolves to\n  function addr(bytes32 _node) external view returns (address _address);\n\n  /// @notice Returns the address of the ENSRegistrar for the Network.\n  /// @return _address The address the ENSRegistrar resolves to\n  function getENSRegistrar() external view returns (address _address);\n\n  /// @notice Set the resolver to be used by new instances of ReputationMiningCycle.\n  /// @param _miningResolverAddress The address of the Resolver contract with the functions correctly wired.\n  function setMiningResolver(address _miningResolverAddress) external;\n\n  /// @notice Get the resolver to be used by new instances of ReputationMiningCycle.\n  /// @return miningResolverAddress The address of the mining cycle resolver currently used by new instances\n  function getMiningResolver() external view returns (address miningResolverAddress);\n\n  /// @notice Add a new extension resolver to the Extensions repository.\n  /// @dev Can only be called by the MetaColony.\n  /// @dev The extension version is queried from the resolver itself.\n  /// @param _extensionId keccak256 hash of the extension name, used as an indentifier\n  /// @param _resolver The deployed resolver containing the extension contract logic\n  function addExtensionToNetwork(bytes32 _extensionId, address _resolver) external;\n\n  /// @notice Install an extension in a colony. Can only be called by a Colony.\n  /// @param _extensionId keccak256 hash of the extension name, used as an indentifier\n  /// @param _version Version of the extension to install\n  function installExtension(bytes32 _extensionId, uint256 _version) external;\n\n  /// @notice Upgrade an extension in a colony. Can only be called by a Colony.\n  /// @param _extensionId keccak256 hash of the extension name, used as an indentifier\n  /// @param _newVersion Version of the extension to upgrade to (must be one greater than current)\n  function upgradeExtension(bytes32 _extensionId, uint256 _newVersion) external;\n\n  /// @notice Set the deprecation of an extension in a colony. Can only be called by a Colony.\n  /// @param _extensionId keccak256 hash of the extension name, used as an indentifier\n  /// @param _deprecated Whether to deprecate the extension or not\n  function deprecateExtension(bytes32 _extensionId, bool _deprecated) external;\n\n  /// @notice Uninstall an extension in a colony. Can only be called by a Colony.\n  /// @param _extensionId keccak256 hash of the extension name, used as an indentifier\n  function uninstallExtension(bytes32 _extensionId) external;\n\n  /// @notice Get an extension's resolver.\n  /// @param _extensionId keccak256 hash of the extension name, used as an indentifier\n  /// @param _version Version of the extension\n  /// @return _resolver The address of the deployed resolver\n  function getExtensionResolver(bytes32 _extensionId, uint256 _version) external view returns (address _resolver);\n\n  /// @notice Get an extension's installation.\n  /// @param _extensionId keccak256 hash of the extension name, used as an indentifier\n  /// @param _colony Address of the colony the extension is installed in\n  /// @return _installation The address of the installed extension\n  function getExtensionInstallation(bytes32 _extensionId, address _colony) external view returns (address _installation);\n\n  /// @notice Return 1 / the fee to pay to the network. e.g. if the fee is 1% (or 0.01), return 100.\n  /// @return _feeInverse The inverse of the network fee\n  function getFeeInverse() external view returns (uint256 _feeInverse);\n\n  /// @notice Set the colony network fee to pay. e.g. if the fee is 1% (or 0.01), pass 100 as `_feeInverse`.\n  /// @param _feeInverse The inverse of the network fee to set\n  function setFeeInverse(uint256 _feeInverse) external;\n\n  /// @notice Get a token's status in the payout whitelist\n  /// @param _token The token being queried\n  /// @return _status Will be `true` if token is whitelisted\n  function getPayoutWhitelist(address _token) external view returns (bool _status);\n\n  /// @notice Set a token's status in the payout whitelist\n  /// @param _token The token being set\n  /// @param _status The whitelist status\n  function setPayoutWhitelist(address _token, bool _status) external;\n\n  /// @notice Function called to punish people who staked against a new reputation root hash that turned out to be incorrect.\n  /// @dev While external, it can only be called successfully by the current ReputationMiningCycle.\n  /// @param _stakers Array of the addresses of stakers to punish\n  /// @param _amount Amount of stake to slash\n  function punishStakers(address[] memory _stakers, uint256 _amount) external;\n\n  /// @notice Stake CLNY to allow the staker to participate in reputation mining.\n  /// @param _amount Amount of CLNY to stake for the purposes of mining\n  function stakeForMining(uint256 _amount) external;\n\n  /// @notice Unstake CLNY currently staked for reputation mining.\n  /// @param _amount Amount of CLNY staked for mining to unstake\n  function unstakeForMining(uint256 _amount) external;\n\n  /// @notice returns how much CLNY _user has staked for the purposes of reputation mining\n  /// @param _user The user to query\n  /// @return _info The amount staked and the timestamp the stake was made at.\n  function getMiningStake(address _user) external view returns (MiningStake memory _info);\n\n  /// @notice Used to track that a user is eligible to claim a reward\n  /// @dev Only callable by the active reputation mining cycle\n  /// @param _recipient The address receiving the award\n  /// @param _amount The amount of CLNY to be awarded\n  function reward(address _recipient, uint256 _amount) external;\n\n  /// @notice Used to burn tokens that are not needed to pay out rewards (because not every possible defence was made for all submissions)\n  /// @dev Only callable by the active reputation mining cycle\n  /// @param _amount The amount of CLNY to burn\n  function burnUnneededRewards(uint256 _amount) external;\n\n  /// @notice Used by a user to claim any mining rewards due to them. This will place them in their balance or pending balance, as appropriate.\n  /// @dev Can be called by anyone, not just _recipient\n  /// @param _recipient The user whose rewards to claim\n  function claimMiningReward(address _recipient) external;\n\n  /// @notice Called to set the total per-cycle reputation reward, which will be split between all miners.\n  /// @dev Can only be called by the MetaColony.\n  /// @param _amount The CLNY awarded per mining cycle to the miners\n  function setReputationMiningCycleReward(uint256 _amount) external;\n\n  /// @notice Called to get the total per-cycle reputation mining reward.\n  /// @return _amount The CLNY awarded per mining cycle to the miners\n  function getReputationMiningCycleReward() external view returns (uint256 _amount);\n\n  /// @notice Called to deploy a token.\n  /// @dev This is more expensive than deploying a token directly, but is able to be done via\n  /// a metatransaction\n  /// @param _name The name of the token\n  /// @param _symbol The short 'ticket' symbol for the token\n  /// @param _decimals The number of decimal places that 1 user-facing token can be divided up in to\n  /// In the case of ETH, and most tokens, this is 18.\n  /// @return _token The address of the newly deployed token\n  function deployTokenViaNetwork(string memory _name, string memory _symbol, uint8 _decimals) external returns (address _token);\n\n  /// @notice Called to deploy a token authority\n  /// @dev This is more expensive than deploying a token directly, but is able to be done via\n  /// a metatransaction\n  /// @param _token The address of the token\n  /// @param _colony The address of the colony in control of the token\n  /// @param _allowedToTransfer An array of addresses that are allowed to transfer the token even if it's locked\n  /// @return _tokenAuthority The address of the newly deployed TokenAuthority\n  function deployTokenAuthority(address _token, address _colony, address[] memory _allowedToTransfer) external returns (address _tokenAuthority);\n\n  /// @notice Called to give or remove another address's permission to mine on your behalf\n  /// @param _delegate The address you're giving or removing permission from\n  /// @param _allowed Whether they are allowed (true) or not (false) to mine on your behalf\n  function setMiningDelegate(address _delegate, bool _allowed) external;\n\n  /// @notice Called to get the address _delegate is allowed to mine for\n  /// @param _delegate The address that wants to mine\n  /// @return _delegator The address they are allowed to mine on behalf of\n  function getMiningDelegator(address _delegate) external view returns (address _delegator);\n\n}\n",
  "sourcePath": "/home/alex/colony/subgraph/colonyNetwork/contracts/colonyNetwork/IColonyNetwork.sol",
  "ast": {
    "absolutePath": "project:/contracts/colonyNetwork/IColonyNetwork.sol",
    "exportedSymbols": {
      "ColonyNetworkDataTypes": [
        15633
      ],
      "ContractRecoveryDataTypes": [
        20052
      ],
      "IBasicMetaTransaction": [
        20470
      ],
      "IColonyNetwork": [
        19314
      ],
      "IMulticall": [
        20506
      ],
      "IRecovery": [
        20563
      ]
    },
    "id": 19315,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 18696,
        "literals": [
          "solidity",
          ">=",
          "0.8",
          ".20"
        ],
        "nodeType": "PragmaDirective",
        "src": "700:25:24"
      },
      {
        "id": 18697,
        "literals": [
          "experimental",
          "ABIEncoderV2"
        ],
        "nodeType": "PragmaDirective",
        "src": "744:35:24"
      },
      {
        "absolutePath": "project:/contracts/common/IRecovery.sol",
        "file": "./../common/IRecovery.sol",
        "id": 18698,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 19315,
        "sourceUnit": 20564,
        "src": "781:35:24",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "project:/contracts/common/IBasicMetaTransaction.sol",
        "file": "./../common/IBasicMetaTransaction.sol",
        "id": 18699,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 19315,
        "sourceUnit": 20471,
        "src": "817:47:24",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "project:/contracts/common/IMulticall.sol",
        "file": "./../common/IMulticall.sol",
        "id": 18700,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 19315,
        "sourceUnit": 20507,
        "src": "865:36:24",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "project:/contracts/colonyNetwork/ColonyNetworkDataTypes.sol",
        "file": "./ColonyNetworkDataTypes.sol",
        "id": 18701,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 19315,
        "sourceUnit": 15634,
        "src": "903:38:24",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 18702,
              "name": "ColonyNetworkDataTypes",
              "nameLocations": [
                "972:22:24"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 15633,
              "src": "972:22:24"
            },
            "id": 18703,
            "nodeType": "InheritanceSpecifier",
            "src": "972:22:24"
          },
          {
            "baseName": {
              "id": 18704,
              "name": "IRecovery",
              "nameLocations": [
                "996:9:24"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 20563,
              "src": "996:9:24"
            },
            "id": 18705,
            "nodeType": "InheritanceSpecifier",
            "src": "996:9:24"
          },
          {
            "baseName": {
              "id": 18706,
              "name": "IBasicMetaTransaction",
              "nameLocations": [
                "1007:21:24"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 20470,
              "src": "1007:21:24"
            },
            "id": 18707,
            "nodeType": "InheritanceSpecifier",
            "src": "1007:21:24"
          },
          {
            "baseName": {
              "id": 18708,
              "name": "IMulticall",
              "nameLocations": [
                "1030:10:24"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 20506,
              "src": "1030:10:24"
            },
            "id": 18709,
            "nodeType": "InheritanceSpecifier",
            "src": "1030:10:24"
          }
        ],
        "canonicalName": "IColonyNetwork",
        "contractDependencies": [],
        "contractKind": "interface",
        "fullyImplemented": false,
        "id": 19314,
        "linearizedBaseContracts": [
          19314,
          20506,
          20470,
          20563,
          20052,
          15633
        ],
        "name": "IColonyNetwork",
        "nameLocation": "954:14:24",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "documentation": {
              "id": 18710,
              "nodeType": "StructuredDocumentation",
              "src": "1046:262:24",
              "text": "@notice Query if a contract implements an interface\n @param _interfaceID The interface identifier, as specified in ERC-165\n @dev Interface identification is specified in ERC-165.\n @return _status `true` if the contract implements `interfaceID`"
            },
            "functionSelector": "01ffc9a7",
            "id": 18717,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "supportsInterface",
            "nameLocation": "1320:17:24",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 18713,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 18712,
                  "mutability": "mutable",
                  "name": "_interfaceID",
                  "nameLocation": "1345:12:24",
                  "nodeType": "VariableDeclaration",
                  "scope": 18717,
                  "src": "1338:19:24",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes4",
                    "typeString": "bytes4"
                  },
                  "typeName": {
                    "id": 18711,
                    "name": "bytes4",
                    "nodeType": "ElementaryTypeName",
                    "src": "1338:6:24",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes4",
                      "typeString": "bytes4"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1337:21:24"
            },
            "returnParameters": {
              "id": 18716,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 18715,
                  "mutability": "mutable",
                  "name": "_status",
                  "nameLocation": "1387:7:24",
                  "nodeType": "VariableDeclaration",
                  "scope": 18717,
                  "src": "1382:12:24",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 18714,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "1382:4:24",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1381:14:24"
            },
            "scope": 19314,
            "src": "1311:85:24",
            "stateMutability": "pure",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 18718,
              "nodeType": "StructuredDocumentation",
              "src": "1400:975:24",
              "text": "@notice Set a replacement log entry if we're in recovery mode.\n @param _reputationMiningCycle The address of the reputation mining cycle that the log was in.\n @param _id The number of the log entry in the reputation mining cycle in question.\n @param _user The address of the user earning / losing the reputation\n @param _amount The amount of reputation being earned / lost\n @param _skillId The id of the origin skill for the reputation update\n @param _colony The address of the colony being updated\n @param _nUpdates The number of updates the log entry corresponds to\n @param _nPreviousUpdates The number of updates in the log before this entry\n @dev Note that strictly, `_nUpdates` and `_nPreviousUpdates` don't need to be set - they're only used during\n dispute resolution, which these replacement log entries are never used for. However, for ease of resyncing\n the client, we have decided to include them for now."
            },
            "functionSelector": "23100714",
            "id": 18737,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "setReplacementReputationUpdateLogEntry",
            "nameLocation": "2387:38:24",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 18735,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 18720,
                  "mutability": "mutable",
                  "name": "_reputationMiningCycle",
                  "nameLocation": "2439:22:24",
                  "nodeType": "VariableDeclaration",
                  "scope": 18737,
                  "src": "2431:30:24",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 18719,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2431:7:24",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 18722,
                  "mutability": "mutable",
                  "name": "_id",
                  "nameLocation": "2475:3:24",
                  "nodeType": "VariableDeclaration",
                  "scope": 18737,
                  "src": "2467:11:24",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 18721,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "2467:7:24",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 18724,
                  "mutability": "mutable",
                  "name": "_user",
                  "nameLocation": "2492:5:24",
                  "nodeType": "VariableDeclaration",
                  "scope": 18737,
                  "src": "2484:13:24",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 18723,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2484:7:24",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 18726,
                  "mutability": "mutable",
                  "name": "_amount",
                  "nameLocation": "2507:7:24",
                  "nodeType": "VariableDeclaration",
                  "scope": 18737,
                  "src": "2503:11:24",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_int256",
                    "typeString": "int256"
                  },
                  "typeName": {
                    "id": 18725,
                    "name": "int",
                    "nodeType": "ElementaryTypeName",
                    "src": "2503:3:24",
                    "typeDescriptions": {
                      "typeIdentifier": "t_int256",
                      "typeString": "int256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 18728,
                  "mutability": "mutable",
                  "name": "_skillId",
                  "nameLocation": "2528:8:24",
                  "nodeType": "VariableDeclaration",
                  "scope": 18737,
                  "src": "2520:16:24",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 18727,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "2520:7:24",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 18730,
                  "mutability": "mutable",
                  "name": "_colony",
                  "nameLocation": "2550:7:24",
                  "nodeType": "VariableDeclaration",
                  "scope": 18737,
                  "src": "2542:15:24",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 18729,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2542:7:24",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 18732,
                  "mutability": "mutable",
                  "name": "_nUpdates",
                  "nameLocation": "2571:9:24",
                  "nodeType": "VariableDeclaration",
                  "scope": 18737,
                  "src": "2563:17:24",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint128",
                    "typeString": "uint128"
                  },
                  "typeName": {
                    "id": 18731,
                    "name": "uint128",
                    "nodeType": "ElementaryTypeName",
                    "src": "2563:7:24",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint128",
                      "typeString": "uint128"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 18734,
                  "mutability": "mutable",
                  "name": "_nPreviousUpdates",
                  "nameLocation": "2594:17:24",
                  "nodeType": "VariableDeclaration",
                  "scope": 18737,
                  "src": "2586:25:24",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint128",
                    "typeString": "uint128"
                  },
                  "typeName": {
                    "id": 18733,
                    "name": "uint128",
                    "nodeType": "ElementaryTypeName",
                    "src": "2586:7:24",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint128",
                      "typeString": "uint128"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2425:192:24"
            },
            "returnParameters": {
              "id": 18736,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2626:0:24"
            },
            "scope": 19314,
            "src": "2378:249:24",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 18738,
              "nodeType": "StructuredDocumentation",
              "src": "2631:435:24",
              "text": "@notice Get a replacement log entry (if set) for the log entry `_id` in the mining cycle that was at the address `_reputationMiningCycle`.\n @param _reputationMiningCycle The address of the reputation mining cycle we are asking about\n @param _id The log entry number we wish to see if there is a replacement for\n @return _reputationLogEntry ReputationLogEntry instance with the details of the log entry (if it exists)"
            },
            "functionSelector": "e926f61c",
            "id": 18748,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getReplacementReputationUpdateLogEntry",
            "nameLocation": "3078:38:24",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 18743,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 18740,
                  "mutability": "mutable",
                  "name": "_reputationMiningCycle",
                  "nameLocation": "3125:22:24",
                  "nodeType": "VariableDeclaration",
                  "scope": 18748,
                  "src": "3117:30:24",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 18739,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "3117:7:24",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 18742,
                  "mutability": "mutable",
                  "name": "_id",
                  "nameLocation": "3157:3:24",
                  "nodeType": "VariableDeclaration",
                  "scope": 18748,
                  "src": "3149:11:24",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 18741,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "3149:7:24",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3116:45:24"
            },
            "returnParameters": {
              "id": 18747,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 18746,
                  "mutability": "mutable",
                  "name": "_reputationLogEntry",
                  "nameLocation": "3215:19:24",
                  "nodeType": "VariableDeclaration",
                  "scope": 18748,
                  "src": "3189:45:24",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_ReputationLogEntry_$15627_memory_ptr",
                    "typeString": "struct ColonyNetworkDataTypes.ReputationLogEntry"
                  },
                  "typeName": {
                    "id": 18745,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 18744,
                      "name": "ReputationLogEntry",
                      "nameLocations": [
                        "3189:18:24"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 15627,
                      "src": "3189:18:24"
                    },
                    "referencedDeclaration": 15627,
                    "src": "3189:18:24",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_ReputationLogEntry_$15627_storage_ptr",
                      "typeString": "struct ColonyNetworkDataTypes.ReputationLogEntry"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3188:47:24"
            },
            "scope": 19314,
            "src": "3069:167:24",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 18749,
              "nodeType": "StructuredDocumentation",
              "src": "3240:411:24",
              "text": "@notice Get whether any replacement log entries have been set for the supplied reputation mining cycle.\n @notice Used by the client to avoid doubling the number of RPC calls when syncing from scratch.\n @param _reputationMiningCycle The reputation mining cycle address we want to know if any entries have been replaced in.\n @return _exists Boolean indicating whether there is a replacement log"
            },
            "functionSelector": "1d5b14e3",
            "id": 18756,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getReplacementReputationUpdateLogsExist",
            "nameLocation": "3663:39:24",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 18752,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 18751,
                  "mutability": "mutable",
                  "name": "_reputationMiningCycle",
                  "nameLocation": "3711:22:24",
                  "nodeType": "VariableDeclaration",
                  "scope": 18756,
                  "src": "3703:30:24",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 18750,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "3703:7:24",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3702:32:24"
            },
            "returnParameters": {
              "id": 18755,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 18754,
                  "mutability": "mutable",
                  "name": "_exists",
                  "nameLocation": "3763:7:24",
                  "nodeType": "VariableDeclaration",
                  "scope": 18756,
                  "src": "3758:12:24",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 18753,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "3758:4:24",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3757:14:24"
            },
            "scope": 19314,
            "src": "3654:118:24",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 18757,
              "nodeType": "StructuredDocumentation",
              "src": "3776:130:24",
              "text": "@notice Get the Meta Colony address.\n @return _colonyAddress The Meta colony address, if no colony was found, returns 0x0"
            },
            "functionSelector": "731bc22f",
            "id": 18762,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getMetaColony",
            "nameLocation": "3918:13:24",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 18758,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "3931:2:24"
            },
            "returnParameters": {
              "id": 18761,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 18760,
                  "mutability": "mutable",
                  "name": "_colonyAddress",
                  "nameLocation": "3973:14:24",
                  "nodeType": "VariableDeclaration",
                  "scope": 18762,
                  "src": "3957:30:24",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address_payable",
                    "typeString": "address payable"
                  },
                  "typeName": {
                    "id": 18759,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "3957:15:24",
                    "stateMutability": "payable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address_payable",
                      "typeString": "address payable"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3956:32:24"
            },
            "scope": 19314,
            "src": "3909:80:24",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 18763,
              "nodeType": "StructuredDocumentation",
              "src": "3993:92:24",
              "text": "@notice Get the number of colonies in the network.\n @return _count The colony count"
            },
            "functionSelector": "711a39be",
            "id": 18768,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getColonyCount",
            "nameLocation": "4097:14:24",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 18764,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "4111:2:24"
            },
            "returnParameters": {
              "id": 18767,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 18766,
                  "mutability": "mutable",
                  "name": "_count",
                  "nameLocation": "4145:6:24",
                  "nodeType": "VariableDeclaration",
                  "scope": 18768,
                  "src": "4137:14:24",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 18765,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "4137:7:24",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4136:16:24"
            },
            "scope": 19314,
            "src": "4088:65:24",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 18769,
              "nodeType": "StructuredDocumentation",
              "src": "4157:205:24",
              "text": "@notice Check if specific address is a colony created on colony network.\n @param _colony Address of the colony\n @return _addressIsColony true if specified address is a colony, otherwise false"
            },
            "functionSelector": "db0dd7ff",
            "id": 18776,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "isColony",
            "nameLocation": "4374:8:24",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 18772,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 18771,
                  "mutability": "mutable",
                  "name": "_colony",
                  "nameLocation": "4391:7:24",
                  "nodeType": "VariableDeclaration",
                  "scope": 18776,
                  "src": "4383:15:24",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 18770,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "4383:7:24",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4382:17:24"
            },
            "returnParameters": {
              "id": 18775,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 18774,
                  "mutability": "mutable",
                  "name": "_addressIsColony",
                  "nameLocation": "4428:16:24",
                  "nodeType": "VariableDeclaration",
                  "scope": 18776,
                  "src": "4423:21:24",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 18773,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "4423:4:24",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4422:23:24"
            },
            "scope": 19314,
            "src": "4365:81:24",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 18777,
              "nodeType": "StructuredDocumentation",
              "src": "4450:585:24",
              "text": "@notice Adds a new skill to the global or local skills tree, under skill `_parentSkillId`.\n Only the Meta Colony is allowed to add a global skill, called via `IColony.addGlobalSkill`.\n Any colony is allowed to add a local skill and which is associated with a new domain via `IColony.addDomain`.\n @dev Errors if the parent skill does not exist or if this is called by an unauthorised sender.\n @param _parentSkillId Id of the skill under which the new skill will be added. If 0, a global skill is added with no parent.\n @return _skillId Id of the added skill"
            },
            "functionSelector": "162419cc",
            "id": 18784,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "addSkill",
            "nameLocation": "5047:8:24",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 18780,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 18779,
                  "mutability": "mutable",
                  "name": "_parentSkillId",
                  "nameLocation": "5064:14:24",
                  "nodeType": "VariableDeclaration",
                  "scope": 18784,
                  "src": "5056:22:24",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 18778,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "5056:7:24",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "5055:24:24"
            },
            "returnParameters": {
              "id": 18783,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 18782,
                  "mutability": "mutable",
                  "name": "_skillId",
                  "nameLocation": "5106:8:24",
                  "nodeType": "VariableDeclaration",
                  "scope": 18784,
                  "src": "5098:16:24",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 18781,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "5098:7:24",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "5097:18:24"
            },
            "scope": 19314,
            "src": "5038:78:24",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 18785,
              "nodeType": "StructuredDocumentation",
              "src": "5120:151:24",
              "text": "@notice Get the `nParents` and `nChildren` of skill with id `_skillId`.\n @param _skillId Id of the skill\n @return _skill The Skill struct"
            },
            "functionSelector": "bd880fae",
            "id": 18793,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getSkill",
            "nameLocation": "5283:8:24",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 18788,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 18787,
                  "mutability": "mutable",
                  "name": "_skillId",
                  "nameLocation": "5300:8:24",
                  "nodeType": "VariableDeclaration",
                  "scope": 18793,
                  "src": "5292:16:24",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 18786,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "5292:7:24",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "5291:18:24"
            },
            "returnParameters": {
              "id": 18792,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 18791,
                  "mutability": "mutable",
                  "name": "_skill",
                  "nameLocation": "5346:6:24",
                  "nodeType": "VariableDeclaration",
                  "scope": 18793,
                  "src": "5333:19:24",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_Skill_$15609_memory_ptr",
                    "typeString": "struct ColonyNetworkDataTypes.Skill"
                  },
                  "typeName": {
                    "id": 18790,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 18789,
                      "name": "Skill",
                      "nameLocations": [
                        "5333:5:24"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 15609,
                      "src": "5333:5:24"
                    },
                    "referencedDeclaration": 15609,
                    "src": "5333:5:24",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_Skill_$15609_storage_ptr",
                      "typeString": "struct ColonyNetworkDataTypes.Skill"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "5332:21:24"
            },
            "scope": 19314,
            "src": "5274:80:24",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 18794,
              "nodeType": "StructuredDocumentation",
              "src": "5358:192:24",
              "text": "@notice Set deprecation status for a skill\n @param _skillId Id of the skill\n @param _deprecated Deprecation status\n @return _changed Whether the deprecated state was changed"
            },
            "functionSelector": "d20b156b",
            "id": 18803,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "deprecateSkill",
            "nameLocation": "5562:14:24",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 18799,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 18796,
                  "mutability": "mutable",
                  "name": "_skillId",
                  "nameLocation": "5585:8:24",
                  "nodeType": "VariableDeclaration",
                  "scope": 18803,
                  "src": "5577:16:24",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 18795,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "5577:7:24",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 18798,
                  "mutability": "mutable",
                  "name": "_deprecated",
                  "nameLocation": "5600:11:24",
                  "nodeType": "VariableDeclaration",
                  "scope": 18803,
                  "src": "5595:16:24",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 18797,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "5595:4:24",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "5576:36:24"
            },
            "returnParameters": {
              "id": 18802,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 18801,
                  "mutability": "mutable",
                  "name": "_changed",
                  "nameLocation": "5636:8:24",
                  "nodeType": "VariableDeclaration",
                  "scope": 18803,
                  "src": "5631:13:24",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 18800,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "5631:4:24",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "5630:15:24"
            },
            "scope": 19314,
            "src": "5553:93:24",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 18804,
              "nodeType": "StructuredDocumentation",
              "src": "5650:205:24",
              "text": "@notice Mark a skill as deprecated which stops new tasks and payments from using it.\n @dev This function is deprecated and will be removed in a future release\n @param _skillId Id of the skill"
            },
            "functionSelector": "bb47bf18",
            "id": 18809,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "deprecateSkill",
            "nameLocation": "5867:14:24",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 18807,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 18806,
                  "mutability": "mutable",
                  "name": "_skillId",
                  "nameLocation": "5890:8:24",
                  "nodeType": "VariableDeclaration",
                  "scope": 18809,
                  "src": "5882:16:24",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 18805,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "5882:7:24",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "5881:18:24"
            },
            "returnParameters": {
              "id": 18808,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "5908:0:24"
            },
            "scope": 19314,
            "src": "5858:51:24",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 18810,
              "nodeType": "StructuredDocumentation",
              "src": "5913:110:24",
              "text": "@notice Initialise the local skills tree for a colony\n @return _rootLocalSkillId The root local skill"
            },
            "functionSelector": "2501ab2c",
            "id": 18815,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "initialiseRootLocalSkill",
            "nameLocation": "6035:24:24",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 18811,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "6059:2:24"
            },
            "returnParameters": {
              "id": 18814,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 18813,
                  "mutability": "mutable",
                  "name": "_rootLocalSkillId",
                  "nameLocation": "6088:17:24",
                  "nodeType": "VariableDeclaration",
                  "scope": 18815,
                  "src": "6080:25:24",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 18812,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "6080:7:24",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "6079:27:24"
            },
            "scope": 19314,
            "src": "6026:81:24",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 18816,
              "nodeType": "StructuredDocumentation",
              "src": "6111:404:24",
              "text": "@notice Adds a reputation update entry to log.\n @dev Errors if it is called by anyone but a colony or if skill with id `_skillId` does not exist or.\n @param _user The address of the user for the reputation update\n @param _amount The amount of reputation change for the update, this can be a negative as well as a positive value\n @param _skillId The skill for the reputation update"
            },
            "functionSelector": "5a8adafa",
            "id": 18825,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "appendReputationUpdateLog",
            "nameLocation": "6527:25:24",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 18823,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 18818,
                  "mutability": "mutable",
                  "name": "_user",
                  "nameLocation": "6561:5:24",
                  "nodeType": "VariableDeclaration",
                  "scope": 18825,
                  "src": "6553:13:24",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 18817,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "6553:7:24",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 18820,
                  "mutability": "mutable",
                  "name": "_amount",
                  "nameLocation": "6575:7:24",
                  "nodeType": "VariableDeclaration",
                  "scope": 18825,
                  "src": "6568:14:24",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_int256",
                    "typeString": "int256"
                  },
                  "typeName": {
                    "id": 18819,
                    "name": "int256",
                    "nodeType": "ElementaryTypeName",
                    "src": "6568:6:24",
                    "typeDescriptions": {
                      "typeIdentifier": "t_int256",
                      "typeString": "int256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 18822,
                  "mutability": "mutable",
                  "name": "_skillId",
                  "nameLocation": "6592:8:24",
                  "nodeType": "VariableDeclaration",
                  "scope": 18825,
                  "src": "6584:16:24",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 18821,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "6584:7:24",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "6552:49:24"
            },
            "returnParameters": {
              "id": 18824,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "6610:0:24"
            },
            "scope": 19314,
            "src": "6518:93:24",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 18826,
              "nodeType": "StructuredDocumentation",
              "src": "6615:128:24",
              "text": "@notice Get the number of skills in the network including both global and local skills.\n @return _count The skill count"
            },
            "functionSelector": "05f53b29",
            "id": 18831,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getSkillCount",
            "nameLocation": "6755:13:24",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 18827,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "6768:2:24"
            },
            "returnParameters": {
              "id": 18830,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 18829,
                  "mutability": "mutable",
                  "name": "_count",
                  "nameLocation": "6802:6:24",
                  "nodeType": "VariableDeclaration",
                  "scope": 18831,
                  "src": "6794:14:24",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 18828,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "6794:7:24",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "6793:16:24"
            },
            "scope": 19314,
            "src": "6746:64:24",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 18832,
              "nodeType": "StructuredDocumentation",
              "src": "6814:170:24",
              "text": "@notice Get the `skillId` of the reputation mining skill. Only set once the metacolony is set up.\n @return _skillId The `skillId` of the reputation mining skill."
            },
            "functionSelector": "1c46bc7f",
            "id": 18837,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getReputationMiningSkillId",
            "nameLocation": "6996:26:24",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 18833,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "7022:2:24"
            },
            "returnParameters": {
              "id": 18836,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 18835,
                  "mutability": "mutable",
                  "name": "_skillId",
                  "nameLocation": "7056:8:24",
                  "nodeType": "VariableDeclaration",
                  "scope": 18837,
                  "src": "7048:16:24",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 18834,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "7048:7:24",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "7047:18:24"
            },
            "scope": 19314,
            "src": "6987:79:24",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 18838,
              "nodeType": "StructuredDocumentation",
              "src": "7070:171:24",
              "text": "@notice Sets the token locking address.\n This is only set once, and can't be changed afterwards.\n @param _tokenLockingAddress Address of the locking contract"
            },
            "functionSelector": "8fb6839a",
            "id": 18843,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "setTokenLocking",
            "nameLocation": "7253:15:24",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 18841,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 18840,
                  "mutability": "mutable",
                  "name": "_tokenLockingAddress",
                  "nameLocation": "7277:20:24",
                  "nodeType": "VariableDeclaration",
                  "scope": 18843,
                  "src": "7269:28:24",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 18839,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "7269:7:24",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "7268:30:24"
            },
            "returnParameters": {
              "id": 18842,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "7307:0:24"
            },
            "scope": 19314,
            "src": "7244:64:24",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 18844,
              "nodeType": "StructuredDocumentation",
              "src": "7312:108:24",
              "text": "@notice Get token locking contract address.\n @return _lockingAddress Token locking contract address"
            },
            "functionSelector": "b319902a",
            "id": 18849,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getTokenLocking",
            "nameLocation": "7432:15:24",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 18845,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "7447:2:24"
            },
            "returnParameters": {
              "id": 18848,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 18847,
                  "mutability": "mutable",
                  "name": "_lockingAddress",
                  "nameLocation": "7481:15:24",
                  "nodeType": "VariableDeclaration",
                  "scope": 18849,
                  "src": "7473:23:24",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 18846,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "7473:7:24",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "7472:25:24"
            },
            "scope": 19314,
            "src": "7423:75:24",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 18850,
              "nodeType": "StructuredDocumentation",
              "src": "7502:133:24",
              "text": "@notice Create the Meta Colony, same as a normal colony plus the root skill.\n @param _tokenAddress Address of the CLNY token"
            },
            "functionSelector": "a2f99b86",
            "id": 18855,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "createMetaColony",
            "nameLocation": "7647:16:24",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 18853,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 18852,
                  "mutability": "mutable",
                  "name": "_tokenAddress",
                  "nameLocation": "7672:13:24",
                  "nodeType": "VariableDeclaration",
                  "scope": 18855,
                  "src": "7664:21:24",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 18851,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "7664:7:24",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "7663:23:24"
            },
            "returnParameters": {
              "id": 18854,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "7695:0:24"
            },
            "scope": 19314,
            "src": "7638:58:24",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 18856,
              "nodeType": "StructuredDocumentation",
              "src": "7700:379:24",
              "text": "@notice Creates a new colony in the network, at version 3\n @dev This is now deprecated and will be removed in a future version\n @dev For the colony to mint tokens, token ownership must be transferred to the new colony\n @param _tokenAddress Address of an ERC20 token to serve as the colony token.\n @return _colonyAddress Address of the newly created colony"
            },
            "functionSelector": "08eb0d2c",
            "id": 18863,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "createColony",
            "nameLocation": "8091:12:24",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 18859,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 18858,
                  "mutability": "mutable",
                  "name": "_tokenAddress",
                  "nameLocation": "8112:13:24",
                  "nodeType": "VariableDeclaration",
                  "scope": 18863,
                  "src": "8104:21:24",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 18857,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "8104:7:24",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "8103:23:24"
            },
            "returnParameters": {
              "id": 18862,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 18861,
                  "mutability": "mutable",
                  "name": "_colonyAddress",
                  "nameLocation": "8153:14:24",
                  "nodeType": "VariableDeclaration",
                  "scope": 18863,
                  "src": "8145:22:24",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 18860,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "8145:7:24",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "8144:24:24"
            },
            "scope": 19314,
            "src": "8082:87:24",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 18864,
              "nodeType": "StructuredDocumentation",
              "src": "8173:728:24",
              "text": "@notice Overload of the simpler `createColony` -- creates a new colony in the network with a variety of options, at version 4\n @dev This is now deprecated and will be removed in a future version\n @dev For the colony to mint tokens, token ownership must be transferred to the new colony\n @param _tokenAddress Address of an ERC20 token to serve as the colony token\n @param _version The version of colony to deploy (pass 0 for the current version)\n @param _colonyName The label to register (if null, no label is registered)\n @param _orbitdb DEPRECATED Currently a no-op\n @param _useExtensionManager DEPRECATED Currently a no-op\n @return _colonyAddress Address of the newly created colony"
            },
            "functionSelector": "9a55bfdc",
            "id": 18879,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "createColony",
            "nameLocation": "8913:12:24",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 18875,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 18866,
                  "mutability": "mutable",
                  "name": "_tokenAddress",
                  "nameLocation": "8934:13:24",
                  "nodeType": "VariableDeclaration",
                  "scope": 18879,
                  "src": "8926:21:24",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 18865,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "8926:7:24",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 18868,
                  "mutability": "mutable",
                  "name": "_version",
                  "nameLocation": "8957:8:24",
                  "nodeType": "VariableDeclaration",
                  "scope": 18879,
                  "src": "8949:16:24",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 18867,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "8949:7:24",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 18870,
                  "mutability": "mutable",
                  "name": "_colonyName",
                  "nameLocation": "8981:11:24",
                  "nodeType": "VariableDeclaration",
                  "scope": 18879,
                  "src": "8967:25:24",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 18869,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "8967:6:24",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 18872,
                  "mutability": "mutable",
                  "name": "_orbitdb",
                  "nameLocation": "9008:8:24",
                  "nodeType": "VariableDeclaration",
                  "scope": 18879,
                  "src": "8994:22:24",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 18871,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "8994:6:24",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 18874,
                  "mutability": "mutable",
                  "name": "_useExtensionManager",
                  "nameLocation": "9023:20:24",
                  "nodeType": "VariableDeclaration",
                  "scope": 18879,
                  "src": "9018:25:24",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 18873,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "9018:4:24",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "8925:119:24"
            },
            "returnParameters": {
              "id": 18878,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 18877,
                  "mutability": "mutable",
                  "name": "_colonyAddress",
                  "nameLocation": "9075:14:24",
                  "nodeType": "VariableDeclaration",
                  "scope": 18879,
                  "src": "9067:22:24",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 18876,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "9067:7:24",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "9066:24:24"
            },
            "scope": 19314,
            "src": "8904:187:24",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 18880,
              "nodeType": "StructuredDocumentation",
              "src": "9095:485:24",
              "text": "@notice Creates a new colony in the network, with an optional ENS name\n @dev For the colony to mint tokens, token ownership must be transferred to the new colony\n @param _tokenAddress Address of an ERC20 token to serve as the colony token\n @param _version The version of colony to deploy (pass 0 for the current version)\n @param _colonyName The label to register (if null, no label is registered)\n @return _colonyAddress Address of the newly created colony"
            },
            "functionSelector": "17a08518",
            "id": 18891,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "createColony",
            "nameLocation": "9592:12:24",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 18887,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 18882,
                  "mutability": "mutable",
                  "name": "_tokenAddress",
                  "nameLocation": "9613:13:24",
                  "nodeType": "VariableDeclaration",
                  "scope": 18891,
                  "src": "9605:21:24",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 18881,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "9605:7:24",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 18884,
                  "mutability": "mutable",
                  "name": "_version",
                  "nameLocation": "9636:8:24",
                  "nodeType": "VariableDeclaration",
                  "scope": 18891,
                  "src": "9628:16:24",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 18883,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "9628:7:24",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 18886,
                  "mutability": "mutable",
                  "name": "_colonyName",
                  "nameLocation": "9660:11:24",
                  "nodeType": "VariableDeclaration",
                  "scope": 18891,
                  "src": "9646:25:24",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 18885,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "9646:6:24",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "9604:68:24"
            },
            "returnParameters": {
              "id": 18890,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 18889,
                  "mutability": "mutable",
                  "name": "_colonyAddress",
                  "nameLocation": "9703:14:24",
                  "nodeType": "VariableDeclaration",
                  "scope": 18891,
                  "src": "9695:22:24",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 18888,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "9695:7:24",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "9694:24:24"
            },
            "scope": 19314,
            "src": "9583:136:24",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 18892,
              "nodeType": "StructuredDocumentation",
              "src": "9723:615:24",
              "text": "@notice Creates a new colony in the network, with an optional ENS name\n @dev For the colony to mint tokens, token ownership must be transferred to the new colony\n @param _tokenAddress Address of an ERC20 token to serve as the colony token\n @param _version The version of colony to deploy (pass 0 for the current version)\n @param _colonyName The label to register (if null, no label is registered)\n @param _metadata The metadata associated with the new colony\n @return _colonyAddress Address of the newly created colony\n @dev We expect this function to only be used by the dapp"
            },
            "functionSelector": "0e0049a0",
            "id": 18905,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "createColony",
            "nameLocation": "10350:12:24",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 18901,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 18894,
                  "mutability": "mutable",
                  "name": "_tokenAddress",
                  "nameLocation": "10371:13:24",
                  "nodeType": "VariableDeclaration",
                  "scope": 18905,
                  "src": "10363:21:24",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 18893,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "10363:7:24",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 18896,
                  "mutability": "mutable",
                  "name": "_version",
                  "nameLocation": "10394:8:24",
                  "nodeType": "VariableDeclaration",
                  "scope": 18905,
                  "src": "10386:16:24",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 18895,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "10386:7:24",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 18898,
                  "mutability": "mutable",
                  "name": "_colonyName",
                  "nameLocation": "10418:11:24",
                  "nodeType": "VariableDeclaration",
                  "scope": 18905,
                  "src": "10404:25:24",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 18897,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "10404:6:24",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 18900,
                  "mutability": "mutable",
                  "name": "_metadata",
                  "nameLocation": "10445:9:24",
                  "nodeType": "VariableDeclaration",
                  "scope": 18905,
                  "src": "10431:23:24",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 18899,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "10431:6:24",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "10362:93:24"
            },
            "returnParameters": {
              "id": 18904,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 18903,
                  "mutability": "mutable",
                  "name": "_colonyAddress",
                  "nameLocation": "10486:14:24",
                  "nodeType": "VariableDeclaration",
                  "scope": 18905,
                  "src": "10478:22:24",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 18902,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "10478:7:24",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "10477:24:24"
            },
            "scope": 19314,
            "src": "10341:161:24",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 18906,
              "nodeType": "StructuredDocumentation",
              "src": "10506:915:24",
              "text": "@notice Creates a new colony in the network, possibly with a token and token authority,\n with an optional ENS name\n @param _tokenAddress Address of an ERC20 token to serve as the colony token (optional)\n @param _name The name of the token (optional)\n @param _symbol The short 'ticket' symbol for the token (optional)\n @param _decimals The number of decimal places that 1 user-facing token can be divided up in to (optional)\n In the case of ETH, and most tokens, this is 18.\n @return token The address of the token - this may just be the passed _tokenAddress\n @return colony\n @param _version The version of colony to deploy (pass 0 for the current version)\n @param _colonyName The label to register (if null, no label is registered)\n @param _metadata The metadata associated with the new colony\n @dev We expect this function to only be used by the dapp"
            },
            "functionSelector": "685987df",
            "id": 18927,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "createColonyForFrontend",
            "nameLocation": "11433:23:24",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 18921,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 18908,
                  "mutability": "mutable",
                  "name": "_tokenAddress",
                  "nameLocation": "11470:13:24",
                  "nodeType": "VariableDeclaration",
                  "scope": 18927,
                  "src": "11462:21:24",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 18907,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "11462:7:24",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 18910,
                  "mutability": "mutable",
                  "name": "_name",
                  "nameLocation": "11503:5:24",
                  "nodeType": "VariableDeclaration",
                  "scope": 18927,
                  "src": "11489:19:24",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 18909,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "11489:6:24",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 18912,
                  "mutability": "mutable",
                  "name": "_symbol",
                  "nameLocation": "11528:7:24",
                  "nodeType": "VariableDeclaration",
                  "scope": 18927,
                  "src": "11514:21:24",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 18911,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "11514:6:24",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 18914,
                  "mutability": "mutable",
                  "name": "_decimals",
                  "nameLocation": "11547:9:24",
                  "nodeType": "VariableDeclaration",
                  "scope": 18927,
                  "src": "11541:15:24",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint8",
                    "typeString": "uint8"
                  },
                  "typeName": {
                    "id": 18913,
                    "name": "uint8",
                    "nodeType": "ElementaryTypeName",
                    "src": "11541:5:24",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint8",
                      "typeString": "uint8"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 18916,
                  "mutability": "mutable",
                  "name": "_version",
                  "nameLocation": "11570:8:24",
                  "nodeType": "VariableDeclaration",
                  "scope": 18927,
                  "src": "11562:16:24",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 18915,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "11562:7:24",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 18918,
                  "mutability": "mutable",
                  "name": "_colonyName",
                  "nameLocation": "11598:11:24",
                  "nodeType": "VariableDeclaration",
                  "scope": 18927,
                  "src": "11584:25:24",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 18917,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "11584:6:24",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 18920,
                  "mutability": "mutable",
                  "name": "_metadata",
                  "nameLocation": "11629:9:24",
                  "nodeType": "VariableDeclaration",
                  "scope": 18927,
                  "src": "11615:23:24",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 18919,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "11615:6:24",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "11456:186:24"
            },
            "returnParameters": {
              "id": 18926,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 18923,
                  "mutability": "mutable",
                  "name": "token",
                  "nameLocation": "11673:5:24",
                  "nodeType": "VariableDeclaration",
                  "scope": 18927,
                  "src": "11665:13:24",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 18922,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "11665:7:24",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 18925,
                  "mutability": "mutable",
                  "name": "colony",
                  "nameLocation": "11688:6:24",
                  "nodeType": "VariableDeclaration",
                  "scope": 18927,
                  "src": "11680:14:24",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 18924,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "11680:7:24",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "11664:31:24"
            },
            "scope": 19314,
            "src": "11424:272:24",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 18928,
              "nodeType": "StructuredDocumentation",
              "src": "11700:364:24",
              "text": "@notice Adds a new Colony contract version and the address of associated `_resolver` contract. Secured function to authorised members.\n Allowed to be called by the Meta Colony only.\n @param _version The new Colony contract version\n @param _resolver Address of the `Resolver` contract which will be used with the underlying `EtherRouter` contract"
            },
            "functionSelector": "f07eb921",
            "id": 18935,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "addColonyVersion",
            "nameLocation": "12076:16:24",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 18933,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 18930,
                  "mutability": "mutable",
                  "name": "_version",
                  "nameLocation": "12101:8:24",
                  "nodeType": "VariableDeclaration",
                  "scope": 18935,
                  "src": "12093:16:24",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 18929,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "12093:7:24",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 18932,
                  "mutability": "mutable",
                  "name": "_resolver",
                  "nameLocation": "12119:9:24",
                  "nodeType": "VariableDeclaration",
                  "scope": 18935,
                  "src": "12111:17:24",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 18931,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "12111:7:24",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "12092:37:24"
            },
            "returnParameters": {
              "id": 18934,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "12138:0:24"
            },
            "scope": 19314,
            "src": "12067:72:24",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 18936,
              "nodeType": "StructuredDocumentation",
              "src": "12143:354:24",
              "text": "@notice Initialises the colony network by setting the first Colony version resolver to `_resolver` address.\n @dev Only allowed to be run once, by the Network owner before any Colony versions are added.\n @param _resolver Address of the resolver for Colony contract\n @param _version Version of the Colony contract the resolver represents"
            },
            "functionSelector": "3b4d206b",
            "id": 18943,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "initialise",
            "nameLocation": "12509:10:24",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 18941,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 18938,
                  "mutability": "mutable",
                  "name": "_resolver",
                  "nameLocation": "12528:9:24",
                  "nodeType": "VariableDeclaration",
                  "scope": 18943,
                  "src": "12520:17:24",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 18937,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "12520:7:24",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 18940,
                  "mutability": "mutable",
                  "name": "_version",
                  "nameLocation": "12547:8:24",
                  "nodeType": "VariableDeclaration",
                  "scope": 18943,
                  "src": "12539:16:24",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 18939,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "12539:7:24",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "12519:37:24"
            },
            "returnParameters": {
              "id": 18942,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "12565:0:24"
            },
            "scope": 19314,
            "src": "12500:66:24",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 18944,
              "nodeType": "StructuredDocumentation",
              "src": "12570:184:24",
              "text": "@notice Get a colony address by its Id in the network.\n @param _id Id of the colony to get\n @return _colonyAddress The colony address, if no colony was found, returns 0x0"
            },
            "functionSelector": "6f92650d",
            "id": 18951,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getColony",
            "nameLocation": "12766:9:24",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 18947,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 18946,
                  "mutability": "mutable",
                  "name": "_id",
                  "nameLocation": "12784:3:24",
                  "nodeType": "VariableDeclaration",
                  "scope": 18951,
                  "src": "12776:11:24",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 18945,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "12776:7:24",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "12775:13:24"
            },
            "returnParameters": {
              "id": 18950,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 18949,
                  "mutability": "mutable",
                  "name": "_colonyAddress",
                  "nameLocation": "12820:14:24",
                  "nodeType": "VariableDeclaration",
                  "scope": 18951,
                  "src": "12812:22:24",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 18948,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "12812:7:24",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "12811:24:24"
            },
            "scope": 19314,
            "src": "12757:79:24",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 18952,
              "nodeType": "StructuredDocumentation",
              "src": "12840:176:24",
              "text": "@notice Returns the latest Colony contract version. This is the version used to create all new colonies.\n @return _version The current / latest Colony contract version"
            },
            "functionSelector": "bca1e4df",
            "id": 18957,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getCurrentColonyVersion",
            "nameLocation": "13028:23:24",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 18953,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "13051:2:24"
            },
            "returnParameters": {
              "id": 18956,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 18955,
                  "mutability": "mutable",
                  "name": "_version",
                  "nameLocation": "13085:8:24",
                  "nodeType": "VariableDeclaration",
                  "scope": 18957,
                  "src": "13077:16:24",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 18954,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "13077:7:24",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "13076:18:24"
            },
            "scope": 19314,
            "src": "13019:76:24",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 18958,
              "nodeType": "StructuredDocumentation",
              "src": "13099:408:24",
              "text": "@notice Get the id of the parent skill at index `_parentSkillIndex` for skill with Id `_skillId`.\n @param _skillId Id of the skill\n @param _parentSkillIndex Index of the `skill.parents` array to get\n Note that not all parent skill ids are stored here. See `Skill.parents` member for definition on which parents are stored\n @return _parentSkillId Skill Id of the requested parent skill"
            },
            "functionSelector": "d987fc16",
            "id": 18967,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getParentSkillId",
            "nameLocation": "13519:16:24",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 18963,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 18960,
                  "mutability": "mutable",
                  "name": "_skillId",
                  "nameLocation": "13544:8:24",
                  "nodeType": "VariableDeclaration",
                  "scope": 18967,
                  "src": "13536:16:24",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 18959,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "13536:7:24",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 18962,
                  "mutability": "mutable",
                  "name": "_parentSkillIndex",
                  "nameLocation": "13562:17:24",
                  "nodeType": "VariableDeclaration",
                  "scope": 18967,
                  "src": "13554:25:24",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 18961,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "13554:7:24",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "13535:45:24"
            },
            "returnParameters": {
              "id": 18966,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 18965,
                  "mutability": "mutable",
                  "name": "_parentSkillId",
                  "nameLocation": "13612:14:24",
                  "nodeType": "VariableDeclaration",
                  "scope": 18967,
                  "src": "13604:22:24",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 18964,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "13604:7:24",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "13603:24:24"
            },
            "scope": 19314,
            "src": "13510:118:24",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 18968,
              "nodeType": "StructuredDocumentation",
              "src": "13632:276:24",
              "text": "@notice Get the id of the child skill at index `_childSkillIndex` for skill with Id `_skillId`.\n @param _skillId Id of the skill\n @param _childSkillIndex Index of the `skill.children` array to get\n @return _childSkillId Skill Id of the requested child skill"
            },
            "functionSelector": "09d10a5e",
            "id": 18977,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getChildSkillId",
            "nameLocation": "13920:15:24",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 18973,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 18970,
                  "mutability": "mutable",
                  "name": "_skillId",
                  "nameLocation": "13944:8:24",
                  "nodeType": "VariableDeclaration",
                  "scope": 18977,
                  "src": "13936:16:24",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 18969,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "13936:7:24",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 18972,
                  "mutability": "mutable",
                  "name": "_childSkillIndex",
                  "nameLocation": "13962:16:24",
                  "nodeType": "VariableDeclaration",
                  "scope": 18977,
                  "src": "13954:24:24",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 18971,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "13954:7:24",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "13935:44:24"
            },
            "returnParameters": {
              "id": 18976,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 18975,
                  "mutability": "mutable",
                  "name": "_childSkillId",
                  "nameLocation": "14011:13:24",
                  "nodeType": "VariableDeclaration",
                  "scope": 18977,
                  "src": "14003:21:24",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 18974,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "14003:7:24",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "14002:23:24"
            },
            "scope": 19314,
            "src": "13911:115:24",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 18978,
              "nodeType": "StructuredDocumentation",
              "src": "14030:469:24",
              "text": "@notice Get the address of either the active or inactive reputation mining cycle, based on `active`. The active reputation mining cycle\n is the one currently under consideration by reputation miners. The inactive reputation cycle is the one with the log that is being appended to.\n @param _active Whether the user wants the active or inactive reputation mining cycle\n @return _repMiningCycleAddress address of active or inactive ReputationMiningCycle"
            },
            "functionSelector": "f2c8599c",
            "id": 18985,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getReputationMiningCycle",
            "nameLocation": "14511:24:24",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 18981,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 18980,
                  "mutability": "mutable",
                  "name": "_active",
                  "nameLocation": "14541:7:24",
                  "nodeType": "VariableDeclaration",
                  "scope": 18985,
                  "src": "14536:12:24",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 18979,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "14536:4:24",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "14535:14:24"
            },
            "returnParameters": {
              "id": 18984,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 18983,
                  "mutability": "mutable",
                  "name": "_repMiningCycleAddress",
                  "nameLocation": "14581:22:24",
                  "nodeType": "VariableDeclaration",
                  "scope": 18985,
                  "src": "14573:30:24",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 18982,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "14573:7:24",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "14572:32:24"
            },
            "scope": 19314,
            "src": "14502:103:24",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 18986,
              "nodeType": "StructuredDocumentation",
              "src": "14609:275:24",
              "text": "@notice Calculate raw miner weight in WADs.\n @param _timeStaked Amount of time (in seconds) that the miner has staked their CLNY\n @param _submissonIndex Index of reputation hash submission (between 0 and 11)\n @return _minerWeight The weight of miner reward"
            },
            "functionSelector": "8e4544d7",
            "id": 18995,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "calculateMinerWeight",
            "nameLocation": "14896:20:24",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 18991,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 18988,
                  "mutability": "mutable",
                  "name": "_timeStaked",
                  "nameLocation": "14925:11:24",
                  "nodeType": "VariableDeclaration",
                  "scope": 18995,
                  "src": "14917:19:24",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 18987,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "14917:7:24",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 18990,
                  "mutability": "mutable",
                  "name": "_submissonIndex",
                  "nameLocation": "14946:15:24",
                  "nodeType": "VariableDeclaration",
                  "scope": 18995,
                  "src": "14938:23:24",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 18989,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "14938:7:24",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "14916:46:24"
            },
            "returnParameters": {
              "id": 18994,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 18993,
                  "mutability": "mutable",
                  "name": "_minerWeight",
                  "nameLocation": "14994:12:24",
                  "nodeType": "VariableDeclaration",
                  "scope": 18995,
                  "src": "14986:20:24",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 18992,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "14986:7:24",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "14985:22:24"
            },
            "scope": 19314,
            "src": "14887:121:24",
            "stateMutability": "pure",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 18996,
              "nodeType": "StructuredDocumentation",
              "src": "15012:194:24",
              "text": "@notice Get the `Resolver` address for Colony contract version `_version`.\n @param _version The Colony contract version\n @return _resolverAddress Address of the `Resolver` contract"
            },
            "functionSelector": "8f14c886",
            "id": 19003,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getColonyVersionResolver",
            "nameLocation": "15218:24:24",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 18999,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 18998,
                  "mutability": "mutable",
                  "name": "_version",
                  "nameLocation": "15251:8:24",
                  "nodeType": "VariableDeclaration",
                  "scope": 19003,
                  "src": "15243:16:24",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 18997,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "15243:7:24",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "15242:18:24"
            },
            "returnParameters": {
              "id": 19002,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 19001,
                  "mutability": "mutable",
                  "name": "_resolverAddress",
                  "nameLocation": "15292:16:24",
                  "nodeType": "VariableDeclaration",
                  "scope": 19003,
                  "src": "15284:24:24",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 19000,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "15284:7:24",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "15283:26:24"
            },
            "scope": 19314,
            "src": "15209:101:24",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 19004,
              "nodeType": "StructuredDocumentation",
              "src": "15314:357:24",
              "text": "@notice Set a new Reputation root hash and starts a new mining cycle. Can only be called by the ReputationMiningCycle contract.\n @param _newHash The reputation root hash\n @param _newNLeaves The updated leaves count value\n @param _stakers Array of users who submitted or backed the hash, being accepted here as the new reputation root hash"
            },
            "functionSelector": "743ed431",
            "id": 19014,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "setReputationRootHash",
            "nameLocation": "15683:21:24",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 19012,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 19006,
                  "mutability": "mutable",
                  "name": "_newHash",
                  "nameLocation": "15713:8:24",
                  "nodeType": "VariableDeclaration",
                  "scope": 19014,
                  "src": "15705:16:24",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 19005,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "15705:7:24",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 19008,
                  "mutability": "mutable",
                  "name": "_newNLeaves",
                  "nameLocation": "15731:11:24",
                  "nodeType": "VariableDeclaration",
                  "scope": 19014,
                  "src": "15723:19:24",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 19007,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "15723:7:24",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 19011,
                  "mutability": "mutable",
                  "name": "_stakers",
                  "nameLocation": "15761:8:24",
                  "nodeType": "VariableDeclaration",
                  "scope": 19014,
                  "src": "15744:25:24",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
                    "typeString": "address[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 19009,
                      "name": "address",
                      "nodeType": "ElementaryTypeName",
                      "src": "15744:7:24",
                      "stateMutability": "nonpayable",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "id": 19010,
                    "nodeType": "ArrayTypeName",
                    "src": "15744:9:24",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
                      "typeString": "address[]"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "15704:66:24"
            },
            "returnParameters": {
              "id": 19013,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "15779:0:24"
            },
            "scope": 19314,
            "src": "15674:106:24",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 19015,
              "nodeType": "StructuredDocumentation",
              "src": "15784:151:24",
              "text": "@notice Starts a new Reputation Mining cycle. Explicitly called only the first time,\n subsequently called from within `setReputationRootHash`."
            },
            "functionSelector": "450e2ed3",
            "id": 19018,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "startNextCycle",
            "nameLocation": "15947:14:24",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 19016,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "15961:2:24"
            },
            "returnParameters": {
              "id": 19017,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "15972:0:24"
            },
            "scope": 19314,
            "src": "15938:35:24",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 19019,
              "nodeType": "StructuredDocumentation",
              "src": "15977:61:24",
              "text": "@notice Creates initial inactive reputation mining cycle."
            },
            "functionSelector": "ee65786a",
            "id": 19022,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "initialiseReputationMining",
            "nameLocation": "16050:26:24",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 19020,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "16076:2:24"
            },
            "returnParameters": {
              "id": 19021,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "16087:0:24"
            },
            "scope": 19314,
            "src": "16041:47:24",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 19023,
              "nodeType": "StructuredDocumentation",
              "src": "16092:123:24",
              "text": "@notice Get the root hash of the current reputation state tree.\n @return rootHash The current Reputation Root Hash"
            },
            "functionSelector": "97824c3f",
            "id": 19028,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getReputationRootHash",
            "nameLocation": "16227:21:24",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 19024,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "16248:2:24"
            },
            "returnParameters": {
              "id": 19027,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 19026,
                  "mutability": "mutable",
                  "name": "rootHash",
                  "nameLocation": "16282:8:24",
                  "nodeType": "VariableDeclaration",
                  "scope": 19028,
                  "src": "16274:16:24",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 19025,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "16274:7:24",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "16273:18:24"
            },
            "scope": 19314,
            "src": "16218:74:24",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 19029,
              "nodeType": "StructuredDocumentation",
              "src": "16296:304:24",
              "text": "@notice Get the number of leaves in the current reputation state tree.\n @dev I cannot see a reason why a user's client would need to call this - only stored to help with some edge cases in reputation mining dispute resolution.\n @return nLeaves uint256 The number of leaves in the state tree"
            },
            "functionSelector": "1262bd19",
            "id": 19034,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getReputationRootHashNLeaves",
            "nameLocation": "16612:28:24",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 19030,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "16640:2:24"
            },
            "returnParameters": {
              "id": 19033,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 19032,
                  "mutability": "mutable",
                  "name": "nLeaves",
                  "nameLocation": "16674:7:24",
                  "nodeType": "VariableDeclaration",
                  "scope": 19034,
                  "src": "16666:15:24",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 19031,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "16666:7:24",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "16665:17:24"
            },
            "scope": 19314,
            "src": "16603:80:24",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 19035,
              "nodeType": "StructuredDocumentation",
              "src": "16687:309:24",
              "text": "@notice Get the number of leaves in the current reputation state tree.\n @dev Deprecated, replaced by getReputationRootHashNLeaves which does the same thing but is more accurately named.\n @dev will be removed in a later version.\n @return nNodes uint256 The number of leaves in the state tree"
            },
            "functionSelector": "7680150d",
            "id": 19040,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getReputationRootHashNNodes",
            "nameLocation": "17008:27:24",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 19036,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "17035:2:24"
            },
            "returnParameters": {
              "id": 19039,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 19038,
                  "mutability": "mutable",
                  "name": "nNodes",
                  "nameLocation": "17069:6:24",
                  "nodeType": "VariableDeclaration",
                  "scope": 19040,
                  "src": "17061:14:24",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 19037,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "17061:7:24",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "17060:16:24"
            },
            "scope": 19314,
            "src": "16999:78:24",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 19041,
              "nodeType": "StructuredDocumentation",
              "src": "17081:189:24",
              "text": "@notice Create and start a new `DutchAuction` for the entire amount of `_token` owned by the Colony Network.\n @param _token Address of the token held by the network to be auctioned"
            },
            "functionSelector": "55a8495a",
            "id": 19046,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "startTokenAuction",
            "nameLocation": "17282:17:24",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 19044,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 19043,
                  "mutability": "mutable",
                  "name": "_token",
                  "nameLocation": "17308:6:24",
                  "nodeType": "VariableDeclaration",
                  "scope": 19046,
                  "src": "17300:14:24",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 19042,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "17300:7:24",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "17299:16:24"
            },
            "returnParameters": {
              "id": 19045,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "17324:0:24"
            },
            "scope": 19314,
            "src": "17273:52:24",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 19047,
              "nodeType": "StructuredDocumentation",
              "src": "17329:158:24",
              "text": "@notice Setup registrar with ENS and root node.\n @param _ens Address of ENS registrar\n @param _rootNode Namehash of the root node for the domain"
            },
            "functionSelector": "6060c4aa",
            "id": 19054,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "setupRegistrar",
            "nameLocation": "17499:14:24",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 19052,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 19049,
                  "mutability": "mutable",
                  "name": "_ens",
                  "nameLocation": "17522:4:24",
                  "nodeType": "VariableDeclaration",
                  "scope": 19054,
                  "src": "17514:12:24",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 19048,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "17514:7:24",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 19051,
                  "mutability": "mutable",
                  "name": "_rootNode",
                  "nameLocation": "17536:9:24",
                  "nodeType": "VariableDeclaration",
                  "scope": 19054,
                  "src": "17528:17:24",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 19050,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "17528:7:24",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "17513:33:24"
            },
            "returnParameters": {
              "id": 19053,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "17555:0:24"
            },
            "scope": 19314,
            "src": "17490:66:24",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 19055,
              "nodeType": "StructuredDocumentation",
              "src": "17560:184:24",
              "text": "@notice Register a \"user.joincolony.eth\" label.\n @param _username The label to register\n @param _orbitdb The path of the orbitDB database associated with the user profile"
            },
            "functionSelector": "b5e34fbf",
            "id": 19062,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "registerUserLabel",
            "nameLocation": "17756:17:24",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 19060,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 19057,
                  "mutability": "mutable",
                  "name": "_username",
                  "nameLocation": "17788:9:24",
                  "nodeType": "VariableDeclaration",
                  "scope": 19062,
                  "src": "17774:23:24",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 19056,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "17774:6:24",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 19059,
                  "mutability": "mutable",
                  "name": "_orbitdb",
                  "nameLocation": "17813:8:24",
                  "nodeType": "VariableDeclaration",
                  "scope": 19062,
                  "src": "17799:22:24",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 19058,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "17799:6:24",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "17773:49:24"
            },
            "returnParameters": {
              "id": 19061,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "17831:0:24"
            },
            "scope": 19314,
            "src": "17747:85:24",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 19063,
              "nodeType": "StructuredDocumentation",
              "src": "17836:220:24",
              "text": "@notice Register a \"colony.joincolony.eth\" label. Can only be called by a Colony.\n @param _colonyName The label to register.\n @param _orbitdb The path of the orbitDB database associated with the colony name"
            },
            "functionSelector": "e2db777b",
            "id": 19070,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "registerColonyLabel",
            "nameLocation": "18068:19:24",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 19068,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 19065,
                  "mutability": "mutable",
                  "name": "_colonyName",
                  "nameLocation": "18102:11:24",
                  "nodeType": "VariableDeclaration",
                  "scope": 19070,
                  "src": "18088:25:24",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 19064,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "18088:6:24",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 19067,
                  "mutability": "mutable",
                  "name": "_orbitdb",
                  "nameLocation": "18129:8:24",
                  "nodeType": "VariableDeclaration",
                  "scope": 19070,
                  "src": "18115:22:24",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 19066,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "18115:6:24",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "18087:51:24"
            },
            "returnParameters": {
              "id": 19069,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "18147:0:24"
            },
            "scope": 19314,
            "src": "18059:89:24",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 19071,
              "nodeType": "StructuredDocumentation",
              "src": "18152:193:24",
              "text": "@notice Update a colony's orbitdb address. Can only be called by a colony with a registered subdomain\n @param _orbitdb The path of the orbitDB database to be associated with the colony"
            },
            "functionSelector": "28672cea",
            "id": 19076,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "updateColonyOrbitDB",
            "nameLocation": "18357:19:24",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 19074,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 19073,
                  "mutability": "mutable",
                  "name": "_orbitdb",
                  "nameLocation": "18391:8:24",
                  "nodeType": "VariableDeclaration",
                  "scope": 19076,
                  "src": "18377:22:24",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 19072,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "18377:6:24",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "18376:24:24"
            },
            "returnParameters": {
              "id": 19075,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "18409:0:24"
            },
            "scope": 19314,
            "src": "18348:62:24",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 19077,
              "nodeType": "StructuredDocumentation",
              "src": "18414:187:24",
              "text": "@notice Update a user's orbitdb address. Can only be called by a user with a registered subdomain\n @param _orbitdb The path of the orbitDB database to be associated with the user"
            },
            "functionSelector": "ed26b557",
            "id": 19082,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "updateUserOrbitDB",
            "nameLocation": "18613:17:24",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 19080,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 19079,
                  "mutability": "mutable",
                  "name": "_orbitdb",
                  "nameLocation": "18645:8:24",
                  "nodeType": "VariableDeclaration",
                  "scope": 19082,
                  "src": "18631:22:24",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 19078,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "18631:6:24",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "18630:24:24"
            },
            "returnParameters": {
              "id": 19081,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "18663:0:24"
            },
            "scope": 19314,
            "src": "18604:60:24",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 19083,
              "nodeType": "StructuredDocumentation",
              "src": "18668:218:24",
              "text": "@notice Retrieve the orbitdb address corresponding to a registered account.\n @param _node The Namehash of the account being queried.\n @return _orbitdb A string containing the address of the orbit database"
            },
            "functionSelector": "cd930b63",
            "id": 19090,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getProfileDBAddress",
            "nameLocation": "18898:19:24",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 19086,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 19085,
                  "mutability": "mutable",
                  "name": "_node",
                  "nameLocation": "18926:5:24",
                  "nodeType": "VariableDeclaration",
                  "scope": 19090,
                  "src": "18918:13:24",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 19084,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "18918:7:24",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "18917:15:24"
            },
            "returnParameters": {
              "id": 19089,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 19088,
                  "mutability": "mutable",
                  "name": "_orbitdb",
                  "nameLocation": "18970:8:24",
                  "nodeType": "VariableDeclaration",
                  "scope": 19090,
                  "src": "18956:22:24",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 19087,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "18956:6:24",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "18955:24:24"
            },
            "scope": 19314,
            "src": "18889:91:24",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 19091,
              "nodeType": "StructuredDocumentation",
              "src": "18984:233:24",
              "text": "@notice Reverse lookup a username from an address.\n @param _addr The address we wish to find the corresponding ENS domain for (if any)\n @return _domain A string containing the colony-based ENS name corresponding to addr"
            },
            "functionSelector": "60c64776",
            "id": 19098,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "lookupRegisteredENSDomain",
            "nameLocation": "19229:25:24",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 19094,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 19093,
                  "mutability": "mutable",
                  "name": "_addr",
                  "nameLocation": "19263:5:24",
                  "nodeType": "VariableDeclaration",
                  "scope": 19098,
                  "src": "19255:13:24",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 19092,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "19255:7:24",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "19254:15:24"
            },
            "returnParameters": {
              "id": 19097,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 19096,
                  "mutability": "mutable",
                  "name": "_domain",
                  "nameLocation": "19306:7:24",
                  "nodeType": "VariableDeclaration",
                  "scope": 19098,
                  "src": "19292:21:24",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 19095,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "19292:6:24",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "19291:23:24"
            },
            "scope": 19314,
            "src": "19220:95:24",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 19099,
              "nodeType": "StructuredDocumentation",
              "src": "19319:218:24",
              "text": "@notice Returns the address the supplied node resolves do, if we are the resolver.\n @param _node The namehash of the ENS address being requested\n @return _address The address the supplied node resolves to"
            },
            "functionSelector": "3b3b57de",
            "id": 19106,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "addr",
            "nameLocation": "19549:4:24",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 19102,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 19101,
                  "mutability": "mutable",
                  "name": "_node",
                  "nameLocation": "19562:5:24",
                  "nodeType": "VariableDeclaration",
                  "scope": 19106,
                  "src": "19554:13:24",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 19100,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "19554:7:24",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "19553:15:24"
            },
            "returnParameters": {
              "id": 19105,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 19104,
                  "mutability": "mutable",
                  "name": "_address",
                  "nameLocation": "19600:8:24",
                  "nodeType": "VariableDeclaration",
                  "scope": 19106,
                  "src": "19592:16:24",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 19103,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "19592:7:24",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "19591:18:24"
            },
            "scope": 19314,
            "src": "19540:70:24",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 19107,
              "nodeType": "StructuredDocumentation",
              "src": "19614:132:24",
              "text": "@notice Returns the address of the ENSRegistrar for the Network.\n @return _address The address the ENSRegistrar resolves to"
            },
            "functionSelector": "a5e42536",
            "id": 19112,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getENSRegistrar",
            "nameLocation": "19758:15:24",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 19108,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "19773:2:24"
            },
            "returnParameters": {
              "id": 19111,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 19110,
                  "mutability": "mutable",
                  "name": "_address",
                  "nameLocation": "19807:8:24",
                  "nodeType": "VariableDeclaration",
                  "scope": 19112,
                  "src": "19799:16:24",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 19109,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "19799:7:24",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "19798:18:24"
            },
            "scope": 19314,
            "src": "19749:68:24",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 19113,
              "nodeType": "StructuredDocumentation",
              "src": "19821:191:24",
              "text": "@notice Set the resolver to be used by new instances of ReputationMiningCycle.\n @param _miningResolverAddress The address of the Resolver contract with the functions correctly wired."
            },
            "functionSelector": "e1636882",
            "id": 19118,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "setMiningResolver",
            "nameLocation": "20024:17:24",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 19116,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 19115,
                  "mutability": "mutable",
                  "name": "_miningResolverAddress",
                  "nameLocation": "20050:22:24",
                  "nodeType": "VariableDeclaration",
                  "scope": 19118,
                  "src": "20042:30:24",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 19114,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "20042:7:24",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "20041:32:24"
            },
            "returnParameters": {
              "id": 19117,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "20082:0:24"
            },
            "scope": 19314,
            "src": "20015:68:24",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 19119,
              "nodeType": "StructuredDocumentation",
              "src": "20087:191:24",
              "text": "@notice Get the resolver to be used by new instances of ReputationMiningCycle.\n @return miningResolverAddress The address of the mining cycle resolver currently used by new instances"
            },
            "functionSelector": "749f15cd",
            "id": 19124,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getMiningResolver",
            "nameLocation": "20290:17:24",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 19120,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "20307:2:24"
            },
            "returnParameters": {
              "id": 19123,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 19122,
                  "mutability": "mutable",
                  "name": "miningResolverAddress",
                  "nameLocation": "20341:21:24",
                  "nodeType": "VariableDeclaration",
                  "scope": 19124,
                  "src": "20333:29:24",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 19121,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "20333:7:24",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "20332:31:24"
            },
            "scope": 19314,
            "src": "20281:83:24",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 19125,
              "nodeType": "StructuredDocumentation",
              "src": "20368:361:24",
              "text": "@notice Add a new extension resolver to the Extensions repository.\n @dev Can only be called by the MetaColony.\n @dev The extension version is queried from the resolver itself.\n @param _extensionId keccak256 hash of the extension name, used as an indentifier\n @param _resolver The deployed resolver containing the extension contract logic"
            },
            "functionSelector": "886484f7",
            "id": 19132,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "addExtensionToNetwork",
            "nameLocation": "20741:21:24",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 19130,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 19127,
                  "mutability": "mutable",
                  "name": "_extensionId",
                  "nameLocation": "20771:12:24",
                  "nodeType": "VariableDeclaration",
                  "scope": 19132,
                  "src": "20763:20:24",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 19126,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "20763:7:24",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 19129,
                  "mutability": "mutable",
                  "name": "_resolver",
                  "nameLocation": "20793:9:24",
                  "nodeType": "VariableDeclaration",
                  "scope": 19132,
                  "src": "20785:17:24",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 19128,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "20785:7:24",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "20762:41:24"
            },
            "returnParameters": {
              "id": 19131,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "20812:0:24"
            },
            "scope": 19314,
            "src": "20732:81:24",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 19133,
              "nodeType": "StructuredDocumentation",
              "src": "20817:222:24",
              "text": "@notice Install an extension in a colony. Can only be called by a Colony.\n @param _extensionId keccak256 hash of the extension name, used as an indentifier\n @param _version Version of the extension to install"
            },
            "functionSelector": "9dec0910",
            "id": 19140,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "installExtension",
            "nameLocation": "21051:16:24",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 19138,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 19135,
                  "mutability": "mutable",
                  "name": "_extensionId",
                  "nameLocation": "21076:12:24",
                  "nodeType": "VariableDeclaration",
                  "scope": 19140,
                  "src": "21068:20:24",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 19134,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "21068:7:24",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 19137,
                  "mutability": "mutable",
                  "name": "_version",
                  "nameLocation": "21098:8:24",
                  "nodeType": "VariableDeclaration",
                  "scope": 19140,
                  "src": "21090:16:24",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 19136,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "21090:7:24",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "21067:40:24"
            },
            "returnParameters": {
              "id": 19139,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "21116:0:24"
            },
            "scope": 19314,
            "src": "21042:75:24",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 19141,
              "nodeType": "StructuredDocumentation",
              "src": "21121:263:24",
              "text": "@notice Upgrade an extension in a colony. Can only be called by a Colony.\n @param _extensionId keccak256 hash of the extension name, used as an indentifier\n @param _newVersion Version of the extension to upgrade to (must be one greater than current)"
            },
            "functionSelector": "d9bd780b",
            "id": 19148,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "upgradeExtension",
            "nameLocation": "21396:16:24",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 19146,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 19143,
                  "mutability": "mutable",
                  "name": "_extensionId",
                  "nameLocation": "21421:12:24",
                  "nodeType": "VariableDeclaration",
                  "scope": 19148,
                  "src": "21413:20:24",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 19142,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "21413:7:24",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 19145,
                  "mutability": "mutable",
                  "name": "_newVersion",
                  "nameLocation": "21443:11:24",
                  "nodeType": "VariableDeclaration",
                  "scope": 19148,
                  "src": "21435:19:24",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 19144,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "21435:7:24",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "21412:43:24"
            },
            "returnParameters": {
              "id": 19147,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "21464:0:24"
            },
            "scope": 19314,
            "src": "21387:78:24",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 19149,
              "nodeType": "StructuredDocumentation",
              "src": "21469:246:24",
              "text": "@notice Set the deprecation of an extension in a colony. Can only be called by a Colony.\n @param _extensionId keccak256 hash of the extension name, used as an indentifier\n @param _deprecated Whether to deprecate the extension or not"
            },
            "functionSelector": "04eaa104",
            "id": 19156,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "deprecateExtension",
            "nameLocation": "21727:18:24",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 19154,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 19151,
                  "mutability": "mutable",
                  "name": "_extensionId",
                  "nameLocation": "21754:12:24",
                  "nodeType": "VariableDeclaration",
                  "scope": 19156,
                  "src": "21746:20:24",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 19150,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "21746:7:24",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 19153,
                  "mutability": "mutable",
                  "name": "_deprecated",
                  "nameLocation": "21773:11:24",
                  "nodeType": "VariableDeclaration",
                  "scope": 19156,
                  "src": "21768:16:24",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 19152,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "21768:4:24",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "21745:40:24"
            },
            "returnParameters": {
              "id": 19155,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "21794:0:24"
            },
            "scope": 19314,
            "src": "21718:77:24",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 19157,
              "nodeType": "StructuredDocumentation",
              "src": "21799:166:24",
              "text": "@notice Uninstall an extension in a colony. Can only be called by a Colony.\n @param _extensionId keccak256 hash of the extension name, used as an indentifier"
            },
            "functionSelector": "c2308c49",
            "id": 19162,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "uninstallExtension",
            "nameLocation": "21977:18:24",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 19160,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 19159,
                  "mutability": "mutable",
                  "name": "_extensionId",
                  "nameLocation": "22004:12:24",
                  "nodeType": "VariableDeclaration",
                  "scope": 19162,
                  "src": "21996:20:24",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 19158,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "21996:7:24",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "21995:22:24"
            },
            "returnParameters": {
              "id": 19161,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "22026:0:24"
            },
            "scope": 19314,
            "src": "21968:59:24",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 19163,
              "nodeType": "StructuredDocumentation",
              "src": "22031:235:24",
              "text": "@notice Get an extension's resolver.\n @param _extensionId keccak256 hash of the extension name, used as an indentifier\n @param _version Version of the extension\n @return _resolver The address of the deployed resolver"
            },
            "functionSelector": "71be7b25",
            "id": 19172,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getExtensionResolver",
            "nameLocation": "22278:20:24",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 19168,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 19165,
                  "mutability": "mutable",
                  "name": "_extensionId",
                  "nameLocation": "22307:12:24",
                  "nodeType": "VariableDeclaration",
                  "scope": 19172,
                  "src": "22299:20:24",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 19164,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "22299:7:24",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 19167,
                  "mutability": "mutable",
                  "name": "_version",
                  "nameLocation": "22329:8:24",
                  "nodeType": "VariableDeclaration",
                  "scope": 19172,
                  "src": "22321:16:24",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 19166,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "22321:7:24",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "22298:40:24"
            },
            "returnParameters": {
              "id": 19171,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 19170,
                  "mutability": "mutable",
                  "name": "_resolver",
                  "nameLocation": "22370:9:24",
                  "nodeType": "VariableDeclaration",
                  "scope": 19172,
                  "src": "22362:17:24",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 19169,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "22362:7:24",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "22361:19:24"
            },
            "scope": 19314,
            "src": "22269:112:24",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 19173,
              "nodeType": "StructuredDocumentation",
              "src": "22385:271:24",
              "text": "@notice Get an extension's installation.\n @param _extensionId keccak256 hash of the extension name, used as an indentifier\n @param _colony Address of the colony the extension is installed in\n @return _installation The address of the installed extension"
            },
            "functionSelector": "dc6095ae",
            "id": 19182,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getExtensionInstallation",
            "nameLocation": "22668:24:24",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 19178,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 19175,
                  "mutability": "mutable",
                  "name": "_extensionId",
                  "nameLocation": "22701:12:24",
                  "nodeType": "VariableDeclaration",
                  "scope": 19182,
                  "src": "22693:20:24",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 19174,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "22693:7:24",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 19177,
                  "mutability": "mutable",
                  "name": "_colony",
                  "nameLocation": "22723:7:24",
                  "nodeType": "VariableDeclaration",
                  "scope": 19182,
                  "src": "22715:15:24",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 19176,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "22715:7:24",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "22692:39:24"
            },
            "returnParameters": {
              "id": 19181,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 19180,
                  "mutability": "mutable",
                  "name": "_installation",
                  "nameLocation": "22763:13:24",
                  "nodeType": "VariableDeclaration",
                  "scope": 19182,
                  "src": "22755:21:24",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 19179,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "22755:7:24",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "22754:23:24"
            },
            "scope": 19314,
            "src": "22659:119:24",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 19183,
              "nodeType": "StructuredDocumentation",
              "src": "22782:155:24",
              "text": "@notice Return 1 / the fee to pay to the network. e.g. if the fee is 1% (or 0.01), return 100.\n @return _feeInverse The inverse of the network fee"
            },
            "functionSelector": "ef63c380",
            "id": 19188,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getFeeInverse",
            "nameLocation": "22949:13:24",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 19184,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "22962:2:24"
            },
            "returnParameters": {
              "id": 19187,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 19186,
                  "mutability": "mutable",
                  "name": "_feeInverse",
                  "nameLocation": "22996:11:24",
                  "nodeType": "VariableDeclaration",
                  "scope": 19188,
                  "src": "22988:19:24",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 19185,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "22988:7:24",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "22987:21:24"
            },
            "scope": 19314,
            "src": "22940:69:24",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 19189,
              "nodeType": "StructuredDocumentation",
              "src": "23013:169:24",
              "text": "@notice Set the colony network fee to pay. e.g. if the fee is 1% (or 0.01), pass 100 as `_feeInverse`.\n @param _feeInverse The inverse of the network fee to set"
            },
            "functionSelector": "3812b259",
            "id": 19194,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "setFeeInverse",
            "nameLocation": "23194:13:24",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 19192,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 19191,
                  "mutability": "mutable",
                  "name": "_feeInverse",
                  "nameLocation": "23216:11:24",
                  "nodeType": "VariableDeclaration",
                  "scope": 19194,
                  "src": "23208:19:24",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 19190,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "23208:7:24",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "23207:21:24"
            },
            "returnParameters": {
              "id": 19193,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "23237:0:24"
            },
            "scope": 19314,
            "src": "23185:53:24",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 19195,
              "nodeType": "StructuredDocumentation",
              "src": "23242:161:24",
              "text": "@notice Get a token's status in the payout whitelist\n @param _token The token being queried\n @return _status Will be `true` if token is whitelisted"
            },
            "functionSelector": "60539ef2",
            "id": 19202,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getPayoutWhitelist",
            "nameLocation": "23415:18:24",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 19198,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 19197,
                  "mutability": "mutable",
                  "name": "_token",
                  "nameLocation": "23442:6:24",
                  "nodeType": "VariableDeclaration",
                  "scope": 19202,
                  "src": "23434:14:24",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 19196,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "23434:7:24",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "23433:16:24"
            },
            "returnParameters": {
              "id": 19201,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 19200,
                  "mutability": "mutable",
                  "name": "_status",
                  "nameLocation": "23478:7:24",
                  "nodeType": "VariableDeclaration",
                  "scope": 19202,
                  "src": "23473:12:24",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 19199,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "23473:4:24",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "23472:14:24"
            },
            "scope": 19314,
            "src": "23406:81:24",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 19203,
              "nodeType": "StructuredDocumentation",
              "src": "23491:138:24",
              "text": "@notice Set a token's status in the payout whitelist\n @param _token The token being set\n @param _status The whitelist status"
            },
            "functionSelector": "e7875ea8",
            "id": 19210,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "setPayoutWhitelist",
            "nameLocation": "23641:18:24",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 19208,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 19205,
                  "mutability": "mutable",
                  "name": "_token",
                  "nameLocation": "23668:6:24",
                  "nodeType": "VariableDeclaration",
                  "scope": 19210,
                  "src": "23660:14:24",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 19204,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "23660:7:24",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 19207,
                  "mutability": "mutable",
                  "name": "_status",
                  "nameLocation": "23681:7:24",
                  "nodeType": "VariableDeclaration",
                  "scope": 19210,
                  "src": "23676:12:24",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 19206,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "23676:4:24",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "23659:30:24"
            },
            "returnParameters": {
              "id": 19209,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "23698:0:24"
            },
            "scope": 19314,
            "src": "23632:67:24",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 19211,
              "nodeType": "StructuredDocumentation",
              "src": "23703:335:24",
              "text": "@notice Function called to punish people who staked against a new reputation root hash that turned out to be incorrect.\n @dev While external, it can only be called successfully by the current ReputationMiningCycle.\n @param _stakers Array of the addresses of stakers to punish\n @param _amount Amount of stake to slash"
            },
            "functionSelector": "0f96995d",
            "id": 19219,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "punishStakers",
            "nameLocation": "24050:13:24",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 19217,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 19214,
                  "mutability": "mutable",
                  "name": "_stakers",
                  "nameLocation": "24081:8:24",
                  "nodeType": "VariableDeclaration",
                  "scope": 19219,
                  "src": "24064:25:24",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
                    "typeString": "address[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 19212,
                      "name": "address",
                      "nodeType": "ElementaryTypeName",
                      "src": "24064:7:24",
                      "stateMutability": "nonpayable",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "id": 19213,
                    "nodeType": "ArrayTypeName",
                    "src": "24064:9:24",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
                      "typeString": "address[]"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 19216,
                  "mutability": "mutable",
                  "name": "_amount",
                  "nameLocation": "24099:7:24",
                  "nodeType": "VariableDeclaration",
                  "scope": 19219,
                  "src": "24091:15:24",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 19215,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "24091:7:24",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "24063:44:24"
            },
            "returnParameters": {
              "id": 19218,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "24116:0:24"
            },
            "scope": 19314,
            "src": "24041:76:24",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 19220,
              "nodeType": "StructuredDocumentation",
              "src": "24121:151:24",
              "text": "@notice Stake CLNY to allow the staker to participate in reputation mining.\n @param _amount Amount of CLNY to stake for the purposes of mining"
            },
            "functionSelector": "9dfc8e01",
            "id": 19225,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "stakeForMining",
            "nameLocation": "24284:14:24",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 19223,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 19222,
                  "mutability": "mutable",
                  "name": "_amount",
                  "nameLocation": "24307:7:24",
                  "nodeType": "VariableDeclaration",
                  "scope": 19225,
                  "src": "24299:15:24",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 19221,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "24299:7:24",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "24298:17:24"
            },
            "returnParameters": {
              "id": 19224,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "24324:0:24"
            },
            "scope": 19314,
            "src": "24275:50:24",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 19226,
              "nodeType": "StructuredDocumentation",
              "src": "24329:129:24",
              "text": "@notice Unstake CLNY currently staked for reputation mining.\n @param _amount Amount of CLNY staked for mining to unstake"
            },
            "functionSelector": "1879bde7",
            "id": 19231,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "unstakeForMining",
            "nameLocation": "24470:16:24",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 19229,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 19228,
                  "mutability": "mutable",
                  "name": "_amount",
                  "nameLocation": "24495:7:24",
                  "nodeType": "VariableDeclaration",
                  "scope": 19231,
                  "src": "24487:15:24",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 19227,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "24487:7:24",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "24486:17:24"
            },
            "returnParameters": {
              "id": 19230,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "24512:0:24"
            },
            "scope": 19314,
            "src": "24461:52:24",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 19232,
              "nodeType": "StructuredDocumentation",
              "src": "24517:204:24",
              "text": "@notice returns how much CLNY _user has staked for the purposes of reputation mining\n @param _user The user to query\n @return _info The amount staked and the timestamp the stake was made at."
            },
            "functionSelector": "09ffb3cb",
            "id": 19240,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getMiningStake",
            "nameLocation": "24733:14:24",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 19235,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 19234,
                  "mutability": "mutable",
                  "name": "_user",
                  "nameLocation": "24756:5:24",
                  "nodeType": "VariableDeclaration",
                  "scope": 19240,
                  "src": "24748:13:24",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 19233,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "24748:7:24",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "24747:15:24"
            },
            "returnParameters": {
              "id": 19239,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 19238,
                  "mutability": "mutable",
                  "name": "_info",
                  "nameLocation": "24805:5:24",
                  "nodeType": "VariableDeclaration",
                  "scope": 19240,
                  "src": "24786:24:24",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_MiningStake_$15632_memory_ptr",
                    "typeString": "struct ColonyNetworkDataTypes.MiningStake"
                  },
                  "typeName": {
                    "id": 19237,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 19236,
                      "name": "MiningStake",
                      "nameLocations": [
                        "24786:11:24"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 15632,
                      "src": "24786:11:24"
                    },
                    "referencedDeclaration": 15632,
                    "src": "24786:11:24",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_MiningStake_$15632_storage_ptr",
                      "typeString": "struct ColonyNetworkDataTypes.MiningStake"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "24785:26:24"
            },
            "scope": 19314,
            "src": "24724:88:24",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 19241,
              "nodeType": "StructuredDocumentation",
              "src": "24816:240:24",
              "text": "@notice Used to track that a user is eligible to claim a reward\n @dev Only callable by the active reputation mining cycle\n @param _recipient The address receiving the award\n @param _amount The amount of CLNY to be awarded"
            },
            "functionSelector": "21670f22",
            "id": 19248,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "reward",
            "nameLocation": "25068:6:24",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 19246,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 19243,
                  "mutability": "mutable",
                  "name": "_recipient",
                  "nameLocation": "25083:10:24",
                  "nodeType": "VariableDeclaration",
                  "scope": 19248,
                  "src": "25075:18:24",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 19242,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "25075:7:24",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 19245,
                  "mutability": "mutable",
                  "name": "_amount",
                  "nameLocation": "25103:7:24",
                  "nodeType": "VariableDeclaration",
                  "scope": 19248,
                  "src": "25095:15:24",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 19244,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "25095:7:24",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "25074:37:24"
            },
            "returnParameters": {
              "id": 19247,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "25120:0:24"
            },
            "scope": 19314,
            "src": "25059:62:24",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 19249,
              "nodeType": "StructuredDocumentation",
              "src": "25125:247:24",
              "text": "@notice Used to burn tokens that are not needed to pay out rewards (because not every possible defence was made for all submissions)\n @dev Only callable by the active reputation mining cycle\n @param _amount The amount of CLNY to burn"
            },
            "functionSelector": "fff92e6f",
            "id": 19254,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "burnUnneededRewards",
            "nameLocation": "25384:19:24",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 19252,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 19251,
                  "mutability": "mutable",
                  "name": "_amount",
                  "nameLocation": "25412:7:24",
                  "nodeType": "VariableDeclaration",
                  "scope": 19254,
                  "src": "25404:15:24",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 19250,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "25404:7:24",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "25403:17:24"
            },
            "returnParameters": {
              "id": 19253,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "25429:0:24"
            },
            "scope": 19314,
            "src": "25375:55:24",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 19255,
              "nodeType": "StructuredDocumentation",
              "src": "25434:253:24",
              "text": "@notice Used by a user to claim any mining rewards due to them. This will place them in their balance or pending balance, as appropriate.\n @dev Can be called by anyone, not just _recipient\n @param _recipient The user whose rewards to claim"
            },
            "functionSelector": "63c2a510",
            "id": 19260,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "claimMiningReward",
            "nameLocation": "25699:17:24",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 19258,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 19257,
                  "mutability": "mutable",
                  "name": "_recipient",
                  "nameLocation": "25725:10:24",
                  "nodeType": "VariableDeclaration",
                  "scope": 19260,
                  "src": "25717:18:24",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 19256,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "25717:7:24",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "25716:20:24"
            },
            "returnParameters": {
              "id": 19259,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "25745:0:24"
            },
            "scope": 19314,
            "src": "25690:56:24",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 19261,
              "nodeType": "StructuredDocumentation",
              "src": "25750:222:24",
              "text": "@notice Called to set the total per-cycle reputation reward, which will be split between all miners.\n @dev Can only be called by the MetaColony.\n @param _amount The CLNY awarded per mining cycle to the miners"
            },
            "functionSelector": "1d9a5536",
            "id": 19266,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "setReputationMiningCycleReward",
            "nameLocation": "25984:30:24",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 19264,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 19263,
                  "mutability": "mutable",
                  "name": "_amount",
                  "nameLocation": "26023:7:24",
                  "nodeType": "VariableDeclaration",
                  "scope": 19266,
                  "src": "26015:15:24",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 19262,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "26015:7:24",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "26014:17:24"
            },
            "returnParameters": {
              "id": 19265,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "26040:0:24"
            },
            "scope": 19314,
            "src": "25975:66:24",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 19267,
              "nodeType": "StructuredDocumentation",
              "src": "26045:141:24",
              "text": "@notice Called to get the total per-cycle reputation mining reward.\n @return _amount The CLNY awarded per mining cycle to the miners"
            },
            "functionSelector": "6f51d85c",
            "id": 19272,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getReputationMiningCycleReward",
            "nameLocation": "26198:30:24",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 19268,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "26228:2:24"
            },
            "returnParameters": {
              "id": 19271,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 19270,
                  "mutability": "mutable",
                  "name": "_amount",
                  "nameLocation": "26262:7:24",
                  "nodeType": "VariableDeclaration",
                  "scope": 19272,
                  "src": "26254:15:24",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 19269,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "26254:7:24",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "26253:17:24"
            },
            "scope": 19314,
            "src": "26189:82:24",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 19273,
              "nodeType": "StructuredDocumentation",
              "src": "26275:474:24",
              "text": "@notice Called to deploy a token.\n @dev This is more expensive than deploying a token directly, but is able to be done via\n a metatransaction\n @param _name The name of the token\n @param _symbol The short 'ticket' symbol for the token\n @param _decimals The number of decimal places that 1 user-facing token can be divided up in to\n In the case of ETH, and most tokens, this is 18.\n @return _token The address of the newly deployed token"
            },
            "functionSelector": "4e51691a",
            "id": 19284,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "deployTokenViaNetwork",
            "nameLocation": "26761:21:24",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 19280,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 19275,
                  "mutability": "mutable",
                  "name": "_name",
                  "nameLocation": "26797:5:24",
                  "nodeType": "VariableDeclaration",
                  "scope": 19284,
                  "src": "26783:19:24",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 19274,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "26783:6:24",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 19277,
                  "mutability": "mutable",
                  "name": "_symbol",
                  "nameLocation": "26818:7:24",
                  "nodeType": "VariableDeclaration",
                  "scope": 19284,
                  "src": "26804:21:24",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 19276,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "26804:6:24",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 19279,
                  "mutability": "mutable",
                  "name": "_decimals",
                  "nameLocation": "26833:9:24",
                  "nodeType": "VariableDeclaration",
                  "scope": 19284,
                  "src": "26827:15:24",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint8",
                    "typeString": "uint8"
                  },
                  "typeName": {
                    "id": 19278,
                    "name": "uint8",
                    "nodeType": "ElementaryTypeName",
                    "src": "26827:5:24",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint8",
                      "typeString": "uint8"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "26782:61:24"
            },
            "returnParameters": {
              "id": 19283,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 19282,
                  "mutability": "mutable",
                  "name": "_token",
                  "nameLocation": "26870:6:24",
                  "nodeType": "VariableDeclaration",
                  "scope": 19284,
                  "src": "26862:14:24",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 19281,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "26862:7:24",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "26861:16:24"
            },
            "scope": 19314,
            "src": "26752:126:24",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 19285,
              "nodeType": "StructuredDocumentation",
              "src": "26882:472:24",
              "text": "@notice Called to deploy a token authority\n @dev This is more expensive than deploying a token directly, but is able to be done via\n a metatransaction\n @param _token The address of the token\n @param _colony The address of the colony in control of the token\n @param _allowedToTransfer An array of addresses that are allowed to transfer the token even if it's locked\n @return _tokenAuthority The address of the newly deployed TokenAuthority"
            },
            "functionSelector": "5ac54408",
            "id": 19297,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "deployTokenAuthority",
            "nameLocation": "27366:20:24",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 19293,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 19287,
                  "mutability": "mutable",
                  "name": "_token",
                  "nameLocation": "27395:6:24",
                  "nodeType": "VariableDeclaration",
                  "scope": 19297,
                  "src": "27387:14:24",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 19286,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "27387:7:24",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 19289,
                  "mutability": "mutable",
                  "name": "_colony",
                  "nameLocation": "27411:7:24",
                  "nodeType": "VariableDeclaration",
                  "scope": 19297,
                  "src": "27403:15:24",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 19288,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "27403:7:24",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 19292,
                  "mutability": "mutable",
                  "name": "_allowedToTransfer",
                  "nameLocation": "27437:18:24",
                  "nodeType": "VariableDeclaration",
                  "scope": 19297,
                  "src": "27420:35:24",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
                    "typeString": "address[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 19290,
                      "name": "address",
                      "nodeType": "ElementaryTypeName",
                      "src": "27420:7:24",
                      "stateMutability": "nonpayable",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "id": 19291,
                    "nodeType": "ArrayTypeName",
                    "src": "27420:9:24",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
                      "typeString": "address[]"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "27386:70:24"
            },
            "returnParameters": {
              "id": 19296,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 19295,
                  "mutability": "mutable",
                  "name": "_tokenAuthority",
                  "nameLocation": "27483:15:24",
                  "nodeType": "VariableDeclaration",
                  "scope": 19297,
                  "src": "27475:23:24",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 19294,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "27475:7:24",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "27474:25:24"
            },
            "scope": 19314,
            "src": "27357:143:24",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 19298,
              "nodeType": "StructuredDocumentation",
              "src": "27504:257:24",
              "text": "@notice Called to give or remove another address's permission to mine on your behalf\n @param _delegate The address you're giving or removing permission from\n @param _allowed Whether they are allowed (true) or not (false) to mine on your behalf"
            },
            "functionSelector": "f584d17d",
            "id": 19305,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "setMiningDelegate",
            "nameLocation": "27773:17:24",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 19303,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 19300,
                  "mutability": "mutable",
                  "name": "_delegate",
                  "nameLocation": "27799:9:24",
                  "nodeType": "VariableDeclaration",
                  "scope": 19305,
                  "src": "27791:17:24",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 19299,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "27791:7:24",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 19302,
                  "mutability": "mutable",
                  "name": "_allowed",
                  "nameLocation": "27815:8:24",
                  "nodeType": "VariableDeclaration",
                  "scope": 19305,
                  "src": "27810:13:24",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 19301,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "27810:4:24",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "27790:34:24"
            },
            "returnParameters": {
              "id": 19304,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "27833:0:24"
            },
            "scope": 19314,
            "src": "27764:70:24",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 19306,
              "nodeType": "StructuredDocumentation",
              "src": "27838:199:24",
              "text": "@notice Called to get the address _delegate is allowed to mine for\n @param _delegate The address that wants to mine\n @return _delegator The address they are allowed to mine on behalf of"
            },
            "functionSelector": "acb377a2",
            "id": 19313,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getMiningDelegator",
            "nameLocation": "28049:18:24",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 19309,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 19308,
                  "mutability": "mutable",
                  "name": "_delegate",
                  "nameLocation": "28076:9:24",
                  "nodeType": "VariableDeclaration",
                  "scope": 19313,
                  "src": "28068:17:24",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 19307,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "28068:7:24",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "28067:19:24"
            },
            "returnParameters": {
              "id": 19312,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 19311,
                  "mutability": "mutable",
                  "name": "_delegator",
                  "nameLocation": "28118:10:24",
                  "nodeType": "VariableDeclaration",
                  "scope": 19313,
                  "src": "28110:18:24",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 19310,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "28110:7:24",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "28109:20:24"
            },
            "scope": 19314,
            "src": "28040:90:24",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          }
        ],
        "scope": 19315,
        "src": "944:27189:24",
        "usedErrors": [],
        "usedEvents": [
          15424,
          15429,
          15434,
          15439,
          15446,
          15453,
          15462,
          15471,
          15478,
          15487,
          15492,
          15497,
          15504,
          15516,
          15523,
          15530,
          15537,
          15543,
          15550,
          15559,
          15568,
          15577,
          15584,
          15589,
          15594,
          20025,
          20030,
          20035,
          20046,
          20051,
          20445
        ]
      }
    ],
    "src": "700:27434:24"
  },
  "compiler": {
    "name": "solc",
    "version": "0.8.20+commit.a1b79de6.Linux.g++"
  },
  "networks": {},
  "schemaVersion": "3.4.14",
  "updatedAt": "2023-07-28T09:26:06.143Z",
  "devdoc": {
    "events": {
      "AuctionCreated(address,address,uint256)": {
        "details": "Emitted from `IColonyNetwork.startTokenAuction` function",
        "params": {
          "auction": "Address of the created auction contract",
          "quantity": "Quantity of `token` to auction",
          "token": "Address of the token for auction"
        }
      },
      "ColonyAdded(uint256,address,address)": {
        "details": "Emitted from `IColonyNetwork.createColony` function",
        "params": {
          "colonyAddress": "The colony address in the network",
          "colonyId": "The colony id in the network",
          "token": "Address of the associated colony token"
        }
      },
      "ColonyLabelRegistered(address,bytes32)": {
        "params": {
          "colony": "The colony address registered",
          "label": "The label registered"
        }
      },
      "ColonyNetworkInitialised(address)": {
        "params": {
          "resolver": "The Resolver contract address used by the Colony version 1"
        }
      },
      "ColonyVersionAdded(uint256,address)": {
        "params": {
          "resolver": "The new colony contract resolver contract instance",
          "version": "The new int colony version, e.g. 2, 3, 4, etc"
        }
      },
      "ExtensionAddedToNetwork(bytes32,uint256)": {
        "params": {
          "extensionId": "The identifier for the extension",
          "version": "The version of the extension"
        }
      },
      "ExtensionDeprecated(bytes32,address,bool)": {
        "params": {
          "colony": "The address of the colony",
          "deprecated": "Whether the extension is deprecated or not",
          "extensionId": "The identifier for the extension"
        }
      },
      "ExtensionInstalled(bytes32,address,uint256)": {
        "params": {
          "colony": "The address of the colony",
          "extensionId": "The identifier for the extension",
          "version": "The version of the extension"
        }
      },
      "ExtensionUninstalled(bytes32,address)": {
        "params": {
          "colony": "The address of the colony",
          "extensionId": "The identifier for the extension"
        }
      },
      "ExtensionUpgraded(bytes32,address,uint256)": {
        "params": {
          "colony": "The address of the colony",
          "extensionId": "The identifier for the extension",
          "version": "The new version of the extension"
        }
      },
      "MetaColonyCreated(address,address,uint256)": {
        "params": {
          "metaColony": "Address of the MetaColony instance (i.e. EtherRouter)",
          "rootSkillId": "Id of the root skill of the global skills tree, normally this is 2 Note that the speciat mining skill is created at rootSkillId + 1, so normally this is 3 Skill id 1 is normally the local skill associate with meta colony domain 1",
          "token": "Address of the associated CLNY token"
        }
      },
      "MiningCycleResolverSet(address)": {
        "params": {
          "miningCycleResolver": "Resolver address for the ReputationMiningCycle contract"
        }
      },
      "NetworkFeeInverseSet(uint256)": {
        "params": {
          "feeInverse": "The network fee inverse value"
        }
      },
      "RecoveryModeEntered(address)": {
        "params": {
          "user": "The address that triggered recovery mode"
        }
      },
      "RecoveryModeExitApproved(address)": {
        "params": {
          "user": "The address signalling they are happy with the state"
        }
      },
      "RecoveryModeExited(address)": {
        "params": {
          "user": "The address that left recovery mode"
        }
      },
      "RecoveryRoleSet(address,bool)": {
        "params": {
          "setTo": "The boolean indicating whether the role is being granted or revoked",
          "user": "The address being modified"
        }
      },
      "RecoveryStorageSlotSet(address,uint256,bytes32,bytes32)": {
        "params": {
          "fromValue": "The value the storage slot had before this transaction",
          "slot": "The storage slot being modified",
          "toValue": "The value the storage slot has after this transaction",
          "user": "The address that set the storage slot"
        }
      },
      "RegistrarInitialised(address,bytes32)": {
        "params": {
          "ens": "Address of ENS registrar",
          "rootNode": "Namehash of the root node for the domain"
        }
      },
      "ReputationMiningCycleComplete(bytes32,uint256)": {
        "params": {
          "hash": "The root hash of the newly accepted reputation state",
          "nLeaves": "The number of leaves in the reputation state"
        }
      },
      "ReputationMiningInitialised(address)": {
        "params": {
          "inactiveReputationMiningCycle": "Address of the newly created ReputationMiningCycle used in logging reputation changes"
        }
      },
      "ReputationMiningRewardSet(uint256)": {
        "params": {
          "amount": "Amount of the reward"
        }
      },
      "ReputationRootHashSet(bytes32,uint256,address[],uint256)": {
        "params": {
          "newHash": "The reputation root hash",
          "newNLeaves": "The updated leaves count value",
          "reward": "Amount of CLNY distributed as reward to miners",
          "stakers": "Array of users who submitted or backed the hash accepted"
        }
      },
      "SkillAdded(uint256,uint256)": {
        "details": "Emitted from `IColonyNetwork.addSkill` function",
        "params": {
          "parentSkillId": "The id of the parent skill under which this new skill is added",
          "skillId": "The skill id"
        }
      },
      "TokenAuthorityDeployed(address)": {
        "params": {
          "tokenAuthorityAddress": "The address of the token authority deployed"
        }
      },
      "TokenDeployed(address)": {
        "params": {
          "tokenAddress": "The address of the token deployed"
        }
      },
      "TokenLockingAddressSet(address)": {
        "params": {
          "tokenLocking": "Address of the TokenLocking contract"
        }
      },
      "TokenWhitelisted(address,bool)": {
        "params": {
          "status": "The whitelist status",
          "token": "The token being set"
        }
      },
      "UserLabelRegistered(address,bytes32)": {
        "params": {
          "label": "The label registered",
          "user": "The user address registered"
        }
      }
    },
    "kind": "dev",
    "methods": {
      "addColonyVersion(uint256,address)": {
        "params": {
          "_resolver": "Address of the `Resolver` contract which will be used with the underlying `EtherRouter` contract",
          "_version": "The new Colony contract version"
        }
      },
      "addExtensionToNetwork(bytes32,address)": {
        "details": "Can only be called by the MetaColony.The extension version is queried from the resolver itself.",
        "params": {
          "_extensionId": "keccak256 hash of the extension name, used as an indentifier",
          "_resolver": "The deployed resolver containing the extension contract logic"
        }
      },
      "addSkill(uint256)": {
        "details": "Errors if the parent skill does not exist or if this is called by an unauthorised sender.",
        "params": {
          "_parentSkillId": "Id of the skill under which the new skill will be added. If 0, a global skill is added with no parent."
        },
        "returns": {
          "_skillId": "Id of the added skill"
        }
      },
      "addr(bytes32)": {
        "params": {
          "_node": "The namehash of the ENS address being requested"
        },
        "returns": {
          "_address": "The address the supplied node resolves to"
        }
      },
      "appendReputationUpdateLog(address,int256,uint256)": {
        "details": "Errors if it is called by anyone but a colony or if skill with id `_skillId` does not exist or.",
        "params": {
          "_amount": "The amount of reputation change for the update, this can be a negative as well as a positive value",
          "_skillId": "The skill for the reputation update",
          "_user": "The address of the user for the reputation update"
        }
      },
      "burnUnneededRewards(uint256)": {
        "details": "Only callable by the active reputation mining cycle",
        "params": {
          "_amount": "The amount of CLNY to burn"
        }
      },
      "calculateMinerWeight(uint256,uint256)": {
        "params": {
          "_submissonIndex": "Index of reputation hash submission (between 0 and 11)",
          "_timeStaked": "Amount of time (in seconds) that the miner has staked their CLNY"
        },
        "returns": {
          "_minerWeight": "The weight of miner reward"
        }
      },
      "checkNotAdditionalProtectedVariable(uint256)": {
        "details": "No return value, but should throw if protected.This is external, but is only expected to be called from ContractRecovery; no need toexpose this to any users.",
        "params": {
          "_slot": "The storage slot number to check."
        }
      },
      "claimMiningReward(address)": {
        "details": "Can be called by anyone, not just _recipient",
        "params": {
          "_recipient": "The user whose rewards to claim"
        }
      },
      "createColony(address)": {
        "details": "This is now deprecated and will be removed in a future versionFor the colony to mint tokens, token ownership must be transferred to the new colony",
        "params": {
          "_tokenAddress": "Address of an ERC20 token to serve as the colony token."
        },
        "returns": {
          "_colonyAddress": "Address of the newly created colony"
        }
      },
      "createColony(address,uint256,string)": {
        "details": "For the colony to mint tokens, token ownership must be transferred to the new colony",
        "params": {
          "_colonyName": "The label to register (if null, no label is registered)",
          "_tokenAddress": "Address of an ERC20 token to serve as the colony token",
          "_version": "The version of colony to deploy (pass 0 for the current version)"
        },
        "returns": {
          "_colonyAddress": "Address of the newly created colony"
        }
      },
      "createColony(address,uint256,string,string)": {
        "details": "For the colony to mint tokens, token ownership must be transferred to the new colonyWe expect this function to only be used by the dapp",
        "params": {
          "_colonyName": "The label to register (if null, no label is registered)",
          "_metadata": "The metadata associated with the new colony",
          "_tokenAddress": "Address of an ERC20 token to serve as the colony token",
          "_version": "The version of colony to deploy (pass 0 for the current version)"
        },
        "returns": {
          "_colonyAddress": "Address of the newly created colony"
        }
      },
      "createColony(address,uint256,string,string,bool)": {
        "details": "This is now deprecated and will be removed in a future versionFor the colony to mint tokens, token ownership must be transferred to the new colony",
        "params": {
          "_colonyName": "The label to register (if null, no label is registered)",
          "_orbitdb": "DEPRECATED Currently a no-op",
          "_tokenAddress": "Address of an ERC20 token to serve as the colony token",
          "_useExtensionManager": "DEPRECATED Currently a no-op",
          "_version": "The version of colony to deploy (pass 0 for the current version)"
        },
        "returns": {
          "_colonyAddress": "Address of the newly created colony"
        }
      },
      "createColonyForFrontend(address,string,string,uint8,uint256,string,string)": {
        "details": "We expect this function to only be used by the dapp",
        "params": {
          "_colonyName": "The label to register (if null, no label is registered)",
          "_decimals": "The number of decimal places that 1 user-facing token can be divided up in to (optional) In the case of ETH, and most tokens, this is 18.",
          "_metadata": "The metadata associated with the new colony",
          "_name": "The name of the token (optional)",
          "_symbol": "The short 'ticket' symbol for the token (optional)",
          "_tokenAddress": "Address of an ERC20 token to serve as the colony token (optional)",
          "_version": "The version of colony to deploy (pass 0 for the current version)"
        },
        "returns": {
          "colony": "colony",
          "token": "The address of the token - this may just be the passed _tokenAddress"
        }
      },
      "createMetaColony(address)": {
        "params": {
          "_tokenAddress": "Address of the CLNY token"
        }
      },
      "deployTokenAuthority(address,address,address[])": {
        "details": "This is more expensive than deploying a token directly, but is able to be done via a metatransaction",
        "params": {
          "_allowedToTransfer": "An array of addresses that are allowed to transfer the token even if it's locked",
          "_colony": "The address of the colony in control of the token",
          "_token": "The address of the token"
        },
        "returns": {
          "_tokenAuthority": "The address of the newly deployed TokenAuthority"
        }
      },
      "deployTokenViaNetwork(string,string,uint8)": {
        "details": "This is more expensive than deploying a token directly, but is able to be done via a metatransaction",
        "params": {
          "_decimals": "The number of decimal places that 1 user-facing token can be divided up in to In the case of ETH, and most tokens, this is 18.",
          "_name": "The name of the token",
          "_symbol": "The short 'ticket' symbol for the token"
        },
        "returns": {
          "_token": "The address of the newly deployed token"
        }
      },
      "deprecateExtension(bytes32,bool)": {
        "params": {
          "_deprecated": "Whether to deprecate the extension or not",
          "_extensionId": "keccak256 hash of the extension name, used as an indentifier"
        }
      },
      "deprecateSkill(uint256)": {
        "details": "This function is deprecated and will be removed in a future release",
        "params": {
          "_skillId": "Id of the skill"
        }
      },
      "deprecateSkill(uint256,bool)": {
        "params": {
          "_deprecated": "Deprecation status",
          "_skillId": "Id of the skill"
        },
        "returns": {
          "_changed": "Whether the deprecated state was changed"
        }
      },
      "executeMetaTransaction(address,bytes,bytes32,bytes32,uint8)": {
        "params": {
          "payload": "The transaction data that will be executed if signature valid",
          "sigR": "The 'r' part of the signature",
          "sigS": "The 's' part of the signature",
          "sigV": "The 'v' part of the signature",
          "userAddress": "The address of the user that signed the metatransaction"
        }
      },
      "getChildSkillId(uint256,uint256)": {
        "params": {
          "_childSkillIndex": "Index of the `skill.children` array to get",
          "_skillId": "Id of the skill"
        },
        "returns": {
          "_childSkillId": "Skill Id of the requested child skill"
        }
      },
      "getColony(uint256)": {
        "params": {
          "_id": "Id of the colony to get"
        },
        "returns": {
          "_colonyAddress": "The colony address, if no colony was found, returns 0x0"
        }
      },
      "getColonyCount()": {
        "returns": {
          "_count": "The colony count"
        }
      },
      "getColonyVersionResolver(uint256)": {
        "params": {
          "_version": "The Colony contract version"
        },
        "returns": {
          "_resolverAddress": "Address of the `Resolver` contract"
        }
      },
      "getCurrentColonyVersion()": {
        "returns": {
          "_version": "The current / latest Colony contract version"
        }
      },
      "getENSRegistrar()": {
        "returns": {
          "_address": "The address the ENSRegistrar resolves to"
        }
      },
      "getExtensionInstallation(bytes32,address)": {
        "params": {
          "_colony": "Address of the colony the extension is installed in",
          "_extensionId": "keccak256 hash of the extension name, used as an indentifier"
        },
        "returns": {
          "_installation": "The address of the installed extension"
        }
      },
      "getExtensionResolver(bytes32,uint256)": {
        "params": {
          "_extensionId": "keccak256 hash of the extension name, used as an indentifier",
          "_version": "Version of the extension"
        },
        "returns": {
          "_resolver": "The address of the deployed resolver"
        }
      },
      "getFeeInverse()": {
        "returns": {
          "_feeInverse": "The inverse of the network fee"
        }
      },
      "getMetaColony()": {
        "returns": {
          "_colonyAddress": "The Meta colony address, if no colony was found, returns 0x0"
        }
      },
      "getMetatransactionNonce(address)": {
        "params": {
          "userAddress": "The address of the user that will sign the metatransaction"
        }
      },
      "getMiningDelegator(address)": {
        "params": {
          "_delegate": "The address that wants to mine"
        },
        "returns": {
          "_delegator": "The address they are allowed to mine on behalf of"
        }
      },
      "getMiningResolver()": {
        "returns": {
          "miningResolverAddress": "The address of the mining cycle resolver currently used by new instances"
        }
      },
      "getMiningStake(address)": {
        "params": {
          "_user": "The user to query"
        },
        "returns": {
          "_info": "The amount staked and the timestamp the stake was made at."
        }
      },
      "getParentSkillId(uint256,uint256)": {
        "params": {
          "_parentSkillIndex": "Index of the `skill.parents` array to get Note that not all parent skill ids are stored here. See `Skill.parents` member for definition on which parents are stored",
          "_skillId": "Id of the skill"
        },
        "returns": {
          "_parentSkillId": "Skill Id of the requested parent skill"
        }
      },
      "getPayoutWhitelist(address)": {
        "params": {
          "_token": "The token being queried"
        },
        "returns": {
          "_status": "Will be `true` if token is whitelisted"
        }
      },
      "getProfileDBAddress(bytes32)": {
        "params": {
          "_node": "The Namehash of the account being queried."
        },
        "returns": {
          "_orbitdb": "A string containing the address of the orbit database"
        }
      },
      "getReplacementReputationUpdateLogEntry(address,uint256)": {
        "params": {
          "_id": "The log entry number we wish to see if there is a replacement for",
          "_reputationMiningCycle": "The address of the reputation mining cycle we are asking about"
        },
        "returns": {
          "_reputationLogEntry": "ReputationLogEntry instance with the details of the log entry (if it exists)"
        }
      },
      "getReplacementReputationUpdateLogsExist(address)": {
        "params": {
          "_reputationMiningCycle": "The reputation mining cycle address we want to know if any entries have been replaced in."
        },
        "returns": {
          "_exists": "Boolean indicating whether there is a replacement log"
        }
      },
      "getReputationMiningCycle(bool)": {
        "params": {
          "_active": "Whether the user wants the active or inactive reputation mining cycle"
        },
        "returns": {
          "_repMiningCycleAddress": "address of active or inactive ReputationMiningCycle"
        }
      },
      "getReputationMiningCycleReward()": {
        "returns": {
          "_amount": "The CLNY awarded per mining cycle to the miners"
        }
      },
      "getReputationMiningSkillId()": {
        "returns": {
          "_skillId": "The `skillId` of the reputation mining skill."
        }
      },
      "getReputationRootHash()": {
        "returns": {
          "rootHash": "The current Reputation Root Hash"
        }
      },
      "getReputationRootHashNLeaves()": {
        "details": "I cannot see a reason why a user's client would need to call this - only stored to help with some edge cases in reputation mining dispute resolution.",
        "returns": {
          "nLeaves": "uint256 The number of leaves in the state tree"
        }
      },
      "getReputationRootHashNNodes()": {
        "details": "Deprecated, replaced by getReputationRootHashNLeaves which does the same thing but is more accurately named.will be removed in a later version.",
        "returns": {
          "nNodes": "uint256 The number of leaves in the state tree"
        }
      },
      "getSkill(uint256)": {
        "params": {
          "_skillId": "Id of the skill"
        },
        "returns": {
          "_skill": "The Skill struct"
        }
      },
      "getSkillCount()": {
        "returns": {
          "_count": "The skill count"
        }
      },
      "getTokenLocking()": {
        "returns": {
          "_lockingAddress": "Token locking contract address"
        }
      },
      "initialise(address,uint256)": {
        "details": "Only allowed to be run once, by the Network owner before any Colony versions are added.",
        "params": {
          "_resolver": "Address of the resolver for Colony contract",
          "_version": "Version of the Colony contract the resolver represents"
        }
      },
      "initialiseRootLocalSkill()": {
        "returns": {
          "_rootLocalSkillId": "The root local skill"
        }
      },
      "installExtension(bytes32,uint256)": {
        "params": {
          "_extensionId": "keccak256 hash of the extension name, used as an indentifier",
          "_version": "Version of the extension to install"
        }
      },
      "isColony(address)": {
        "params": {
          "_colony": "Address of the colony"
        },
        "returns": {
          "_addressIsColony": "true if specified address is a colony, otherwise false"
        }
      },
      "isInRecoveryMode()": {
        "returns": {
          "inRecoveryMode": "Return true if recovery mode is active, false otherwise"
        }
      },
      "lookupRegisteredENSDomain(address)": {
        "params": {
          "_addr": "The address we wish to find the corresponding ENS domain for (if any)"
        },
        "returns": {
          "_domain": "A string containing the colony-based ENS name corresponding to addr"
        }
      },
      "multicall(bytes[])": {
        "details": "The `msg.value` should not be trusted for any method callable from multicall.",
        "params": {
          "data": "The encoded function data for each of the calls to make to this contract"
        },
        "returns": {
          "results": "The results from each of the calls passed in via data"
        }
      },
      "numRecoveryRoles()": {
        "returns": {
          "numRoles": "Number of users with the recovery role."
        }
      },
      "punishStakers(address[],uint256)": {
        "details": "While external, it can only be called successfully by the current ReputationMiningCycle.",
        "params": {
          "_amount": "Amount of stake to slash",
          "_stakers": "Array of the addresses of stakers to punish"
        }
      },
      "registerColonyLabel(string,string)": {
        "params": {
          "_colonyName": "The label to register.",
          "_orbitdb": "The path of the orbitDB database associated with the colony name"
        }
      },
      "registerUserLabel(string,string)": {
        "params": {
          "_orbitdb": "The path of the orbitDB database associated with the user profile",
          "_username": "The label to register"
        }
      },
      "removeRecoveryRole(address)": {
        "params": {
          "_user": "User we want to remove recovery role from"
        }
      },
      "reward(address,uint256)": {
        "details": "Only callable by the active reputation mining cycle",
        "params": {
          "_amount": "The amount of CLNY to be awarded",
          "_recipient": "The address receiving the award"
        }
      },
      "setFeeInverse(uint256)": {
        "params": {
          "_feeInverse": "The inverse of the network fee to set"
        }
      },
      "setMiningDelegate(address,bool)": {
        "params": {
          "_allowed": "Whether they are allowed (true) or not (false) to mine on your behalf",
          "_delegate": "The address you're giving or removing permission from"
        }
      },
      "setMiningResolver(address)": {
        "params": {
          "_miningResolverAddress": "The address of the Resolver contract with the functions correctly wired."
        }
      },
      "setPayoutWhitelist(address,bool)": {
        "params": {
          "_status": "The whitelist status",
          "_token": "The token being set"
        }
      },
      "setRecoveryRole(address)": {
        "params": {
          "_user": "User we want to give a recovery role to"
        }
      },
      "setReplacementReputationUpdateLogEntry(address,uint256,address,int256,uint256,address,uint128,uint128)": {
        "details": "Note that strictly, `_nUpdates` and `_nPreviousUpdates` don't need to be set - they're only used during dispute resolution, which these replacement log entries are never used for. However, for ease of resyncing the client, we have decided to include them for now.",
        "params": {
          "_amount": "The amount of reputation being earned / lost",
          "_colony": "The address of the colony being updated",
          "_id": "The number of the log entry in the reputation mining cycle in question.",
          "_nPreviousUpdates": "The number of updates in the log before this entry",
          "_nUpdates": "The number of updates the log entry corresponds to",
          "_reputationMiningCycle": "The address of the reputation mining cycle that the log was in.",
          "_skillId": "The id of the origin skill for the reputation update",
          "_user": "The address of the user earning / losing the reputation"
        }
      },
      "setReputationMiningCycleReward(uint256)": {
        "details": "Can only be called by the MetaColony.",
        "params": {
          "_amount": "The CLNY awarded per mining cycle to the miners"
        }
      },
      "setReputationRootHash(bytes32,uint256,address[])": {
        "params": {
          "_newHash": "The reputation root hash",
          "_newNLeaves": "The updated leaves count value",
          "_stakers": "Array of users who submitted or backed the hash, being accepted here as the new reputation root hash"
        }
      },
      "setStorageSlotRecovery(uint256,bytes32)": {
        "details": "certain critical variables are protected from editing in this function",
        "params": {
          "_slot": "Uint address of storage slot to be updated",
          "_value": "word of data to be set"
        }
      },
      "setTokenLocking(address)": {
        "params": {
          "_tokenLockingAddress": "Address of the locking contract"
        }
      },
      "setupRegistrar(address,bytes32)": {
        "params": {
          "_ens": "Address of ENS registrar",
          "_rootNode": "Namehash of the root node for the domain"
        }
      },
      "stakeForMining(uint256)": {
        "params": {
          "_amount": "Amount of CLNY to stake for the purposes of mining"
        }
      },
      "startTokenAuction(address)": {
        "params": {
          "_token": "Address of the token held by the network to be auctioned"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "Interface identification is specified in ERC-165.",
        "params": {
          "_interfaceID": "The interface identifier, as specified in ERC-165"
        },
        "returns": {
          "_status": "`true` if the contract implements `interfaceID`"
        }
      },
      "uninstallExtension(bytes32)": {
        "params": {
          "_extensionId": "keccak256 hash of the extension name, used as an indentifier"
        }
      },
      "unstakeForMining(uint256)": {
        "params": {
          "_amount": "Amount of CLNY staked for mining to unstake"
        }
      },
      "updateColonyOrbitDB(string)": {
        "params": {
          "_orbitdb": "The path of the orbitDB database to be associated with the colony"
        }
      },
      "updateUserOrbitDB(string)": {
        "params": {
          "_orbitdb": "The path of the orbitDB database to be associated with the user"
        }
      },
      "upgradeExtension(bytes32,uint256)": {
        "params": {
          "_extensionId": "keccak256 hash of the extension name, used as an indentifier",
          "_newVersion": "Version of the extension to upgrade to (must be one greater than current)"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "AuctionCreated(address,address,uint256)": {
        "notice": "Event logged when a new auction is created and started"
      },
      "ColonyAdded(uint256,address,address)": {
        "notice": "Event logged when a new colony is added"
      },
      "ColonyLabelRegistered(address,bytes32)": {
        "notice": "Event logged when a \"colony.joincolony.eth\" label is registered"
      },
      "ColonyNetworkInitialised(address)": {
        "notice": "Event logged when the colony network is intialised. This is only ever emitted once in a network's lifetime"
      },
      "ColonyVersionAdded(uint256,address)": {
        "notice": "Event logged when a new colony contract version is set"
      },
      "ExtensionAddedToNetwork(bytes32,uint256)": {
        "notice": "Event logged when a new extension resolver is added to the network"
      },
      "ExtensionDeprecated(bytes32,address,bool)": {
        "notice": "Event logged when an extension is (un)deprecated in a colony"
      },
      "ExtensionInstalled(bytes32,address,uint256)": {
        "notice": "Event logged when an extension is installed in a colony"
      },
      "ExtensionUninstalled(bytes32,address)": {
        "notice": "Event logged when an extension is uninstalled from a colony"
      },
      "ExtensionUpgraded(bytes32,address,uint256)": {
        "notice": "Event logged when an extension is upgraded in a colony"
      },
      "MetaColonyCreated(address,address,uint256)": {
        "notice": "Event logged when the MetaColony is created"
      },
      "MiningCycleResolverSet(address)": {
        "notice": "Event logged when the Colony Network ReputationMiningCycleResolver contract address is set"
      },
      "NetworkFeeInverseSet(uint256)": {
        "notice": "Event logged when the network fee inverse is set"
      },
      "RecoveryModeEntered(address)": {
        "notice": "Event logged when recovery mode is triggered."
      },
      "RecoveryModeExitApproved(address)": {
        "notice": "Event logged when someone with recovery mode signals they are happy with the state and wish to leave recovery mode"
      },
      "RecoveryModeExited(address)": {
        "notice": "Event logged when recovery mode is left"
      },
      "RecoveryRoleSet(address,bool)": {
        "notice": "Event logged when user gets/loses the recovery role."
      },
      "RecoveryStorageSlotSet(address,uint256,bytes32,bytes32)": {
        "notice": "Event logged when in recovery mode a storage slot is set"
      },
      "RegistrarInitialised(address,bytes32)": {
        "notice": "Event logged when the ENS registrar is initialised"
      },
      "ReputationMiningCycleComplete(bytes32,uint256)": {
        "notice": "Event logged when a reputation mining cycle completes"
      },
      "ReputationMiningInitialised(address)": {
        "notice": "Event logged when the Reputation mining process is initialised"
      },
      "ReputationMiningRewardSet(uint256)": {
        "notice": "Event logged when the mining reward is set"
      },
      "ReputationRootHashSet(bytes32,uint256,address[],uint256)": {
        "notice": "Event logged when a new reputation root hash is set by the reputation mining process"
      },
      "SkillAdded(uint256,uint256)": {
        "notice": "Event logged when a new skill is added"
      },
      "TokenAuthorityDeployed(address)": {
        "notice": "Event logged when a token authority is deployed via transaction through the colony network"
      },
      "TokenDeployed(address)": {
        "notice": "Event logged when a token is deployed via transaction through the colony network"
      },
      "TokenLockingAddressSet(address)": {
        "notice": "Event logged when the Colony Network TokenLocking contract address is set"
      },
      "TokenWhitelisted(address,bool)": {
        "notice": "Event logged when the payout whitelist is updated"
      },
      "UserLabelRegistered(address,bytes32)": {
        "notice": "Event logged when a \"user.joincolony.eth\" label is registered"
      }
    },
    "kind": "user",
    "methods": {
      "addColonyVersion(uint256,address)": {
        "notice": "Adds a new Colony contract version and the address of associated `_resolver` contract. Secured function to authorised members. Allowed to be called by the Meta Colony only."
      },
      "addExtensionToNetwork(bytes32,address)": {
        "notice": "Add a new extension resolver to the Extensions repository."
      },
      "addSkill(uint256)": {
        "notice": "Adds a new skill to the global or local skills tree, under skill `_parentSkillId`. Only the Meta Colony is allowed to add a global skill, called via `IColony.addGlobalSkill`. Any colony is allowed to add a local skill and which is associated with a new domain via `IColony.addDomain`."
      },
      "addr(bytes32)": {
        "notice": "Returns the address the supplied node resolves do, if we are the resolver."
      },
      "appendReputationUpdateLog(address,int256,uint256)": {
        "notice": "Adds a reputation update entry to log."
      },
      "approveExitRecovery()": {
        "notice": "Indicate approval to exit recovery mode. Can only be called by user with recovery role."
      },
      "burnUnneededRewards(uint256)": {
        "notice": "Used to burn tokens that are not needed to pay out rewards (because not every possible defence was made for all submissions)"
      },
      "calculateMinerWeight(uint256,uint256)": {
        "notice": "Calculate raw miner weight in WADs."
      },
      "checkNotAdditionalProtectedVariable(uint256)": {
        "notice": "Check whether the supplied slot is a protected variable specific to this contract"
      },
      "claimMiningReward(address)": {
        "notice": "Used by a user to claim any mining rewards due to them. This will place them in their balance or pending balance, as appropriate."
      },
      "createColony(address)": {
        "notice": "Creates a new colony in the network, at version 3"
      },
      "createColony(address,uint256,string)": {
        "notice": "Creates a new colony in the network, with an optional ENS name"
      },
      "createColony(address,uint256,string,string)": {
        "notice": "Creates a new colony in the network, with an optional ENS name"
      },
      "createColony(address,uint256,string,string,bool)": {
        "notice": "Overload of the simpler `createColony` -- creates a new colony in the network with a variety of options, at version 4"
      },
      "createColonyForFrontend(address,string,string,uint8,uint256,string,string)": {
        "notice": "Creates a new colony in the network, possibly with a token and token authority, with an optional ENS name"
      },
      "createMetaColony(address)": {
        "notice": "Create the Meta Colony, same as a normal colony plus the root skill."
      },
      "deployTokenAuthority(address,address,address[])": {
        "notice": "Called to deploy a token authority"
      },
      "deployTokenViaNetwork(string,string,uint8)": {
        "notice": "Called to deploy a token."
      },
      "deprecateExtension(bytes32,bool)": {
        "notice": "Set the deprecation of an extension in a colony. Can only be called by a Colony."
      },
      "deprecateSkill(uint256)": {
        "notice": "Mark a skill as deprecated which stops new tasks and payments from using it."
      },
      "deprecateSkill(uint256,bool)": {
        "notice": "Set deprecation status for a skill"
      },
      "enterRecoveryMode()": {
        "notice": "Put colony network mining into recovery mode. Can only be called by user with recovery role."
      },
      "executeMetaTransaction(address,bytes,bytes32,bytes32,uint8)": {
        "notice": "Executes a metatransaction targeting this contract"
      },
      "exitRecoveryMode()": {
        "notice": "Exit recovery mode, can be called by anyone if enough whitelist approvals are given."
      },
      "getChildSkillId(uint256,uint256)": {
        "notice": "Get the id of the child skill at index `_childSkillIndex` for skill with Id `_skillId`."
      },
      "getColony(uint256)": {
        "notice": "Get a colony address by its Id in the network."
      },
      "getColonyCount()": {
        "notice": "Get the number of colonies in the network."
      },
      "getColonyVersionResolver(uint256)": {
        "notice": "Get the `Resolver` address for Colony contract version `_version`."
      },
      "getCurrentColonyVersion()": {
        "notice": "Returns the latest Colony contract version. This is the version used to create all new colonies."
      },
      "getENSRegistrar()": {
        "notice": "Returns the address of the ENSRegistrar for the Network."
      },
      "getExtensionInstallation(bytes32,address)": {
        "notice": "Get an extension's installation."
      },
      "getExtensionResolver(bytes32,uint256)": {
        "notice": "Get an extension's resolver."
      },
      "getFeeInverse()": {
        "notice": "Return 1 / the fee to pay to the network. e.g. if the fee is 1% (or 0.01), return 100."
      },
      "getMetaColony()": {
        "notice": "Get the Meta Colony address."
      },
      "getMetatransactionNonce(address)": {
        "notice": "Gets the next metatransaction nonce for user that should be used targeting this contract"
      },
      "getMiningDelegator(address)": {
        "notice": "Called to get the address _delegate is allowed to mine for"
      },
      "getMiningResolver()": {
        "notice": "Get the resolver to be used by new instances of ReputationMiningCycle."
      },
      "getMiningStake(address)": {
        "notice": "returns how much CLNY _user has staked for the purposes of reputation mining"
      },
      "getParentSkillId(uint256,uint256)": {
        "notice": "Get the id of the parent skill at index `_parentSkillIndex` for skill with Id `_skillId`."
      },
      "getPayoutWhitelist(address)": {
        "notice": "Get a token's status in the payout whitelist"
      },
      "getProfileDBAddress(bytes32)": {
        "notice": "Retrieve the orbitdb address corresponding to a registered account."
      },
      "getReplacementReputationUpdateLogEntry(address,uint256)": {
        "notice": "Get a replacement log entry (if set) for the log entry `_id` in the mining cycle that was at the address `_reputationMiningCycle`."
      },
      "getReplacementReputationUpdateLogsExist(address)": {
        "notice": "Get whether any replacement log entries have been set for the supplied reputation mining cycle.Used by the client to avoid doubling the number of RPC calls when syncing from scratch."
      },
      "getReputationMiningCycle(bool)": {
        "notice": "Get the address of either the active or inactive reputation mining cycle, based on `active`. The active reputation mining cycle is the one currently under consideration by reputation miners. The inactive reputation cycle is the one with the log that is being appended to."
      },
      "getReputationMiningCycleReward()": {
        "notice": "Called to get the total per-cycle reputation mining reward."
      },
      "getReputationMiningSkillId()": {
        "notice": "Get the `skillId` of the reputation mining skill. Only set once the metacolony is set up."
      },
      "getReputationRootHash()": {
        "notice": "Get the root hash of the current reputation state tree."
      },
      "getReputationRootHashNLeaves()": {
        "notice": "Get the number of leaves in the current reputation state tree."
      },
      "getReputationRootHashNNodes()": {
        "notice": "Get the number of leaves in the current reputation state tree."
      },
      "getSkill(uint256)": {
        "notice": "Get the `nParents` and `nChildren` of skill with id `_skillId`."
      },
      "getSkillCount()": {
        "notice": "Get the number of skills in the network including both global and local skills."
      },
      "getTokenLocking()": {
        "notice": "Get token locking contract address."
      },
      "initialise(address,uint256)": {
        "notice": "Initialises the colony network by setting the first Colony version resolver to `_resolver` address."
      },
      "initialiseReputationMining()": {
        "notice": "Creates initial inactive reputation mining cycle."
      },
      "initialiseRootLocalSkill()": {
        "notice": "Initialise the local skills tree for a colony"
      },
      "installExtension(bytes32,uint256)": {
        "notice": "Install an extension in a colony. Can only be called by a Colony."
      },
      "isColony(address)": {
        "notice": "Check if specific address is a colony created on colony network."
      },
      "isInRecoveryMode()": {
        "notice": "Is colony network in recovery mode."
      },
      "lookupRegisteredENSDomain(address)": {
        "notice": "Reverse lookup a username from an address."
      },
      "multicall(bytes[])": {
        "notice": "Call multiple functions in the current contract and return the data from all of them if they all succeed"
      },
      "numRecoveryRoles()": {
        "notice": "Return number of recovery roles."
      },
      "punishStakers(address[],uint256)": {
        "notice": "Function called to punish people who staked against a new reputation root hash that turned out to be incorrect."
      },
      "registerColonyLabel(string,string)": {
        "notice": "Register a \"colony.joincolony.eth\" label. Can only be called by a Colony."
      },
      "registerUserLabel(string,string)": {
        "notice": "Register a \"user.joincolony.eth\" label."
      },
      "removeRecoveryRole(address)": {
        "notice": "Remove colony recovery role. Can only be called by root role."
      },
      "reward(address,uint256)": {
        "notice": "Used to track that a user is eligible to claim a reward"
      },
      "setFeeInverse(uint256)": {
        "notice": "Set the colony network fee to pay. e.g. if the fee is 1% (or 0.01), pass 100 as `_feeInverse`."
      },
      "setMiningDelegate(address,bool)": {
        "notice": "Called to give or remove another address's permission to mine on your behalf"
      },
      "setMiningResolver(address)": {
        "notice": "Set the resolver to be used by new instances of ReputationMiningCycle."
      },
      "setPayoutWhitelist(address,bool)": {
        "notice": "Set a token's status in the payout whitelist"
      },
      "setRecoveryRole(address)": {
        "notice": "Set new colony recovery role. Can be called by root."
      },
      "setReplacementReputationUpdateLogEntry(address,uint256,address,int256,uint256,address,uint128,uint128)": {
        "notice": "Set a replacement log entry if we're in recovery mode."
      },
      "setReputationMiningCycleReward(uint256)": {
        "notice": "Called to set the total per-cycle reputation reward, which will be split between all miners."
      },
      "setReputationRootHash(bytes32,uint256,address[])": {
        "notice": "Set a new Reputation root hash and starts a new mining cycle. Can only be called by the ReputationMiningCycle contract."
      },
      "setStorageSlotRecovery(uint256,bytes32)": {
        "notice": "Update value of arbitrary storage variable. Can only be called by user with recovery role."
      },
      "setTokenLocking(address)": {
        "notice": "Sets the token locking address. This is only set once, and can't be changed afterwards."
      },
      "setupRegistrar(address,bytes32)": {
        "notice": "Setup registrar with ENS and root node."
      },
      "stakeForMining(uint256)": {
        "notice": "Stake CLNY to allow the staker to participate in reputation mining."
      },
      "startNextCycle()": {
        "notice": "Starts a new Reputation Mining cycle. Explicitly called only the first time, subsequently called from within `setReputationRootHash`."
      },
      "startTokenAuction(address)": {
        "notice": "Create and start a new `DutchAuction` for the entire amount of `_token` owned by the Colony Network."
      },
      "supportsInterface(bytes4)": {
        "notice": "Query if a contract implements an interface"
      },
      "uninstallExtension(bytes32)": {
        "notice": "Uninstall an extension in a colony. Can only be called by a Colony."
      },
      "unstakeForMining(uint256)": {
        "notice": "Unstake CLNY currently staked for reputation mining."
      },
      "updateColonyOrbitDB(string)": {
        "notice": "Update a colony's orbitdb address. Can only be called by a colony with a registered subdomain"
      },
      "updateUserOrbitDB(string)": {
        "notice": "Update a user's orbitdb address. Can only be called by a user with a registered subdomain"
      },
      "upgradeExtension(bytes32,uint256)": {
        "notice": "Upgrade an extension in a colony. Can only be called by a Colony."
      }
    },
    "version": 1
  }
}